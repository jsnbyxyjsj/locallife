import { ILeaf, IPointData, IBranch, IBoundsData, IFunction } from '@leafer/interface';

declare const LeafHelper: {
    updateAllWorldMatrix(leaf: ILeaf): void;
    updateAllWorldOpacity(leaf: ILeaf): void;
    updateAllChange(leaf: ILeaf): void;
    worldHittable(t: ILeaf): boolean;
    moveWorld(t: ILeaf, x: number, y: number): void;
    moveLocal(t: ILeaf, x: number, y?: number): void;
    zoomOfWorld(t: ILeaf, origin: IPointData, scaleX: number, scaleY?: number, moveLayer?: ILeaf): void;
    zoomOfLocal(t: ILeaf, origin: IPointData, scaleX: number, scaleY?: number, moveLayer?: ILeaf): void;
    rotateOfWorld(t: ILeaf, origin: IPointData, angle: number, moveLayer?: ILeaf): void;
    rotateOfLocal(t: ILeaf, origin: IPointData, angle: number, moveLayer?: ILeaf): void;
    skewOfWorld(t: ILeaf, origin: IPointData, skewX: number, skewY?: number, moveLayer?: ILeaf): void;
    skewOfLocal(t: ILeaf, origin: IPointData, skewX: number, skewY: number, moveLayer?: ILeaf): void;
    drop(t: ILeaf, parent: IBranch): void;
};

declare const LeafBoundsHelper: {
    worldBounds(target: ILeaf): IBoundsData;
    localBoxBounds(target: ILeaf): IBoundsData;
    localEventBounds(target: ILeaf): IBoundsData;
    localRenderBounds(target: ILeaf): IBoundsData;
    maskLocalBoxBounds(target: ILeaf): IBoundsData;
    maskLocalEventBounds(target: ILeaf): IBoundsData;
    maskLocalRenderBounds(target: ILeaf): IBoundsData;
};

interface ILeafPushList {
    push(item: ILeaf): void;
}
declare const BranchHelper: {
    sort(a: ILeaf, b: ILeaf): number;
    pushAllChildBranch(branch: ILeaf, pushList: ILeafPushList): void;
    pushAllParent(leaf: ILeaf, pushList: ILeafPushList): void;
    pushAllBranchStack(branch: ILeaf, pushList: ILeaf[]): void;
    updateWorldBoundsByBranchStack(branchStack: ILeaf[]): void;
};

declare const WaitHelper: {
    run(wait: IFunction[]): void;
};

export { BranchHelper, LeafBoundsHelper, LeafHelper, WaitHelper };
