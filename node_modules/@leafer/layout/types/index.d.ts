import { ILeafLayout, ILeaf, IBoundsData, ILayoutLocationType, IMatrixData, ILayoutBoundsType } from '@leafer/interface';

declare class LeafLayout implements ILeafLayout {
    leaf: ILeaf;
    useZoomProxy: boolean;
    boxBounds: IBoundsData;
    strokeBounds: IBoundsData;
    renderBounds: IBoundsData;
    marginBounds: IBoundsData;
    contentBounds: IBoundsData;
    localStrokeBounds: IBoundsData;
    localRenderBounds: IBoundsData;
    protected _worldContentBounds: IBoundsData;
    protected _worldBoxBounds: IBoundsData;
    protected _worldStrokeBounds: IBoundsData;
    matrixChanged: boolean;
    positionChanged: boolean;
    scaleChanged: boolean;
    rotationChanged: boolean;
    boundsChanged: boolean;
    boxChanged: boolean;
    strokeChanged: boolean;
    renderChanged: boolean;
    localBoxChanged: boolean;
    surfaceChanged: boolean;
    opacityChanged: boolean;
    hitCanvasChanged: boolean;
    childrenSortChanged?: boolean;
    affectScaleOrRotation: boolean;
    affectRotation: boolean;
    affectChildrenSort?: boolean;
    strokeSpread: number;
    renderSpread: number;
    strokeBoxSpread: number;
    renderShapeSpread: number;
    constructor(leaf: ILeaf);
    checkUpdate(force?: boolean): void;
    getTransform(locationType: ILayoutLocationType): IMatrixData;
    getBounds(type: ILayoutBoundsType, locationType: ILayoutLocationType): IBoundsData;
    protected getWorldContentBounds(): IBoundsData;
    protected getWorldBoxBounds(): IBoundsData;
    protected getWorldStrokeBounds(): IBoundsData;
    spreadStrokeCancel(): void;
    spreadRenderCancel(): void;
    spreadStroke(): void;
    spreadRender(): void;
    boxChange(): void;
    localBoxChange(): void;
    strokeChange(): void;
    renderChange(): void;
    positionChange(): void;
    scaleChange(): void;
    rotationChange(): void;
    protected _scaleOrRotationChange(): void;
    surfaceChange(): void;
    opacityChange(): void;
    childrenSortChange(): void;
    destroy(): void;
}

export { LeafLayout };
