import { ILeaf, ISelector, ILeafList, IRadiusPointData, IPointData, ISelectPathOptions, ISelectPathResult, ISelectorConfig, ILeafMap, ILeafArrayMap, IEventListenerId } from '@leafer/interface';
import { LeafList, ChildEvent } from '@leafer/core';

declare class FindPath {
    protected target: ILeaf;
    protected selector: ISelector;
    protected findList: ILeaf[];
    protected exclude: ILeafList;
    protected point: IRadiusPointData;
    constructor(target: ILeaf, selector: ISelector);
    getByPoint(hitPoint: IPointData, hitRadius: number, options?: ISelectPathOptions): ISelectPathResult;
    getBestMatchLeaf(): ILeaf;
    getPath(leaf: ILeaf): LeafList;
    getHitablePath(leaf: ILeaf): LeafList;
    getThroughPath(list: ILeaf[]): LeafList;
    protected eachFind(children: Array<ILeaf>, hitMask: boolean): void;
    protected hitChild(child: ILeaf, point: IRadiusPointData): void;
    protected clear(): void;
    destroy(): void;
}

interface IFind {
    (leaf: ILeaf): boolean;
}
declare class Selector implements ISelector {
    target: ILeaf;
    config: ISelectorConfig;
    protected findPath: FindPath;
    protected innerIdList: ILeafMap;
    protected idList: ILeafMap;
    protected classNameList: ILeafArrayMap;
    protected tagNameList: ILeafArrayMap;
    protected __eventIds: IEventListenerId[];
    constructor(target: ILeaf, userConfig?: ISelectorConfig);
    getByPoint(hitPoint: IPointData, hitRadius: number, options?: ISelectPathOptions): ISelectPathResult;
    find(name: number | string, branch?: ILeaf): ILeaf | ILeaf[];
    getByInnerId(name: number, branch?: ILeaf): ILeaf;
    getById(name: string, branch?: ILeaf): ILeaf;
    getByClassName(name: string, branch?: ILeaf): ILeaf[];
    getByTagName(name: string, branch?: ILeaf): ILeaf[];
    protected loopFind(branch: ILeaf, find: IFind): void;
    protected __onRemoveChild(event: ChildEvent): void;
    protected __listenEvents(): void;
    protected __removeListenEvents(): void;
    destroy(): void;
}

export { Selector };
