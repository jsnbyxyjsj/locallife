import { IEvent, IEventTarget, IChildEvent, ILeaf, IPropertyEvent, IImageEvent, ILeaferImage, IObject, IResizeEvent, IScreenSizeData, ITransformEvent, ITransformEventData, IWatchEvent, IWatchEventData, ILayoutEvent, ILayoutBlockData, IAnimateEvent, IRenderEvent, IBounds, IRenderOptions, ILeaferEvent } from '@leafer/interface';

declare class Event implements IEvent {
    readonly type: string;
    readonly target: IEventTarget;
    readonly current: IEventTarget;
    readonly bubbles: boolean;
    readonly phase: number;
    isStopDefault: boolean;
    isStop: boolean;
    isStopNow: boolean;
    constructor(type: string, target?: IEventTarget);
    stopDefault(): void;
    stopNow(): void;
    stop(): void;
}

declare class ChildEvent extends Event implements IChildEvent {
    static ADD: string;
    static REMOVE: string;
    readonly parent?: ILeaf;
    readonly child?: ILeaf;
    constructor(type: string, child?: ILeaf, parent?: ILeaf);
}

declare class PropertyEvent extends Event implements IPropertyEvent {
    static CHANGE: string;
    readonly attrName: string;
    readonly oldValue: unknown;
    readonly newValue: unknown;
    constructor(type: string, target: IEventTarget, attrName: string, oldValue: unknown, newValue: unknown);
}

declare class ImageEvent extends Event implements IImageEvent {
    static LOAD: string;
    static LOADED: string;
    static ERROR: string;
    readonly image: ILeaferImage;
    readonly error: string | IObject;
    readonly attrName: string;
    readonly attrValue: IObject;
    constructor(type: string, data: IImageEvent);
}

declare class ResizeEvent extends Event implements IResizeEvent {
    static RESIZE: string;
    readonly width: number;
    readonly height: number;
    readonly pixelRatio: number;
    get bigger(): boolean;
    get smaller(): boolean;
    get samePixelRatio(): boolean;
    readonly old: IScreenSizeData;
    constructor(size: IScreenSizeData | string, oldSize?: IScreenSizeData);
}

declare class TransformEvent extends Event implements ITransformEvent {
    static START: string;
    static CHANGE: string;
    static END: string;
    static BEFORE_START: string;
    static BEFORE_CHANGE: string;
    static BEFORE_END: string;
    readonly x: number;
    readonly y: number;
    readonly scaleX: number;
    readonly scaleY: number;
    readonly rotation: number;
    readonly zooming: boolean;
    readonly moving: boolean;
    readonly rotating: boolean;
    readonly changing: boolean;
    constructor(type: string, params?: ITransformEventData);
}

declare class WatchEvent extends Event implements IWatchEvent {
    static REQUEST: string;
    static DATA: string;
    readonly data: IWatchEventData;
    constructor(type: string, data?: IWatchEventData);
}

declare class LayoutEvent extends Event implements ILayoutEvent {
    static CHECK_UPDATE: string;
    static REQUEST: string;
    static START: string;
    static BEFORE: string;
    static LAYOUT: string;
    static AFTER: string;
    static AGAIN: string;
    static END: string;
    readonly data: ILayoutBlockData[];
    readonly times: number;
    constructor(type: string, data?: ILayoutBlockData[], times?: number);
}

declare class AnimateEvent extends Event implements IAnimateEvent {
    static FRAME: string;
}

declare class RenderEvent extends Event implements IRenderEvent {
    static REQUEST: string;
    static START: string;
    static BEFORE: string;
    static RENDER: string;
    static AFTER: string;
    static AGAIN: string;
    static END: string;
    readonly renderBounds: IBounds;
    readonly renderOptions: IRenderOptions;
    readonly times: number;
    constructor(type: string, times?: number, bounds?: IBounds, options?: IRenderOptions);
}

declare class LeaferEvent extends Event implements ILeaferEvent {
    static START: string;
    static BEFORE_READY: string;
    static READY: string;
    static AFTER_READY: string;
    static VIEW_READY: string;
    static VIEW_COMPLETED: string;
    static STOP: string;
    static RESTART: string;
    static END: string;
}

export { AnimateEvent, ChildEvent, Event, ImageEvent, LayoutEvent, LeaferEvent, PropertyEvent, RenderEvent, ResizeEvent, TransformEvent, WatchEvent };
