import { IWatcher, ILeaf, IWatcherConfig, ILeafList, IEventListenerId } from '@leafer/interface';
import { PropertyEvent, ChildEvent } from '@leafer/core';

declare class Watcher implements IWatcher {
    target: ILeaf;
    totalTimes: number;
    disabled: boolean;
    running: boolean;
    changed: boolean;
    hasVisible: boolean;
    hasAdd: boolean;
    hasRemove: boolean;
    get childrenChanged(): boolean;
    config: IWatcherConfig;
    get updatedList(): ILeafList;
    protected __eventIds: IEventListenerId[];
    protected __updatedList: ILeafList;
    constructor(target: ILeaf, userConfig?: IWatcherConfig);
    start(): void;
    stop(): void;
    disable(): void;
    update(): void;
    protected __onAttrChange(event: PropertyEvent): void;
    protected __onChildEvent(event: ChildEvent): void;
    protected __pushChild(child: ILeaf): void;
    protected __loopChildren(parent: ILeaf): void;
    __onRquestData(): void;
    protected __listenEvents(): void;
    protected __removeListenEvents(): void;
    destroy(): void;
}

export { Watcher };
