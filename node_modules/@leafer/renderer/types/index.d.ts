import { IRenderer, ILeaf, ILeaferCanvas, IBounds, IRendererConfig, IRenderOptions, IEventListenerId, IFunction } from '@leafer/interface';
import { ResizeEvent, LayoutEvent } from '@leafer/core';

declare class Renderer implements IRenderer {
    target: ILeaf;
    canvas: ILeaferCanvas;
    updateBlocks: IBounds[];
    FPS: number;
    totalTimes: number;
    times: number;
    running: boolean;
    rendering: boolean;
    waitAgain: boolean;
    changed: boolean;
    config: IRendererConfig;
    protected renderBounds: IBounds;
    protected renderOptions: IRenderOptions;
    protected totalBounds: IBounds;
    protected __eventIds: IEventListenerId[];
    protected get needFill(): boolean;
    constructor(target: ILeaf, canvas: ILeaferCanvas, userConfig?: IRendererConfig);
    start(): void;
    stop(): void;
    update(): void;
    requestLayout(): void;
    render(callback?: IFunction): void;
    renderAgain(): void;
    renderOnce(callback?: IFunction): void;
    partRender(): void;
    clipRender(block: IBounds): void;
    fullRender(): void;
    protected __render(bounds: IBounds, realBounds?: IBounds): void;
    renderHitView(_options: IRenderOptions): void;
    renderBoundsView(_options: IRenderOptions): void;
    addBlock(block: IBounds): void;
    mergeBlocks(): void;
    protected __requestRender(): void;
    protected __onResize(e: ResizeEvent): void;
    protected __onLayoutEnd(event: LayoutEvent): void;
    protected emitRender(type: string, bounds?: IBounds, options?: IRenderOptions): void;
    protected __listenEvents(): void;
    protected __removeListenEvents(): void;
    destroy(): void;
}

export { Renderer };
