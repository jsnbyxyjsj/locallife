import { ILeaf, __Value, IObject, IFunction } from '@leafer/interface';

declare function aliasType(name: string): (target: ILeaf, key: string) => void;
declare function defineLeafAttr(target: ILeaf, key: string, defaultValue?: __Value, mergeDescriptor?: IObject & ThisType<ILeaf>): void;
declare function dataType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function positionType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function scaleType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function rotationType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function boundsType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare const pathType: typeof boundsType;
declare function affectStrokeBoundsType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare const strokeType: typeof affectStrokeBoundsType;
declare function affectRenderBoundsType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function surfaceType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function opacityType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function sortType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function maskType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function eraserType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function hitType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function cursorType(defaultValue?: __Value): (target: ILeaf, key: string) => void;
declare function dataProcessor(processor: IObject): (target: ILeaf, _key: string) => void;
declare function layoutProcessor(processor: IObject): (target: ILeaf, _key: string) => void;
declare function setDefaultValue(target: IObject, key: string, defaultValue: __Value): void;
declare function defineDataProcessor(target: ILeaf, key: string, defaultValue?: __Value): void;

declare function rewrite(method: IFunction): (target: IObject, key: string) => void;
declare function rewriteAble(): (_target: IObject) => void;
declare function useModule(module: IObject, exclude?: string[]): (target: IObject) => void;

declare function defineKey<T>(target: T, key: string, descriptor: IObject & ThisType<T>): void;
declare function getDescriptor(object: IObject, name: string): PropertyDescriptor;

declare function registerUI(): (target: IObject) => void;
declare function registerUIEvent(): (target: IObject) => void;

export { affectRenderBoundsType, affectStrokeBoundsType, aliasType, boundsType, cursorType, dataProcessor, dataType, defineDataProcessor, defineKey, defineLeafAttr, eraserType, getDescriptor, hitType, layoutProcessor, maskType, opacityType, pathType, positionType, registerUI, registerUIEvent, rewrite, rewriteAble, rotationType, scaleType, setDefaultValue, sortType, strokeType, surfaceType, useModule };
