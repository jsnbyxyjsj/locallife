'use strict';

const Platform = {
    imageSuffix: 'leaf'
};

const Creator = {};

const IncrementId = {
    RUNTIME: 'runtime',
    LEAF: 'leaf',
    TASK: 'task',
    CNAVAS: 'canvas',
    IMAGE: 'image',
    types: {},
    create(typeName) {
        const { types } = I$2;
        if (types[typeName]) {
            return types[typeName]++;
        }
        else {
            types[typeName] = 1;
            return 0;
        }
    }
};
const I$2 = IncrementId;

const MathHelper = {
    within(value, min, max) {
        if (value < min)
            value = min;
        if (value > max)
            value = max;
        return value;
    },
    fourNumber(num) {
        let one, two, three, four;
        if (num instanceof Array) {
            switch (num.length) {
                case 4:
                    return num;
                case 2:
                    one = three = num[0];
                    two = four = num[1];
                    break;
                case 3:
                    one = num[0];
                    two = four = num[1];
                    three = num[2];
                    break;
                case 1:
                    num = num[0];
                    break;
                default:
                    num = 0;
            }
        }
        return one === undefined ? [num, num, num, num] : [one, two, three, four];
    },
    formatRotation(rotation, unsign) {
        rotation %= 360;
        if (unsign) {
            if (rotation < 0)
                rotation += 360;
        }
        else {
            if (rotation > 180)
                rotation -= 360;
            if (rotation < -180)
                rotation += 360;
        }
        return rotation;
    },
    getGapRotation(rotation, gap) {
        if (gap > 1) {
            const r = Math.abs(rotation % gap);
            if (r < 1 || r > gap - 1)
                rotation = Math.round(rotation / gap) * gap;
        }
        return rotation;
    },
    formatSkew(skew) {
        return MathHelper.within(skew, -90, 90);
    }
};
const OneRadian = Math.PI / 180;
const PI2 = Math.PI * 2;
const PI_2 = Math.PI / 2;

const { sin: sin$4, cos: cos$4, acos, atan, sqrt: sqrt$3, PI: PI$1 } = Math;
const tempPoint$1 = {};
function get() {
    return { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0 };
}
const MatrixHelper = {
    defaultMatrix: get(),
    tempMatrix: {},
    set(t, a = 1, b = 0, c = 0, d = 1, e = 0, f = 0) {
        t.a = a;
        t.b = b;
        t.c = c;
        t.d = d;
        t.e = e;
        t.f = f;
    },
    get,
    copy(t, matrix) {
        t.a = matrix.a;
        t.b = matrix.b;
        t.c = matrix.c;
        t.d = matrix.d;
        t.e = matrix.e;
        t.f = matrix.f;
    },
    translate(t, x, y) {
        t.e += x;
        t.f += y;
    },
    translateInner(t, x, y) {
        t.e += t.a * x + t.c * y;
        t.f += t.b * x + t.d * y;
    },
    scale(t, x, y = x) {
        t.a *= x;
        t.b *= x;
        t.c *= y;
        t.d *= y;
    },
    scaleOfOuter(t, origin, x, y = x) {
        M$5.toInnerPoint(t, origin, tempPoint$1);
        M$5.scaleOfInner(t, tempPoint$1, x, y);
    },
    scaleOfInner(t, origin, x, y = x) {
        M$5.translateInner(t, origin.x, origin.y);
        M$5.scale(t, x, y);
        M$5.translateInner(t, -origin.x, -origin.y);
    },
    rotate(t, angle) {
        angle *= OneRadian;
        const cosR = cos$4(angle);
        const sinR = sin$4(angle);
        const { a, b, c, d } = t;
        t.a = (a * cosR) - (b * sinR);
        t.b = (a * sinR) + (b * cosR);
        t.c = (c * cosR) - (d * sinR);
        t.d = (c * sinR) + (d * cosR);
    },
    rotateOfOuter(t, origin, angle) {
        M$5.toInnerPoint(t, origin, tempPoint$1);
        M$5.rotateOfInner(t, tempPoint$1, angle);
    },
    rotateOfInner(t, origin, angle) {
        M$5.translateInner(t, origin.x, origin.y);
        M$5.rotate(t, angle);
        M$5.translateInner(t, -origin.x, -origin.y);
    },
    skew(t, x, y) {
        const { a, b, c, d } = t;
        if (y) {
            y *= OneRadian;
            t.a = a + c * y;
            t.b = b + d * y;
        }
        if (x) {
            x *= OneRadian;
            t.c = c + a * x;
            t.d = d + b * x;
        }
    },
    skewOfOuter(t, origin, x, y) {
        M$5.toInnerPoint(t, origin, tempPoint$1);
        M$5.skewOfInner(t, tempPoint$1, x, y);
    },
    skewOfInner(t, origin, x, y) {
        M$5.translateInner(t, origin.x, origin.y);
        M$5.skew(t, x, y);
        M$5.translateInner(t, -origin.x, -origin.y);
    },
    multiply(t, matrix) {
        const { a, b, c, d, e, f } = t;
        t.a = matrix.a * a + matrix.b * c;
        t.b = matrix.a * b + matrix.b * d;
        t.c = matrix.c * a + matrix.d * c;
        t.d = matrix.c * b + matrix.d * d;
        t.e = matrix.e * a + matrix.f * c + e;
        t.f = matrix.e * b + matrix.f * d + f;
    },
    preMultiply(t, matrix) {
        const { a, b, c, d, e, f } = t;
        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
            t.a = (a * matrix.a) + (b * matrix.c);
            t.b = (a * matrix.b) + (b * matrix.d);
            t.c = (c * matrix.a) + (d * matrix.c);
            t.d = (c * matrix.b) + (d * matrix.d);
        }
        t.e = (e * matrix.a) + (f * matrix.c) + matrix.e;
        t.f = (e * matrix.b) + (f * matrix.d) + matrix.f;
    },
    divide(t, matrix) {
        M$5.preMultiply(t, M$5.tempInvert(matrix));
    },
    tempInvert(t) {
        const { tempMatrix: temp } = M$5;
        M$5.copy(temp, t);
        M$5.invert(temp);
        return temp;
    },
    invert(t) {
        const { a, b, c, d, e, f } = t;
        const s = 1 / (a * d - b * c);
        t.a = d * s;
        t.b = -b * s;
        t.c = -c * s;
        t.d = a * s;
        t.e = -(e * d - f * c) * s;
        t.f = -(f * a - e * b) * s;
    },
    toOuterPoint(t, inner, to, distance) {
        const { x, y } = inner;
        to || (to = inner);
        to.x = (x * t.a) + (y * t.c);
        to.y = (x * t.b) + (y * t.d);
        if (!distance) {
            to.x += t.e;
            to.y += t.f;
        }
    },
    toInnerPoint(t, outer, to, distance) {
        const { x, y } = outer;
        const { a, b, c, d } = t;
        const s = 1 / (a * d - b * c);
        to || (to = outer);
        to.x = (x * d - y * c) * s;
        to.y = (y * a - x * b) * s;
        if (!distance) {
            const { e, f } = t;
            to.x -= (e * d - f * c) * s;
            to.y -= (f * a - e * b) * s;
        }
    },
    decompose(t) {
        const { a, b, c, d } = t;
        let scaleX = a, scaleY = d, rotation = 0, skewX = 0, skewY = 0;
        if (b || c) {
            const s = a * d - b * c;
            const k = a * c + b * d;
            if (b) {
                const ab = a * a + b * b;
                scaleX = sqrt$3(ab);
                scaleY = s / scaleX;
                const r = a / scaleX;
                rotation = b > 0 ? acos(r) : -acos(r);
                skewX = atan(k / ab) / OneRadian;
            }
            else {
                const cd = c * c + d * d;
                scaleY = sqrt$3(cd);
                scaleX = s / scaleY;
                const r = c / scaleY;
                rotation = PI$1 / 2 - (d > 0 ? acos(-r) : -acos(r));
                skewY = atan(k / cd) / OneRadian;
            }
            rotation /= OneRadian;
        }
        return { x: t.e, y: t.f, scaleX, scaleY, rotation, skewX, skewY };
    },
    reset(t) {
        M$5.set(t);
    }
};
const M$5 = MatrixHelper;

const { toInnerPoint: toInnerPoint$2, toOuterPoint: toOuterPoint$2 } = MatrixHelper;
const { sin: sin$3, cos: cos$3, abs: abs$1, sqrt: sqrt$2, atan2: atan2$2 } = Math;
const PointHelper = {
    defaultPoint: { x: 0, y: 0 },
    tempPoint: {},
    tempRadiusPoint: {},
    set(t, x = 0, y = 0) {
        t.x = x;
        t.y = y;
    },
    setRadius(t, x, y) {
        t.radiusX = x;
        t.radiusY = y === undefined ? x : y;
    },
    copy(t, point) {
        t.x = point.x;
        t.y = point.y;
    },
    move(t, x, y) {
        t.x += x;
        t.y += y;
    },
    rotate(t, rotation, center) {
        if (!center)
            center = P$5.defaultPoint;
        const cosR = cos$3(rotation * OneRadian);
        const sinR = sin$3(rotation * OneRadian);
        const rx = t.x - center.x;
        const ry = t.y - center.y;
        t.x = center.x + rx * cosR - ry * sinR;
        t.y = center.y + rx * sinR + ry * cosR;
    },
    tempToInnerOf(t, matrix) {
        const { tempPoint: temp } = P$5;
        P$5.copy(temp, t);
        toInnerPoint$2(matrix, temp, temp);
        return temp;
    },
    tempToOuterOf(t, matrix) {
        const { tempPoint: temp } = P$5;
        P$5.copy(temp, t);
        toOuterPoint$2(matrix, temp, temp);
        return temp;
    },
    tempToInnerRadiusPointOf(t, matrix) {
        const { tempRadiusPoint: temp } = P$5;
        P$5.copy(temp, t);
        P$5.toInnerRadiusPointOf(t, matrix, temp);
        return temp;
    },
    toInnerRadiusPointOf(t, matrix, to) {
        to || (to = t);
        toInnerPoint$2(matrix, t, to);
        to.radiusX = Math.abs(t.radiusX / matrix.scaleX);
        to.radiusY = Math.abs(t.radiusY / matrix.scaleY);
    },
    toInnerOf(t, matrix, to) {
        toInnerPoint$2(matrix, t, to);
    },
    toOuterOf(t, matrix, to) {
        toOuterPoint$2(matrix, t, to);
    },
    getCenter(t, to) {
        return { x: t.x + (to.x - t.x) / 2, y: t.y + (to.y - t.y) / 2 };
    },
    getDistance(t, point) {
        const x = abs$1(point.x - t.x);
        const y = abs$1(point.y - t.y);
        return sqrt$2(x * x + y * y);
    },
    getAngle(t, to) {
        return P$5.getAtan2(t, to) / OneRadian;
    },
    getChangeAngle(t, orign, to, toOrigin) {
        if (!toOrigin)
            toOrigin = orign;
        let fromAngle = P$5.getAngle(t, orign);
        let toAngle = P$5.getAngle(to, toOrigin);
        const angle = toAngle - fromAngle;
        return angle < -180 ? angle + 360 : angle;
    },
    getAtan2(t, to) {
        return atan2$2(to.y - t.y, to.x - t.x);
    },
    getDistancePoint(t, to, distance) {
        const r = P$5.getAtan2(t, to);
        return { x: t.x + cos$3(r) * distance, y: t.y + sin$3(r) * distance };
    },
    reset(t) {
        P$5.reset(t);
    }
};
const P$5 = PointHelper;

class Point {
    constructor(x, y) {
        typeof x === 'object' ? PointHelper.copy(this, x) : PointHelper.set(this, x, y);
    }
    set(x, y) {
        PointHelper.set(this, x, y);
    }
    copy(point) {
        PointHelper.copy(this, point);
        return this;
    }
    clone() {
        return new Point(this);
    }
    rotate(angle, center) {
        PointHelper.rotate(this, angle, center);
        return this;
    }
    toInnerOf(matrix, to) {
        PointHelper.toInnerOf(this, matrix, to);
        return this;
    }
    toOuterOf(matrix, to) {
        PointHelper.toOuterOf(this, matrix, to);
        return this;
    }
    getCenter(to) {
        return PointHelper.getCenter(this, to);
    }
    getDistance(to) {
        return PointHelper.getDistance(this, to);
    }
    getAngle(to) {
        return PointHelper.getAngle(this, to);
    }
    getAtan2(to) {
        return PointHelper.getAtan2(this, to);
    }
    reset() {
        PointHelper.reset(this);
    }
}

class Matrix {
    constructor(a, b, c, d, e, f) {
        typeof a === 'object' ? MatrixHelper.copy(this, a) : MatrixHelper.set(this, a, b, c, d, e, f);
    }
    set(a, b, c, d, e, f) {
        MatrixHelper.set(this, a, b, c, d, e, f);
    }
    copy(matrix) {
        MatrixHelper.copy(this, matrix);
        return this;
    }
    clone() {
        return new Matrix(this);
    }
    translate(x, y) {
        MatrixHelper.translate(this, x, y);
        return this;
    }
    translateInner(x, y) {
        MatrixHelper.translateInner(this, x, y);
        return this;
    }
    scale(x, y) {
        MatrixHelper.scale(this, x, y);
        return this;
    }
    scaleOfOuter(origin, x, y) {
        MatrixHelper.scaleOfOuter(this, origin, x, y);
        return this;
    }
    scaleOfInner(origin, x, y) {
        MatrixHelper.scaleOfInner(this, origin, x, y);
        return this;
    }
    rotate(angle) {
        MatrixHelper.rotate(this, angle);
        return this;
    }
    rotateOfOuter(origin, angle) {
        MatrixHelper.rotateOfOuter(this, origin, angle);
        return this;
    }
    rotateOfInner(origin, angle) {
        MatrixHelper.rotateOfInner(this, origin, angle);
        return this;
    }
    skew(x, y) {
        MatrixHelper.skew(this, x, y);
        return this;
    }
    skewOfOuter(origin, x, y) {
        MatrixHelper.skewOfOuter(this, origin, x, y);
        return this;
    }
    skewOfInner(origin, x, y) {
        MatrixHelper.skewOfInner(this, origin, x, y);
        return this;
    }
    multiply(matrix) {
        MatrixHelper.multiply(this, matrix);
        return this;
    }
    preMultiply(matrix) {
        MatrixHelper.preMultiply(this, matrix);
        return this;
    }
    divide(matrix) {
        MatrixHelper.divide(this, matrix);
        return this;
    }
    invert() {
        MatrixHelper.invert(this);
        return this;
    }
    toOuterPoint(inner, to, distance) {
        MatrixHelper.toOuterPoint(this, inner, to, distance);
    }
    toInnerPoint(outer, to, distance) {
        MatrixHelper.toInnerPoint(this, outer, to, distance);
    }
    decompose() {
        return MatrixHelper.decompose(this);
    }
    reset() {
        MatrixHelper.reset(this);
    }
}

const TwoPointBoundsHelper = {
    tempPointBounds: {},
    setPoint(t, minX, minY) {
        t.minX = t.maxX = minX;
        t.minY = t.maxY = minY;
    },
    addPoint(t, x, y) {
        t.minX = x < t.minX ? x : t.minX;
        t.minY = y < t.minY ? y : t.minY;
        t.maxX = x > t.maxX ? x : t.maxX;
        t.maxY = y > t.maxY ? y : t.maxY;
    },
    addBounds(t, x, y, width, height) {
        addPoint$3(t, x, y);
        addPoint$3(t, x + width, y + height);
    },
    copy(t, pb) {
        t.minX = pb.minX;
        t.minY = pb.minY;
        t.maxX = pb.maxX;
        t.maxY = pb.maxY;
    },
    add(t, pb) {
        t.minX = pb.minX < t.minX ? pb.minX : t.minX;
        t.minY = pb.minY < t.minY ? pb.minY : t.minY;
        t.maxX = pb.maxX > t.maxX ? pb.maxX : t.maxX;
        t.maxY = pb.maxY > t.maxY ? pb.maxY : t.maxY;
    },
    toBounds(t, setBounds) {
        setBounds.x = t.minX;
        setBounds.y = t.minY;
        setBounds.width = t.maxX - t.minX;
        setBounds.height = t.maxY - t.minY;
    }
};
const { addPoint: addPoint$3 } = TwoPointBoundsHelper;

const { tempPointBounds: tempPointBounds$1, setPoint: setPoint$2, addPoint: addPoint$2, toBounds: toBounds$1 } = TwoPointBoundsHelper;
const { toOuterPoint: toOuterPoint$1 } = MatrixHelper;
let right, bottom, boundsRight, boundsBottom;
const point = {};
const toPoint = {};
const BoundsHelper = {
    tempBounds: {},
    set(t, x = 0, y = 0, width = 0, height = 0) {
        t.x = x;
        t.y = y;
        t.width = width;
        t.height = height;
    },
    copy(t, bounds) {
        t.x = bounds.x;
        t.y = bounds.y;
        t.width = bounds.width;
        t.height = bounds.height;
    },
    copyAndSpread(t, bounds, spreadX, spreadY) {
        if (!spreadY)
            spreadY = spreadX;
        B.set(t, bounds.x - spreadX, bounds.y - spreadY, bounds.width + spreadX * 2, bounds.height + spreadY * 2);
    },
    right(t) {
        return t.x + t.width;
    },
    bottom(t) {
        return t.y + t.height;
    },
    move(t, x, y) {
        t.x += x;
        t.y += y;
    },
    getByMove(t, x, y) {
        t = Object.assign({}, t);
        B.move(t, x, y);
        return t;
    },
    toOffsetOutBounds(t, to, parent) {
        if (!to) {
            to = t;
        }
        else {
            copy$4(to, t);
        }
        if (parent) {
            to.offsetX = -(B.right(parent) - t.x);
            to.offsetY = -(B.bottom(parent) - t.y);
        }
        else {
            to.offsetX = t.x + t.width;
            to.offsetY = t.y + t.height;
        }
        B.move(to, -to.offsetX, -to.offsetY);
    },
    scale(t, scaleX, scaleY) {
        if (!scaleY)
            scaleY = scaleX;
        if (t.x)
            t.x *= scaleX;
        if (t.y)
            t.y *= scaleY;
        t.width *= scaleX;
        t.height *= scaleY;
    },
    tempToOuterOf(t, matrix) {
        B.copy(B.tempBounds, t);
        B.toOuterOf(B.tempBounds, matrix);
        return B.tempBounds;
    },
    getOuterOf(t, matrix) {
        t = Object.assign({}, t);
        B.toOuterOf(t, matrix);
        return t;
    },
    toOuterOf(t, matrix, to) {
        to || (to = t);
        if (matrix.b === 0 && matrix.c === 0) {
            const { a, d } = matrix;
            if (a > 0) {
                to.width = t.width * a;
                to.x = matrix.e + t.x * a;
            }
            else {
                to.width = t.width * -a;
                to.x = matrix.e + t.x * a - to.width;
            }
            if (d > 0) {
                to.height = t.height * d;
                to.y = matrix.f + t.y * d;
            }
            else {
                to.height = t.height * -d;
                to.y = matrix.f + t.y * d - to.height;
            }
        }
        else {
            point.x = t.x;
            point.y = t.y;
            toOuterPoint$1(matrix, point, toPoint);
            setPoint$2(tempPointBounds$1, toPoint.x, toPoint.y);
            point.x = t.x + t.width;
            toOuterPoint$1(matrix, point, toPoint);
            addPoint$2(tempPointBounds$1, toPoint.x, toPoint.y);
            point.y = t.y + t.height;
            toOuterPoint$1(matrix, point, toPoint);
            addPoint$2(tempPointBounds$1, toPoint.x, toPoint.y);
            point.x = t.x;
            toOuterPoint$1(matrix, point, toPoint);
            addPoint$2(tempPointBounds$1, toPoint.x, toPoint.y);
            toBounds$1(tempPointBounds$1, to);
        }
    },
    getFitMatrix(t, put) {
        const scale = Math.min(1, Math.min(t.width / put.width, t.height / put.height));
        return new Matrix(scale, 0, 0, scale, -Math.ceil(put.x * scale), -Math.ceil(put.y * scale));
    },
    getSpread(t, spreadX, spreadY) {
        const n = {};
        B.copyAndSpread(n, t, spreadX, spreadY);
        return n;
    },
    spread(t, spreadX, spreadY) {
        B.copyAndSpread(t, t, spreadX, spreadY);
    },
    ceil(t) {
        t.x = Math.floor(t.x);
        t.y = Math.floor(t.y);
        t.width = Math.ceil(t.width);
        t.height = Math.ceil(t.height);
    },
    unsign(t) {
        if (t.width < 0) {
            t.x += t.width;
            t.width = -t.width;
        }
        if (t.height < 0) {
            t.y += t.height;
            t.height = -t.height;
        }
    },
    add(t, bounds) {
        right = t.x + t.width;
        bottom = t.y + t.height;
        boundsRight = bounds.x + bounds.width;
        boundsBottom = bounds.y + bounds.height;
        right = right > boundsRight ? right : boundsRight;
        bottom = bottom > boundsBottom ? bottom : boundsBottom;
        t.x = t.x < bounds.x ? t.x : bounds.x;
        t.y = t.y < bounds.y ? t.y : bounds.y;
        t.width = right - t.x;
        t.height = bottom - t.y;
    },
    addList(t, list) {
        B.setByListWithHandle(t, list, undefined, true);
    },
    setByList(t, list, addMode = false) {
        B.setByListWithHandle(t, list, undefined, addMode);
    },
    addListWithHandle(t, list, boundsDataHandle) {
        B.setByListWithHandle(t, list, boundsDataHandle, true);
    },
    setByListWithHandle(t, list, boundsDataHandle, addMode = false) {
        let bounds, first = true;
        for (let i = 0, len = list.length; i < len; i++) {
            bounds = boundsDataHandle ? boundsDataHandle(list[i]) : list[i];
            if (bounds && (bounds.width || bounds.height)) {
                if (first) {
                    first = false;
                    if (!addMode)
                        copy$4(t, bounds);
                }
                else {
                    add$1(t, bounds);
                }
            }
        }
        if (first)
            B.reset(t);
    },
    setByPoints(t, points) {
        points.forEach((point, index) => {
            index === 0 ? setPoint$2(tempPointBounds$1, point.x, point.y) : addPoint$2(tempPointBounds$1, point.x, point.y);
        });
        toBounds$1(tempPointBounds$1, t);
    },
    hitRadiusPoint(t, point, pointMatrix) {
        if (pointMatrix)
            point = PointHelper.tempToInnerRadiusPointOf(point, pointMatrix);
        return (point.x >= t.x - point.radiusX && point.x <= t.x + t.width + point.radiusX) && (point.y >= t.y - point.radiusY && point.y <= t.y + t.height + point.radiusY);
    },
    hitPoint(t, point, pointMatrix) {
        if (pointMatrix)
            point = PointHelper.tempToInnerOf(point, pointMatrix);
        return (point.x >= t.x && point.x <= t.x + t.width) && (point.y >= t.y && point.y <= t.y + t.height);
    },
    hit(t, other, otherMatrix) {
        if (otherMatrix)
            other = B.tempToOuterOf(other, otherMatrix);
        return !((t.y + t.height < other.y) || (other.y + other.height < t.y) || (t.x + t.width < other.x) || (other.x + other.width < t.x));
    },
    includes(t, other, otherMatrix) {
        if (otherMatrix)
            other = B.tempToOuterOf(other, otherMatrix);
        return (t.x <= other.x) && (t.y <= other.y) && (t.x + t.width >= other.x + other.width) && (t.y + t.height >= other.y + other.height);
    },
    getIntersectData(t, other, otherMatrix) {
        if (otherMatrix)
            other = B.tempToOuterOf(other, otherMatrix);
        let { x, y, width, height } = other;
        right = x + width;
        bottom = y + height;
        boundsRight = t.x + t.width;
        boundsBottom = t.y + t.height;
        x = x > t.x ? x : t.x;
        y = y > t.y ? y : t.y;
        right = right < boundsRight ? right : boundsRight;
        bottom = bottom < boundsBottom ? bottom : boundsBottom;
        width = right - x;
        height = bottom - y;
        return { x, y, width, height };
    },
    intersect(t, other, otherMatrix) {
        B.copy(t, B.getIntersectData(t, other, otherMatrix));
    },
    isSame(t, bounds) {
        return t.x === bounds.x && t.y === bounds.y && t.width === bounds.width && t.height === bounds.height;
    },
    isEmpty(t) {
        return t.x === 0 && t.y === 0 && t.width === 0 && t.height === 0;
    },
    reset(t) {
        B.set(t);
    }
};
const B = BoundsHelper;
const { add: add$1, copy: copy$4 } = B;

class Bounds {
    constructor(x, y, width, height) {
        typeof x === 'object' ? BoundsHelper.copy(this, x) : BoundsHelper.set(this, x, y, width, height);
    }
    set(x, y, width, height) {
        BoundsHelper.set(this, x, y, width, height);
    }
    copy(bounds) {
        BoundsHelper.copy(this, bounds);
        return this;
    }
    clone() {
        return new Bounds(this);
    }
    scale(scaleX, scaleY) {
        BoundsHelper.scale(this, scaleX, scaleY);
        return this;
    }
    toOuterOf(matrix, to) {
        BoundsHelper.toOuterOf(this, matrix, to);
        return this;
    }
    getFitMatrix(put) {
        return BoundsHelper.getFitMatrix(this, put);
    }
    spread(size) {
        BoundsHelper.spread(this, size);
        return this;
    }
    ceil() {
        BoundsHelper.ceil(this);
        return this;
    }
    unsign() {
        BoundsHelper.unsign(this);
        return this;
    }
    add(bounds) {
        BoundsHelper.add(this, bounds);
        return this;
    }
    addList(boundsList) {
        BoundsHelper.setByList(this, boundsList, true);
        return this;
    }
    setByList(boundsList, addMode) {
        BoundsHelper.setByList(this, boundsList, addMode);
        return this;
    }
    addListWithHandle(list, boundsDataHandle) {
        BoundsHelper.setByListWithHandle(this, list, boundsDataHandle, true);
        return this;
    }
    setByListWithHandle(list, boundsDataHandle, addMode) {
        BoundsHelper.setByListWithHandle(this, list, boundsDataHandle, addMode);
        return this;
    }
    setByPoints(points) {
        BoundsHelper.setByPoints(this, points);
        return this;
    }
    hitPoint(point, pointMatrix) {
        return BoundsHelper.hitPoint(this, point, pointMatrix);
    }
    hitRadiusPoint(point, pointMatrix) {
        return BoundsHelper.hitRadiusPoint(this, point, pointMatrix);
    }
    hit(bounds, boundsMatrix) {
        return BoundsHelper.hit(this, bounds, boundsMatrix);
    }
    includes(bounds, boundsMatrix) {
        return BoundsHelper.includes(this, bounds, boundsMatrix);
    }
    intersect(bounds, boundsMatrix) {
        BoundsHelper.intersect(this, bounds, boundsMatrix);
        return this;
    }
    getIntersect(bounds, boundsMatrix) {
        return new Bounds(BoundsHelper.getIntersectData(this, bounds, boundsMatrix));
    }
    isSame(bounds) {
        return BoundsHelper.isSame(this, bounds);
    }
    isEmpty() {
        return BoundsHelper.isEmpty(this);
    }
    reset() {
        BoundsHelper.reset(this);
    }
}

class AutoBounds {
    constructor(top, right, bottom, left, width, height) {
        typeof top === 'object' ? this.copy(top) : this.set(top, right, bottom, left, width, height);
    }
    set(top = 0, right = 0, bottom = 0, left = 0, width = 0, height = 0) {
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
        this.width = width;
        this.height = height;
    }
    copy(autoSize) {
        const { top, right, bottom, left, width, height } = autoSize;
        this.set(top, right, bottom, left, width, height);
    }
    getBoundsFrom(parent) {
        const { top, right, bottom, left, width, height } = this;
        return new Bounds(left, top, width ? width : parent.width - left - right, height ? height : parent.height - top - bottom);
    }
}

class TwoPointBounds {
    constructor(x, y) {
        TwoPointBoundsHelper.setPoint(this, x, y);
    }
    addPoint(x, y) {
        TwoPointBoundsHelper.addPoint(this, x, y);
    }
    addBounds(x, y, width, height) {
        TwoPointBoundsHelper.addBounds(this, x, y, width, height);
    }
    add(pb) {
        TwoPointBoundsHelper.add(this, pb);
    }
}

const StringNumberMap = {
    '0': 1,
    '1': 1,
    '2': 1,
    '3': 1,
    '4': 1,
    '5': 1,
    '6': 1,
    '7': 1,
    '8': 1,
    '9': 1,
    '.': 1,
    'e': 1,
    'E': 1
};

class Debug {
    constructor(name) {
        this.repeatMap = {};
        this.name = name;
    }
    static get(name) {
        return new Debug(name);
    }
    static set filter(name) {
        if (!name)
            name = [];
        else if (typeof name === 'string')
            name = [name];
        this.filterList = name;
    }
    static set exclude(name) {
        if (!name)
            name = [];
        else if (typeof name === 'string')
            name = [name];
        this.excludeList = name;
    }
    log(...messages) {
        if (D$4.enable) {
            if (D$4.filterList.length && D$4.filterList.every(name => name !== this.name))
                return;
            if (D$4.excludeList.length && D$4.excludeList.some(name => name === this.name))
                return;
            console.log('%c' + this.name, 'color:#21ae62', ...messages);
        }
    }
    warn(...messages) {
        if (D$4.enable)
            console.warn(this.name, ...messages);
    }
    repeat(name, ...messages) {
        if (!this.repeatMap[name]) {
            this.warn('repeat:' + name, ...messages);
            this.repeatMap[name] = true;
        }
    }
    error(...messages) {
        try {
            throw new Error();
        }
        catch (e) {
            console.error(this.name, ...messages, e);
        }
    }
}
Debug.filterList = [];
Debug.excludeList = [];
const D$4 = Debug;

const debug$9 = Debug.get('RunTime');
class Run {
    static start(name, microsecond) {
        const id = IncrementId.create(IncrementId.RUNTIME);
        R.currentId = R.idMap[id] = microsecond ? performance.now() : Date.now();
        R.currentName = R.nameMap[id] = name;
        R.nameToIdMap[name] = id;
        return id;
    }
    static end(id, microsecond) {
        const time = R.idMap[id];
        const name = R.nameMap[id];
        R.idMap[id] = R.nameMap[id] = R.nameToIdMap[name] = undefined;
        if (microsecond) {
            debug$9.log(name, performance.now() - time, 'µs');
        }
        else {
            debug$9.log(name, Date.now() - time, 'ms');
        }
    }
    static endOfName(name, microsecond) {
        const id = R.nameToIdMap[name];
        if (id !== undefined)
            R.end(id, microsecond);
    }
}
Run.idMap = {};
Run.nameMap = {};
Run.nameToIdMap = {};
const R = Run;

const debug$8 = Debug.get('UICreator');
const UICreator = {
    list: {},
    register(UI) {
        const { __tag: tag } = UI.prototype;
        if (list$1[tag]) {
            debug$8.repeat(tag);
        }
        else {
            list$1[tag] = UI;
        }
    },
    get(tag, data, x, y, width, height) {
        const ui = new list$1[tag](data);
        if (x !== undefined) {
            ui.x = x;
            if (y)
                ui.y = y;
            if (width)
                ui.width = width;
            if (height)
                ui.height = height;
        }
        return ui;
    }
};
const { list: list$1 } = UICreator;

const debug$7 = Debug.get('EventCreator');
const EventCreator = {
    nameList: {},
    register(Event) {
        let name;
        Object.keys(Event).forEach(key => {
            name = Event[key];
            if (typeof name === 'string')
                nameList[name] ? debug$7.repeat(name) : nameList[name] = Event;
        });
    },
    changeName(oldName, newName) {
        const Event = nameList[oldName];
        if (Event) {
            const constName = Object.keys(Event).find(key => Event[key] === oldName);
            if (constName) {
                Event[constName] = newName;
                nameList[newName] = Event;
            }
        }
    },
    has(type) {
        return !!this.nameList[type];
    },
    get(type, ...params) {
        return new nameList[type](...params);
    }
};
const { nameList } = EventCreator;

class CanvasManager {
    constructor() {
        this.list = [];
    }
    add(canvas) {
        canvas.manager = this;
        this.list.push(canvas);
    }
    get(size) {
        let old;
        const { list } = this;
        for (let i = 0, len = list.length; i < len; i++) {
            old = list[i];
            if (old.recycled && old.isSameSize(size)) {
                old.recycled = false;
                old.manager || (old.manager = this);
                return old;
            }
        }
        const canvas = Creator.canvas(size);
        this.add(canvas);
        return canvas;
    }
    recycle(old) {
        if (!old.recycled) {
            old.clear();
            old.recycled = true;
        }
    }
    clearRecycled() {
        let canvas;
        const filter = [];
        for (let i = 0, len = this.list.length; i < len; i++) {
            canvas = this.list[i];
            canvas.recycled ? canvas.destroy() : filter.push(canvas);
        }
        this.list = filter;
    }
    clear() {
        this.list.forEach(item => { item.destroy(); });
        this.list.length = 0;
    }
    destroy() {
        this.clear();
    }
}

class LeafList {
    get length() { return this.list.length; }
    constructor(item) {
        this.reset();
        if (item)
            item instanceof Array ? this.pushList(item) : this.push(item);
    }
    has(leaf) {
        return leaf && this.keys[leaf.innerId] !== undefined;
    }
    indexAt(index) {
        return this.list[index];
    }
    indexOf(leaf) {
        const index = this.keys[leaf.innerId];
        return index === undefined ? -1 : index;
    }
    pushList(list) {
        list.forEach(leaf => { this.push(leaf); });
    }
    unshift(leaf) {
        const { keys } = this;
        if (keys[leaf.innerId] === undefined) {
            this.list.unshift(leaf);
            Object.keys(keys).forEach(innerId => {
                if (keys[innerId] !== undefined)
                    keys[innerId]++;
            });
            keys[leaf.innerId] = 0;
        }
    }
    push(leaf) {
        const { list, keys } = this;
        if (keys[leaf.innerId] === undefined) {
            list.push(leaf);
            keys[leaf.innerId] = list.length - 1;
        }
    }
    sort(reverse) {
        const { list } = this;
        if (reverse) {
            list.sort((a, b) => b.__level - a.__level);
        }
        else {
            list.sort((a, b) => a.__level - b.__level);
        }
    }
    remove(leaf) {
        const { list } = this;
        let findIndex;
        for (let i = 0, len = list.length; i < len; i++) {
            if (findIndex !== undefined) {
                this.keys[list[i].innerId] = i - 1;
            }
            else if (list[i].innerId === leaf.innerId) {
                findIndex = i;
                delete this.keys[leaf.innerId];
            }
        }
        if (findIndex !== undefined)
            list.splice(findIndex, 1);
    }
    forEach(itemCallback) {
        this.list.forEach(itemCallback);
    }
    clone() {
        const list = new LeafList();
        this.list.forEach(item => { list.push(item); });
        return list;
    }
    reset() {
        this.list = [];
        this.keys = {};
    }
    destroy() {
        this.list = null;
    }
}

class LeafLevelList {
    get length() { return this._length; }
    constructor(item) {
        this._length = 0;
        this.reset();
        if (item)
            item instanceof Array ? this.pushList(item) : this.push(item);
    }
    has(leaf) {
        return this.keys[leaf.innerId] !== undefined;
    }
    without(leaf) {
        return this.keys[leaf.innerId] === undefined;
    }
    sort(reverse) {
        const { levels } = this;
        if (reverse) {
            levels.sort((a, b) => b - a);
        }
        else {
            levels.sort((a, b) => a - b);
        }
    }
    pushList(list) {
        list.forEach(leaf => { this.push(leaf); });
    }
    push(leaf) {
        const { keys, levelMap } = this;
        if (!keys[leaf.innerId]) {
            keys[leaf.innerId] = 1;
            if (!levelMap[leaf.__level]) {
                levelMap[leaf.__level] = [leaf];
                this.levels.push(leaf.__level);
            }
            else {
                levelMap[leaf.__level].push(leaf);
            }
            this._length++;
        }
    }
    forEach(itemCallback) {
        let list;
        this.levels.forEach(level => {
            list = this.levelMap[level];
            for (let i = 0, len = list.length; i < len; i++) {
                itemCallback(list[i]);
            }
        });
    }
    reset() {
        this.levelMap = {};
        this.keys = {};
        this.levels = [];
        this._length = 0;
    }
    destroy() {
        this.levelMap = null;
    }
}

class HitCanvasManager extends CanvasManager {
    constructor() {
        super(...arguments);
        this.pathTypeList = new LeafList();
        this.imageTypeList = new LeafList();
    }
    getImageType(leaf, size) {
        this.imageTypeList.push(leaf);
        return Creator.hitCanvas(size);
    }
    getPathType(leaf) {
        this.pathTypeList.push(leaf);
        return Creator.hitCanvas();
    }
    clearImageType() {
        this.__clearLeafList(this.imageTypeList);
    }
    clearPathType() {
        this.__clearLeafList(this.pathTypeList);
    }
    __clearLeafList(leafList) {
        if (leafList.length) {
            leafList.forEach(leaf => {
                if (leaf.__hitCanvas) {
                    leaf.__hitCanvas.destroy();
                    leaf.__hitCanvas = null;
                }
            });
            leafList.reset();
        }
    }
    clear() {
        this.clearPathType();
        this.clearImageType();
    }
}

const DataHelper = {
    default(t, defaultData) {
        assign(defaultData, t);
        assign(t, defaultData);
        return t;
    },
    assign(t, merge) {
        let value;
        Object.keys(merge).forEach(key => {
            var _a;
            value = merge[key];
            if ((value === null || value === void 0 ? void 0 : value.constructor) === Object) {
                (((_a = t[key]) === null || _a === void 0 ? void 0 : _a.constructor) === Object) ? assign(t[key], merge[key]) : t[key] = merge[key];
            }
            else {
                t[key] = merge[key];
            }
        });
    },
    copyAttrs(t, from, include) {
        include.forEach(key => {
            if (from[key] !== undefined)
                t[key] = from[key];
        });
        return t;
    },
    clone(data) {
        return JSON.parse(JSON.stringify(data));
    }
};
const { assign } = DataHelper;

class LeafData {
    constructor(leaf) {
        this.__leaf = leaf;
    }
    __get(name) {
        if (this.__input) {
            const value = this.__input[name];
            if (value !== undefined)
                return value;
        }
        return this[name];
    }
    __setInput(name, value) {
        this.__input || (this.__input = {});
        this.__input[name] = value;
    }
    __getInput(name) {
        if (this.__input) {
            const value = this.__input[name];
            if (value !== undefined)
                return value;
        }
        return this['_' + name];
    }
    __removeInput(name) {
        if (this.__input && this.__input[name] !== undefined)
            this.__input[name] = undefined;
    }
    __getInputData() {
        const data = { tag: this.__leaf.tag }, { __input } = this;
        let realKey, value;
        for (let key in this) {
            realKey = key.substring(1);
            if (this[realKey] !== undefined) {
                value = __input ? __input[realKey] : undefined;
                data[realKey] = value === undefined ? this[key] : value;
            }
        }
        return data;
    }
    __setMiddle(name, value) {
        this.__middle || (this.__middle = {});
        this.__middle[name] = value;
    }
    __getMiddle(name) {
        return this.__middle && this.__middle[name];
    }
    __checkSingle() {
        if (this.blendMode === 'pass-through') {
            if (this.__leaf.__hasEraser || this.isEraser) {
                this.__single = true;
            }
            else if (this.__single) {
                this.__single = false;
            }
        }
        else {
            this.__single = true;
        }
    }
    destroy() {
        this.__input = this.__middle = null;
    }
}

const FileHelper = {
    mineType(type) {
        if (!type || type.startsWith('image'))
            return type;
        if (type === 'jpg')
            type = 'jpeg';
        return 'image/' + type;
    },
    fileType(filename) {
        const l = filename.split('.');
        return l[l.length - 1];
    }
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function contextAttr(realName) {
    return (target, key) => {
        if (!realName)
            realName = key;
        const property = {
            get() { return this.context[realName]; },
            set(value) { this.context[realName] = value; }
        };
        Object.defineProperty(target, key, property);
    };
}
const contextMethodNameList = [];
function contextMethod() {
    return (_target, key) => {
        contextMethodNameList.push(key);
    };
}
const emptyArray = [];
class Canvas {
    set blendMode(value) {
        if (value === 'normal')
            value = 'source-over';
        this.context.globalCompositeOperation = value;
    }
    get blendMode() {
        return this.context.globalCompositeOperation;
    }
    set dashPattern(value) {
        this.context.setLineDash(value || emptyArray);
    }
    get dashPattern() {
        return this.context.getLineDash();
    }
    __bindContext() {
        let method;
        contextMethodNameList.forEach(name => {
            method = this.context[name];
            if (method)
                this[name] = method.bind(this.context);
        });
        this.textBaseline = "alphabetic";
    }
    setTransform(_a, _b, _c, _d, _e, _f) { }
    resetTransform() { }
    getTransform() { return void 0; }
    save() { }
    restore() { }
    transform(a, b, c, d, e, f) {
        if (typeof a === 'object') {
            this.context.transform(a.a, a.b, a.c, a.d, a.e, a.f);
        }
        else {
            this.context.transform(a, b, c, d, e, f);
        }
    }
    translate(_x, _y) { }
    scale(_x, _y) { }
    rotate(_angle) { }
    fill(_path2d, _rule) { }
    stroke(_path2d) { }
    clip(_path2d, _rule) { }
    fillRect(_x, _y, _width, _height) { }
    strokeRect(_x, _y, _width, _height) { }
    clearRect(_x, _y, _width, _height) { }
    drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh) {
        switch (arguments.length) {
            case 9:
                if (sx < 0) {
                    const d = (-sx / sw) * dw;
                    sw += sx;
                    sx = 0;
                    dx += d;
                    dw -= d;
                }
                if (sy < 0) {
                    const d = (-sy / sh) * dh;
                    sh += sy;
                    sy = 0;
                    dy += d;
                    dh -= d;
                }
                this.context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
                break;
            case 5:
                this.context.drawImage(image, sx, sy, sw, sh);
                break;
            case 3:
                this.context.drawImage(image, sx, sy);
        }
    }
    beginPath() { }
    moveTo(_x, _y) { }
    lineTo(_x, _y) { }
    bezierCurveTo(_cp1x, _cp1y, _cp2x, _cp2y, _x, _y) { }
    quadraticCurveTo(_cpx, _cpy, _x, _y) { }
    closePath() { }
    arc(_x, _y, _radius, _startAngle, _endAngle, _anticlockwise) { }
    arcTo(_x1, _y1, _x2, _y2, _radius) { }
    ellipse(_x, _y, _radiusX, _radiusY, _rotation, _startAngle, _endAngle, _anticlockwise) { }
    rect(_x, _y, _width, _height) { }
    roundRect(_x, _y, _width, _height, _radius) { }
    createConicGradient(_startAngle, _x, _y) { return void 0; }
    createLinearGradient(_x0, _y0, _x1, _y1) { return void 0; }
    createPattern(_image, _repetition) { return void 0; }
    createRadialGradient(_x0, _y0, _r0, _x1, _y1, _r1) { return void 0; }
    fillText(_text, _x, _y, _maxWidth) { }
    measureText(_text) { return void 0; }
    strokeText(_text, _x, _y, _maxWidth) { }
    destroy() {
        this.context = null;
    }
}
__decorate([
    contextAttr('imageSmoothingEnabled')
], Canvas.prototype, "smooth", void 0);
__decorate([
    contextAttr('imageSmoothingQuality')
], Canvas.prototype, "smoothLevel", void 0);
__decorate([
    contextAttr('globalAlpha')
], Canvas.prototype, "opacity", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "fillStyle", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "strokeStyle", void 0);
__decorate([
    contextAttr('lineWidth')
], Canvas.prototype, "strokeWidth", void 0);
__decorate([
    contextAttr('lineCap')
], Canvas.prototype, "strokeCap", void 0);
__decorate([
    contextAttr('lineJoin')
], Canvas.prototype, "strokeJoin", void 0);
__decorate([
    contextAttr('lineDashOffset')
], Canvas.prototype, "dashOffset", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "miterLimit", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "shadowBlur", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "shadowColor", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "shadowOffsetX", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "shadowOffsetY", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "filter", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "font", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "fontKerning", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "fontStretch", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "fontVariantCaps", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "textAlign", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "textBaseline", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "textRendering", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "wordSpacing", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "letterSpacing", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "direction", void 0);
__decorate([
    contextMethod()
], Canvas.prototype, "setTransform", null);
__decorate([
    contextMethod()
], Canvas.prototype, "resetTransform", null);
__decorate([
    contextMethod()
], Canvas.prototype, "getTransform", null);
__decorate([
    contextMethod()
], Canvas.prototype, "save", null);
__decorate([
    contextMethod()
], Canvas.prototype, "restore", null);
__decorate([
    contextMethod()
], Canvas.prototype, "translate", null);
__decorate([
    contextMethod()
], Canvas.prototype, "scale", null);
__decorate([
    contextMethod()
], Canvas.prototype, "rotate", null);
__decorate([
    contextMethod()
], Canvas.prototype, "fill", null);
__decorate([
    contextMethod()
], Canvas.prototype, "stroke", null);
__decorate([
    contextMethod()
], Canvas.prototype, "clip", null);
__decorate([
    contextMethod()
], Canvas.prototype, "fillRect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "strokeRect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "clearRect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "beginPath", null);
__decorate([
    contextMethod()
], Canvas.prototype, "moveTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "lineTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "bezierCurveTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "quadraticCurveTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "closePath", null);
__decorate([
    contextMethod()
], Canvas.prototype, "arc", null);
__decorate([
    contextMethod()
], Canvas.prototype, "arcTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "ellipse", null);
__decorate([
    contextMethod()
], Canvas.prototype, "rect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "roundRect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "createConicGradient", null);
__decorate([
    contextMethod()
], Canvas.prototype, "createLinearGradient", null);
__decorate([
    contextMethod()
], Canvas.prototype, "createPattern", null);
__decorate([
    contextMethod()
], Canvas.prototype, "createRadialGradient", null);
__decorate([
    contextMethod()
], Canvas.prototype, "fillText", null);
__decorate([
    contextMethod()
], Canvas.prototype, "measureText", null);
__decorate([
    contextMethod()
], Canvas.prototype, "strokeText", null);

const temp = new Bounds();
const minSize = { width: 1, height: 1, pixelRatio: 1 };
const debug$6 = Debug.get('LeaferCanvasBase');
const canvasSizeAttrs = ['width', 'height', 'pixelRatio'];
class LeaferCanvasBase extends Canvas {
    get pixelWidth() { return this.width * this.pixelRatio; }
    get pixelHeight() { return this.height * this.pixelRatio; }
    get allowBackgroundColor() { return this.view && this.parentView; }
    constructor(config, manager) {
        super();
        this.worldTransform = {};
        if (!config)
            config = minSize;
        if (!config.pixelRatio)
            config.pixelRatio = Platform.devicePixelRatio;
        this.manager = manager;
        this.innerId = IncrementId.create(IncrementId.CNAVAS);
        const { width, height, pixelRatio } = config;
        this.autoLayout = !width || !height;
        this.pixelRatio = pixelRatio;
        this.config = config;
        this.init();
    }
    init() { }
    __createContext() {
        this.context = this.view.getContext('2d');
        this.__bindContext();
    }
    toBlob(type, quality) {
        return new Promise((resolve) => {
            const canvas = this.getSaveCanvas(type);
            Platform.origin.canvasToBolb(canvas.view, type, quality).then((blob) => {
                canvas.recycle();
                resolve(blob);
            }).catch((e) => {
                debug$6.error(e);
                resolve(null);
            });
        });
    }
    toDataURL(type, quality) {
        const canvas = this.getSaveCanvas(type);
        const data = Platform.origin.canvasToDataURL(canvas.view, type, quality);
        canvas.recycle();
        return data;
    }
    saveAs(filename, quality) {
        return new Promise((resolve) => {
            const canvas = this.getSaveCanvas(FileHelper.fileType(filename));
            Platform.origin.canvasSaveAs(canvas.view, filename, quality).then(() => {
                canvas.recycle();
                resolve(true);
            }).catch((e) => {
                debug$6.error(e);
                resolve(false);
            });
        });
    }
    getSaveCanvas(type) {
        const { backgroundColor, bounds } = this;
        const canvas = this.getSameCanvas();
        if (['jpg', 'jpeg'].includes(type))
            canvas.fillWorld(bounds, '#FFFFFF');
        if (backgroundColor)
            canvas.fillWorld(bounds, backgroundColor);
        canvas.copyWorld(this);
        return canvas;
    }
    resize(size) {
        if (this.isSameSize(size))
            return;
        let takeCanvas;
        if (this.context && !this.unreal && this.width) {
            takeCanvas = this.getSameCanvas();
            takeCanvas.copyWorld(this);
        }
        DataHelper.copyAttrs(this, size, canvasSizeAttrs);
        this.bounds = new Bounds(0, 0, this.width, this.height);
        this.pixelRatio || (this.pixelRatio = 1);
        if (!this.unreal) {
            this.updateViewSize();
            this.smooth = this.config.smooth;
        }
        this.updateClientBounds();
        if (this.context && !this.unreal && takeCanvas) {
            this.clearWorld(takeCanvas.bounds);
            this.copyWorld(takeCanvas);
            takeCanvas.recycle();
        }
    }
    updateViewSize() { }
    updateClientBounds() { }
    startAutoLayout(_autoBounds, _listener) { }
    stopAutoLayout() { }
    setCursor(_cursor) { }
    setWorld(matrix, parentMatrix, onlyTranslate) {
        const { pixelRatio } = this;
        const w = this.worldTransform;
        if (parentMatrix) {
            if (onlyTranslate) {
                this.setTransform(w.a = matrix.a * pixelRatio, w.b = matrix.b * pixelRatio, w.c = matrix.c * pixelRatio, w.d = matrix.d * pixelRatio, w.e = (matrix.e + parentMatrix.e) * pixelRatio, w.f = (matrix.f + parentMatrix.f) * pixelRatio);
            }
            else {
                const { a, b, c, d, e, f } = parentMatrix;
                this.setTransform(w.a = ((matrix.a * a) + (matrix.b * c)) * pixelRatio, w.b = ((matrix.a * b) + (matrix.b * d)) * pixelRatio, w.c = ((matrix.c * a) + (matrix.d * c)) * pixelRatio, w.d = ((matrix.c * b) + (matrix.d * d)) * pixelRatio, w.e = (((matrix.e * a) + (matrix.f * c) + e)) * pixelRatio, w.f = (((matrix.e * b) + (matrix.f * d) + f)) * pixelRatio);
            }
        }
        else {
            this.setTransform(w.a = matrix.a * pixelRatio, w.b = matrix.b * pixelRatio, w.c = matrix.c * pixelRatio, w.d = matrix.d * pixelRatio, w.e = matrix.e * pixelRatio, w.f = matrix.f * pixelRatio);
        }
    }
    useWorldTransform(worldTransform) {
        if (worldTransform)
            this.worldTransform = worldTransform;
        const w = this.worldTransform;
        if (w)
            this.setTransform(w.a, w.b, w.c, w.d, w.e, w.f);
    }
    setStroke(color, strokeWidth, options) {
        if (strokeWidth)
            this.strokeWidth = strokeWidth;
        if (color)
            this.strokeStyle = color;
        if (options)
            this.setStrokeOptions(options);
    }
    setStrokeOptions(options) {
        this.strokeCap = options.strokeCap;
        this.strokeJoin = options.strokeJoin;
        this.dashPattern = options.dashPattern;
        this.dashOffset = options.dashOffset;
        this.miterLimit = options.miterLimit;
    }
    saveBlendMode(blendMode) {
        this.savedBlendMode = this.blendMode;
        this.blendMode = blendMode;
    }
    restoreBlendMode() {
        this.blendMode = this.savedBlendMode;
    }
    hitFill(point, fillRule) {
        return fillRule ? this.context.isPointInPath(point.x, point.y, fillRule) : this.context.isPointInPath(point.x, point.y);
    }
    hitStroke(point, strokeWidth) {
        this.strokeWidth = strokeWidth;
        return this.context.isPointInStroke(point.x, point.y);
    }
    setWorldShadow(x, y, blur, color) {
        const { pixelRatio } = this;
        this.shadowOffsetX = x * pixelRatio;
        this.shadowOffsetY = y * pixelRatio;
        this.shadowBlur = blur * pixelRatio;
        this.shadowColor = color || 'black';
    }
    setWorldBlur(blur) {
        const { pixelRatio } = this;
        this.filter = `blur(${blur * pixelRatio}px)`;
    }
    copyWorld(canvas, from, to, blendMode) {
        if (blendMode)
            this.blendMode = blendMode;
        if (from) {
            const { pixelRatio } = this;
            if (!to)
                to = from;
            this.drawImage(canvas.view, from.x * pixelRatio, from.y * pixelRatio, from.width * pixelRatio, from.height * pixelRatio, to.x * pixelRatio, to.y * pixelRatio, to.width * pixelRatio, to.height * pixelRatio);
        }
        else {
            this.drawImage(canvas.view, 0, 0);
        }
        if (blendMode)
            this.blendMode = 'source-over';
    }
    copyWorldToInner(canvas, fromWorld, toInnerBounds, blendMode) {
        if (blendMode)
            this.blendMode = blendMode;
        if (fromWorld.b || fromWorld.c) {
            this.save();
            this.resetTransform();
            this.copyWorld(canvas, fromWorld, BoundsHelper.tempToOuterOf(toInnerBounds, fromWorld));
            this.restore();
        }
        else {
            const { pixelRatio } = this;
            this.drawImage(canvas.view, fromWorld.x * pixelRatio, fromWorld.y * pixelRatio, fromWorld.width * pixelRatio, fromWorld.height * pixelRatio, toInnerBounds.x, toInnerBounds.y, toInnerBounds.width, toInnerBounds.height);
        }
        if (blendMode)
            this.blendMode = 'source-over';
    }
    copyWorldByReset(canvas, from, to, blendMode) {
        this.resetTransform();
        this.copyWorld(canvas, from, to, blendMode);
        this.useWorldTransform();
    }
    useMask(maskCanvas, fromBounds, toBounds) {
        this.copyWorld(maskCanvas, fromBounds, toBounds, 'destination-in');
    }
    useEraser(eraserCanvas, fromBounds, toBounds) {
        this.copyWorld(eraserCanvas, fromBounds, toBounds, 'destination-out');
    }
    fillWorld(bounds, color, blendMode) {
        if (blendMode)
            this.blendMode = blendMode;
        this.fillStyle = color;
        temp.copy(bounds).scale(this.pixelRatio);
        this.fillRect(temp.x, temp.y, temp.width, temp.height);
        if (blendMode)
            this.blendMode = 'source-over';
    }
    strokeWorld(bounds, color, blendMode) {
        if (blendMode)
            this.blendMode = blendMode;
        this.strokeStyle = color;
        temp.copy(bounds).scale(this.pixelRatio);
        this.strokeRect(temp.x, temp.y, temp.width, temp.height);
        if (blendMode)
            this.blendMode = 'source-over';
    }
    clearWorld(bounds, ceilPixel) {
        temp.copy(bounds).scale(this.pixelRatio);
        if (ceilPixel)
            temp.ceil();
        this.clearRect(temp.x, temp.y, temp.width, temp.height);
    }
    clipWorld(bounds, ceilPixel) {
        this.beginPath();
        temp.copy(bounds).scale(this.pixelRatio);
        if (ceilPixel)
            temp.ceil();
        this.rect(temp.x, temp.y, temp.width, temp.height);
        this.clip();
    }
    clear() {
        const { pixelRatio } = this;
        this.clearRect(0, 0, this.width * pixelRatio, this.height * pixelRatio);
    }
    isSameSize(size) {
        return this.width === size.width && this.height === size.height && this.pixelRatio === size.pixelRatio;
    }
    getSameCanvas(useSameWorldTransform) {
        const { width, height, pixelRatio } = this;
        const options = { width, height, pixelRatio };
        const canvas = this.manager ? this.manager.get(options) : Creator.canvas(options);
        canvas.save();
        if (useSameWorldTransform)
            canvas.useWorldTransform(Object.assign({}, this.worldTransform));
        return canvas;
    }
    getBiggerCanvas(addWidth, addHeight) {
        let { width, height, pixelRatio } = this;
        if (addWidth)
            width += addWidth;
        if (addHeight)
            height += addHeight;
        const options = { width, height, pixelRatio };
        const canvas = this.manager ? this.manager.get(options) : Creator.canvas(options);
        canvas.save();
        return canvas;
    }
    recycle() {
        if (!this.recycled) {
            this.restore();
            this.manager ? this.manager.recycle(this) : this.destroy();
        }
    }
    updateRender() { }
    unrealCanvas() { }
    destroy() {
        this.manager = this.view = this.parentView = null;
    }
}

const PathHelper = {
    creator: {},
    parse(_pathString, _curveMode) { return undefined; },
    convertToCanvasData(_old, _curveMode) { return undefined; }
};

const CanvasCommandOnlyMap = {
    N: 21,
    D: 22,
    X: 23,
    G: 24,
    F: 25,
    O: 26,
    P: 27,
    U: 28
};
const PathCommandMap = Object.assign({ M: 1, m: 10, L: 2, l: 20, H: 3, h: 30, V: 4, v: 40, C: 5, c: 50, S: 6, s: 60, Q: 7, q: 70, T: 8, t: 80, A: 9, a: 90, Z: 11, z: 11, R: 12 }, CanvasCommandOnlyMap);
const PathCommandLengthMap = {
    M: 3,
    m: 3,
    L: 3,
    l: 3,
    H: 2,
    h: 2,
    V: 2,
    v: 2,
    C: 7,
    c: 7,
    S: 5,
    s: 5,
    Q: 5,
    q: 5,
    T: 3,
    t: 3,
    A: 8,
    a: 8,
    Z: 1,
    z: 1,
    N: 5,
    D: 9,
    X: 6,
    G: 9,
    F: 5,
    O: 7,
    P: 4,
    U: 6
};
const NeedConvertToCanvasCommandMap = {
    m: 10,
    l: 20,
    H: 3,
    h: 30,
    V: 4,
    v: 40,
    c: 50,
    S: 6,
    s: 60,
    q: 70,
    T: 8,
    t: 80,
    A: 9,
    a: 90,
};
const NeedConvertToCurveCommandMap = Object.assign(Object.assign({}, NeedConvertToCanvasCommandMap), CanvasCommandOnlyMap);
const P$4 = PathCommandMap;
const PathNumberCommandMap = {};
for (let key in P$4) {
    PathNumberCommandMap[P$4[key]] = key;
}
const PathNumberCommandLengthMap = {};
for (let key in P$4) {
    PathNumberCommandLengthMap[P$4[key]] = PathCommandLengthMap[key];
}

const RectHelper = {
    drawRoundRect(drawer, x, y, width, height, cornerRadius) {
        let [topLeft, topRight, bottomRight, bottomLeft] = MathHelper.fourNumber(cornerRadius);
        const max = Math.min(width / 2, height / 2);
        if (topLeft > max)
            topLeft = max;
        if (topRight > max)
            topRight = max;
        if (bottomRight > max)
            bottomRight = max;
        if (bottomLeft > max)
            bottomLeft = max;
        topLeft ? drawer.moveTo(x + topLeft, y) : drawer.moveTo(x, y);
        topRight ? drawer.arcTo(x + width, y, x + width, y + height, topRight) : drawer.lineTo(x + width, y);
        bottomRight ? drawer.arcTo(x + width, y + height, x, y + height, bottomRight) : drawer.lineTo(x + width, y + height);
        bottomLeft ? drawer.arcTo(x, y + height, x, y, bottomLeft) : drawer.lineTo(x, y + height);
        topLeft ? drawer.arcTo(x, y, x + width, y, topLeft) : drawer.lineTo(x, y);
    }
};

const { sin: sin$2, cos: cos$2, atan2: atan2$1, ceil, abs, PI, sqrt: sqrt$1, pow } = Math;
const { setPoint: setPoint$1, addPoint: addPoint$1 } = TwoPointBoundsHelper;
const { set } = PointHelper;
const { M: M$4, L: L$5, C: C$4, Q: Q$4, Z: Z$4 } = PathCommandMap;
const tempPoint = {};
const BezierHelper = {
    points(data, points, curve, close) {
        data.push(M$4, points[0], points[1]);
        if (curve && points.length > 5) {
            let aX, aY, bX, bY, cX, cY, c1X, c1Y, c2X, c2Y;
            let ba, cb, d, len = points.length;
            const t = curve === true ? 0.5 : curve;
            if (close) {
                points = [points[len - 2], points[len - 1], ...points, points[0], points[1], points[2], points[3]];
                len = points.length;
            }
            for (let i = 2; i < len - 2; i += 2) {
                aX = points[i - 2];
                aY = points[i - 1];
                bX = points[i];
                bY = points[i + 1];
                cX = points[i + 2];
                cY = points[i + 3];
                ba = sqrt$1(pow(bX - aX, 2) + pow(bY - aY, 2));
                cb = sqrt$1(pow(cX - bX, 2) + pow(cY - bY, 2));
                d = ba + cb;
                ba = (t * ba) / d;
                cb = (t * cb) / d;
                cX -= aX;
                cY -= aY;
                c1X = bX - ba * cX;
                c1Y = bY - ba * cY;
                if (i === 2) {
                    if (!close)
                        data.push(Q$4, c1X, c1Y, bX, bY);
                }
                else {
                    data.push(C$4, c2X, c2Y, c1X, c1Y, bX, bY);
                }
                c2X = bX + cb * cX;
                c2Y = bY + cb * cY;
            }
            if (!close)
                data.push(Q$4, c2X, c2Y, points[len - 2], points[len - 1]);
        }
        else {
            for (let i = 2, len = points.length; i < len; i += 2) {
                data.push(L$5, points[i], points[i + 1]);
            }
        }
        if (close)
            data.push(Z$4);
    },
    rect(data, x, y, width, height) {
        PathHelper.creator.path = data;
        PathHelper.creator.moveTo(x, y).lineTo(x + width, y).lineTo(x + width, y + height).lineTo(x, y + height).lineTo(x, y);
    },
    roundRect(data, x, y, width, height, radius) {
        PathHelper.creator.path = [];
        RectHelper.drawRoundRect(PathHelper.creator, x, y, width, height, radius);
        data.push(...PathHelper.convertToCanvasData(PathHelper.creator.path, true));
    },
    arcTo(data, fromX, fromY, x1, y1, toX, toY, radius, setPointBounds, setEndPoint, setStartPoint) {
        const BAx = x1 - fromX;
        const BAy = y1 - fromY;
        const CBx = toX - x1;
        const CBy = toY - y1;
        let startRadian = atan2$1(BAy, BAx);
        let endRadian = atan2$1(CBy, CBx);
        let totalRadian = endRadian - startRadian;
        if (totalRadian < 0)
            totalRadian += PI2;
        if (totalRadian === PI || (abs(BAx + BAy) < 1.e-12) || (abs(CBx + CBy) < 1.e-12)) {
            if (data)
                data.push(L$5, x1, y1);
            if (setPointBounds) {
                setPoint$1(setPointBounds, fromX, fromY);
                addPoint$1(setPointBounds, x1, y1);
            }
            if (setStartPoint)
                set(setStartPoint, fromX, fromY);
            if (setEndPoint)
                set(setEndPoint, x1, y1);
            return;
        }
        const anticlockwise = BAx * CBy - CBx * BAy < 0;
        const sign = anticlockwise ? -1 : 1;
        const c = radius / cos$2(totalRadian / 2);
        const centerX = x1 + c * cos$2(startRadian + totalRadian / 2 + PI_2 * sign);
        const centerY = y1 + c * sin$2(startRadian + totalRadian / 2 + PI_2 * sign);
        startRadian -= PI_2 * sign;
        endRadian -= PI_2 * sign;
        return ellipse$5(data, centerX, centerY, radius, radius, 0, startRadian / OneRadian, endRadian / OneRadian, anticlockwise, setPointBounds, setEndPoint, setStartPoint);
    },
    arc(data, x, y, radius, startAngle, endAngle, anticlockwise, setPointBounds, setEndPoint, setStartPoint) {
        return ellipse$5(data, x, y, radius, radius, 0, startAngle, endAngle, anticlockwise, setPointBounds, setEndPoint, setStartPoint);
    },
    ellipse(data, cx, cy, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise, setPointBounds, setEndPoint, setStartPoint) {
        const rotationRadian = rotation * OneRadian;
        const rotationSin = sin$2(rotationRadian);
        const rotationCos = cos$2(rotationRadian);
        let startRadian = startAngle * OneRadian;
        let endRadian = endAngle * OneRadian;
        if (startRadian > PI)
            startRadian -= PI2;
        if (endRadian < 0)
            endRadian += PI2;
        let totalRadian = endRadian - startRadian;
        if (totalRadian < 0)
            totalRadian += PI2;
        else if (totalRadian > PI2)
            totalRadian -= PI2;
        if (anticlockwise)
            totalRadian -= PI2;
        const parts = ceil(abs(totalRadian / PI_2));
        const partRadian = totalRadian / parts;
        const partRadian4Sin = sin$2(partRadian / 4);
        const control = 8 / 3 * partRadian4Sin * partRadian4Sin / sin$2(partRadian / 2);
        endRadian = startRadian + partRadian;
        let startCos = cos$2(startRadian);
        let startSin = sin$2(startRadian);
        let endCos, endSin;
        let x, y, x1, y1, x2, y2;
        let startX = x = rotationCos * radiusX * startCos - rotationSin * radiusY * startSin;
        let startY = y = rotationSin * radiusX * startCos + rotationCos * radiusY * startSin;
        let fromX = cx + x, fromY = cy + y;
        if (data)
            data.push(L$5, fromX, fromY);
        if (setPointBounds)
            setPoint$1(setPointBounds, fromX, fromY);
        if (setStartPoint)
            set(setStartPoint, fromX, fromY);
        for (let i = 0; i < parts; i++) {
            endCos = cos$2(endRadian);
            endSin = sin$2(endRadian);
            x = rotationCos * radiusX * endCos - rotationSin * radiusY * endSin;
            y = rotationSin * radiusX * endCos + rotationCos * radiusY * endSin;
            x1 = cx + startX - control * (rotationCos * radiusX * startSin + rotationSin * radiusY * startCos);
            y1 = cy + startY - control * (rotationSin * radiusX * startSin - rotationCos * radiusY * startCos);
            x2 = cx + x + control * (rotationCos * radiusX * endSin + rotationSin * radiusY * endCos);
            y2 = cy + y + control * (rotationSin * radiusX * endSin - rotationCos * radiusY * endCos);
            if (data)
                data.push(C$4, x1, y1, x2, y2, cx + x, cy + y);
            if (setPointBounds)
                toTwoPointBounds$1(cx + startX, cy + startY, x1, y1, x2, y2, cx + x, cy + y, setPointBounds, true);
            startX = x;
            startY = y;
            startCos = endCos;
            startSin = endSin;
            startRadian = endRadian;
            endRadian += partRadian;
        }
        if (setEndPoint)
            set(setEndPoint, cx + x, cy + y);
    },
    quadraticCurveTo(data, fromX, fromY, x1, y1, toX, toY) {
        data.push(C$4, (fromX + 2 * x1) / 3, (fromY + 2 * y1) / 3, (toX + 2 * x1) / 3, (toY + 2 * y1) / 3, toX, toY);
    },
    toTwoPointBoundsByQuadraticCurve(fromX, fromY, x1, y1, toX, toY, pointBounds, addMode) {
        toTwoPointBounds$1(fromX, fromY, (fromX + 2 * x1) / 3, (fromY + 2 * y1) / 3, (toX + 2 * x1) / 3, (toY + 2 * y1) / 3, toX, toY, pointBounds, addMode);
    },
    toTwoPointBounds(fromX, fromY, x1, y1, x2, y2, toX, toY, pointBounds, addMode) {
        const tList = [];
        let a, b, c, t, t1, t2, v, sqrtV;
        let f = fromX, z1 = x1, z2 = x2, o = toX;
        for (let i = 0; i < 2; ++i) {
            if (i == 1) {
                f = fromY, z1 = y1, z2 = y2, o = toY;
            }
            a = -3 * f + 9 * z1 - 9 * z2 + 3 * o;
            b = 6 * f - 12 * z1 + 6 * z2;
            c = 3 * z1 - 3 * f;
            if (Math.abs(a) < 1e-12) {
                if (Math.abs(b) < 1e-12)
                    continue;
                t = -c / b;
                if (0 < t && t < 1)
                    tList.push(t);
                continue;
            }
            v = b * b - 4 * c * a;
            sqrtV = Math.sqrt(v);
            if (v < 0)
                continue;
            t1 = (-b + sqrtV) / (2 * a);
            if (0 < t1 && t1 < 1)
                tList.push(t1);
            t2 = (-b - sqrtV) / (2 * a);
            if (0 < t2 && t2 < 1)
                tList.push(t2);
        }
        addMode ? addPoint$1(pointBounds, fromX, fromY) : setPoint$1(pointBounds, fromX, fromY);
        addPoint$1(pointBounds, toX, toY);
        for (let i = 0, len = tList.length; i < len; i++) {
            getPointAndSet(tList[i], fromX, fromY, x1, y1, x2, y2, toX, toY, tempPoint);
            addPoint$1(pointBounds, tempPoint.x, tempPoint.y);
        }
    },
    getPointAndSet(t, fromX, fromY, x1, y1, x2, y2, toX, toY, setPoint) {
        const o = 1 - t, a = o * o * o, b = 3 * o * o * t, c = 3 * o * t * t, d = t * t * t;
        setPoint.x = a * fromX + b * x1 + c * x2 + d * toX;
        setPoint.y = a * fromY + b * y1 + c * y2 + d * toY;
    },
    getPoint(t, fromX, fromY, x1, y1, x2, y2, toX, toY) {
        const point = {};
        getPointAndSet(t, fromX, fromY, x1, y1, x2, y2, toX, toY, point);
        return point;
    }
};
const { getPointAndSet, toTwoPointBounds: toTwoPointBounds$1, ellipse: ellipse$5 } = BezierHelper;

const { sin: sin$1, cos: cos$1, sqrt, atan2 } = Math;
const { ellipse: ellipse$4 } = BezierHelper;
const EllipseHelper = {
    ellipticalArc(data, fromX, fromY, radiusX, radiusY, rotation, largeFlag, sweepFlag, toX, toY, curveMode) {
        const halfX = (toX - fromX) / 2;
        const halfY = (toY - fromY) / 2;
        const rotationRadian = rotation * OneRadian;
        const rotationSin = sin$1(rotationRadian);
        const rotationCos = cos$1(rotationRadian);
        const px = -rotationCos * halfX - rotationSin * halfY;
        const py = -rotationCos * halfY + rotationSin * halfX;
        const rxSquare = radiusX * radiusX;
        const rySquare = radiusY * radiusY;
        const pySquare = py * py;
        const pxSquare = px * px;
        const a = rxSquare * rySquare - rxSquare * pySquare - rySquare * pxSquare;
        let s = 0;
        if (a < 0) {
            const t = sqrt(1 - a / (rxSquare * rySquare));
            radiusX *= t;
            radiusY *= t;
        }
        else {
            s = (largeFlag === sweepFlag ? -1 : 1) * sqrt(a / (rxSquare * pySquare + rySquare * pxSquare));
        }
        const cx = s * radiusX * py / radiusY;
        const cy = -s * radiusY * px / radiusX;
        const startRadian = atan2((py - cy) / radiusY, (px - cx) / radiusX);
        const endRadian = atan2((-py - cy) / radiusY, (-px - cx) / radiusX);
        let totalRadian = endRadian - startRadian;
        if (sweepFlag === 0 && totalRadian > 0) {
            totalRadian -= PI2;
        }
        else if (sweepFlag === 1 && totalRadian < 0) {
            totalRadian += PI2;
        }
        const centerX = fromX + halfX + rotationCos * cx - rotationSin * cy;
        const centerY = fromY + halfY + rotationSin * cx + rotationCos * cy;
        const anticlockwise = totalRadian < 0 ? 1 : 0;
        if (curveMode) {
            ellipse$4(data, centerX, centerY, radiusX, radiusY, rotation, startRadian / OneRadian, endRadian / OneRadian, anticlockwise);
        }
        else {
            if (radiusX === radiusY && !rotation) {
                data.push(PathCommandMap.O, centerX, centerY, radiusX, startRadian / OneRadian, endRadian / OneRadian, anticlockwise);
            }
            else {
                data.push(PathCommandMap.G, centerX, centerY, radiusX, radiusY, rotation, startRadian / OneRadian, endRadian / OneRadian, anticlockwise);
            }
        }
    }
};

const { M: M$3, m, L: L$4, l, H, h, V, v, C: C$3, c, S, s, Q: Q$3, q, T, t, A, a, Z: Z$3, z, N: N$3, D: D$3, X: X$3, G: G$3, F: F$3, O: O$3, P: P$3, U: U$3 } = PathCommandMap;
const { rect: rect$1, roundRect: roundRect$2, arcTo: arcTo$2, arc: arc$3, ellipse: ellipse$3, quadraticCurveTo: quadraticCurveTo$1 } = BezierHelper;
const { ellipticalArc } = EllipseHelper;
const debug$5 = Debug.get('PathConvert');
const setEndPoint$1 = {};
const PathConvert = {
    current: { dot: 0 },
    stringify(data) {
        let i = 0, len = data.length, count, str = '', command, lastCommand;
        while (i < len) {
            command = data[i];
            count = PathNumberCommandLengthMap[command];
            if (command === lastCommand) {
                str += ' ';
            }
            else {
                str += PathNumberCommandMap[command];
            }
            for (let j = 1; j < count; j++) {
                str += data[i + j];
                (j === count - 1) || (str += ' ');
            }
            lastCommand = command;
            i += count;
        }
        return str;
    },
    parse(pathString, curveMode) {
        let needConvert, char, lastChar, num = '';
        const data = [];
        const convertCommand = curveMode ? NeedConvertToCurveCommandMap : NeedConvertToCanvasCommandMap;
        for (let i = 0, len = pathString.length; i < len; i++) {
            char = pathString[i];
            if (StringNumberMap[char]) {
                if (char === '.') {
                    current.dot++;
                    if (current.dot > 1) {
                        pushData(data, num);
                        num = '';
                    }
                }
                num += char;
            }
            else if (PathCommandMap[char]) {
                if (num) {
                    pushData(data, num);
                    num = '';
                }
                current.name = PathCommandMap[char];
                current.length = PathCommandLengthMap[char];
                current.index = 0;
                pushData(data, current.name);
                if (!needConvert && convertCommand[char])
                    needConvert = true;
            }
            else {
                if (char === '-' || char === '+') {
                    if (lastChar === 'e' || lastChar === 'E') {
                        num += char;
                    }
                    else {
                        if (num)
                            pushData(data, num);
                        num = char;
                    }
                }
                else {
                    if (num) {
                        pushData(data, num);
                        num = '';
                    }
                }
            }
            lastChar = char;
        }
        if (num)
            pushData(data, num);
        return needConvert ? PathConvert.toCanvasData(data, curveMode) : data;
    },
    toCanvasData(old, curveMode) {
        let x = 0, y = 0, x1 = 0, y1 = 0, i = 0, len = old.length, controlX, controlY, command, lastCommand, smooth;
        const data = [];
        while (i < len) {
            command = old[i];
            switch (command) {
                case m:
                    old[i + 1] += x;
                    old[i + 2] += y;
                case M$3:
                    x = old[i + 1];
                    y = old[i + 2];
                    data.push(M$3, x, y);
                    i += 3;
                    break;
                case h:
                    old[i + 1] += x;
                case H:
                    x = old[i + 1];
                    data.push(L$4, x, y);
                    i += 2;
                    break;
                case v:
                    old[i + 1] += y;
                case V:
                    y = old[i + 1];
                    data.push(L$4, x, y);
                    i += 2;
                    break;
                case l:
                    old[i + 1] += x;
                    old[i + 2] += y;
                case L$4:
                    x = old[i + 1];
                    y = old[i + 2];
                    data.push(L$4, x, y);
                    i += 3;
                    break;
                case s:
                    old[i + 1] += x;
                    old[i + 2] += y;
                    old[i + 3] += x;
                    old[i + 4] += y;
                    command = S;
                case S:
                    smooth = (lastCommand === C$3) || (lastCommand === S);
                    x1 = smooth ? (x * 2 - controlX) : old[i + 1];
                    y1 = smooth ? (y * 2 - controlY) : old[i + 2];
                    controlX = old[i + 1];
                    controlY = old[i + 2];
                    x = old[i + 3];
                    y = old[i + 4];
                    data.push(C$3, x1, y1, controlX, controlY, x, y);
                    i += 5;
                    break;
                case c:
                    old[i + 1] += x;
                    old[i + 2] += y;
                    old[i + 3] += x;
                    old[i + 4] += y;
                    old[i + 5] += x;
                    old[i + 6] += y;
                    command = C$3;
                case C$3:
                    controlX = old[i + 3];
                    controlY = old[i + 4];
                    x = old[i + 5];
                    y = old[i + 6];
                    data.push(C$3, old[i + 1], old[i + 2], controlX, controlY, x, y);
                    i += 7;
                    break;
                case t:
                    old[i + 1] += x;
                    old[i + 2] += y;
                    command = T;
                case T:
                    smooth = (lastCommand === Q$3) || (lastCommand === T);
                    controlX = smooth ? (x * 2 - controlX) : old[i + 1];
                    controlY = smooth ? (y * 2 - controlY) : old[i + 2];
                    curveMode ? quadraticCurveTo$1(data, x, y, controlX, controlY, old[i + 1], old[i + 2]) : data.push(Q$3, controlX, controlY, old[i + 1], old[i + 2]);
                    x = old[i + 1];
                    y = old[i + 2];
                    i += 3;
                    break;
                case q:
                    old[i + 1] += x;
                    old[i + 2] += y;
                    old[i + 3] += x;
                    old[i + 4] += y;
                    command = Q$3;
                case Q$3:
                    controlX = old[i + 1];
                    controlY = old[i + 2];
                    curveMode ? quadraticCurveTo$1(data, x, y, controlX, controlY, old[i + 3], old[i + 4]) : data.push(Q$3, controlX, controlY, old[i + 3], old[i + 4]);
                    x = old[i + 3];
                    y = old[i + 4];
                    i += 5;
                    break;
                case a:
                    old[i + 6] += x;
                    old[i + 7] += y;
                case A:
                    ellipticalArc(data, x, y, old[i + 1], old[i + 2], old[i + 3], old[i + 4], old[i + 5], old[i + 6], old[i + 7], curveMode);
                    x = old[i + 6];
                    y = old[i + 7];
                    i += 8;
                    break;
                case z:
                case Z$3:
                    data.push(Z$3);
                    i++;
                    break;
                case N$3:
                    x = old[i + 1];
                    y = old[i + 2];
                    curveMode ? rect$1(data, x, y, old[i + 3], old[i + 4]) : copyData(data, old, i, 5);
                    i += 5;
                    break;
                case D$3:
                    x = old[i + 1];
                    y = old[i + 2];
                    curveMode ? roundRect$2(data, x, y, old[i + 3], old[i + 4], [old[i + 5], old[i + 6], old[i + 7], old[i + 8]]) : copyData(data, old, i, 9);
                    i += 9;
                    break;
                case X$3:
                    x = old[i + 1];
                    y = old[i + 2];
                    curveMode ? roundRect$2(data, x, y, old[i + 3], old[i + 4], old[i + 5]) : copyData(data, old, i, 6);
                    i += 6;
                    break;
                case G$3:
                    ellipse$3(curveMode ? data : copyData(data, old, i, 9), old[i + 1], old[i + 2], old[i + 3], old[i + 4], old[i + 5], old[i + 6], old[i + 7], old[i + 8], null, setEndPoint$1);
                    x = setEndPoint$1.x;
                    y = setEndPoint$1.y;
                    i += 9;
                    break;
                case F$3:
                    curveMode ? ellipse$3(data, old[i + 1], old[i + 2], old[i + 3], old[i + 4], 0, 0, 360, false) : copyData(data, old, i, 5);
                    x = old[i + 1] + old[i + 3];
                    y = old[i + 2];
                    i += 5;
                    break;
                case O$3:
                    arc$3(curveMode ? data : copyData(data, old, i, 7), old[i + 1], old[i + 2], old[i + 3], old[i + 4], old[i + 5], old[i + 6], null, setEndPoint$1);
                    x = setEndPoint$1.x;
                    y = setEndPoint$1.y;
                    i += 7;
                    break;
                case P$3:
                    curveMode ? arc$3(data, old[i + 1], old[i + 2], old[i + 3], 0, 360, false) : copyData(data, old, i, 4);
                    x = old[i + 1] + old[i + 3];
                    y = old[i + 2];
                    i += 4;
                    break;
                case U$3:
                    arcTo$2(curveMode ? data : copyData(data, old, i, 6), x, y, old[i + 1], old[i + 2], old[i + 3], old[i + 4], old[i + 5], null, setEndPoint$1);
                    x = setEndPoint$1.x;
                    y = setEndPoint$1.y;
                    i += 6;
                    break;
                default:
                    debug$5.error(`command: ${command} [index:${i}]`, old);
                    return data;
            }
            lastCommand = command;
        }
        return data;
    },
    copyData(data, old, index, count) {
        for (let i = index, end = index + count; i < end; i++) {
            data.push(old[i]);
        }
    },
    pushData(data, strNum) {
        if (current.index === current.length) {
            current.index = 1;
            data.push(current.name);
        }
        data.push(Number(strNum));
        current.index++;
        current.dot = 0;
    }
};
const { current, pushData, copyData } = PathConvert;

const { M: M$2, L: L$3, C: C$2, Q: Q$2, Z: Z$2, N: N$2, D: D$2, X: X$2, G: G$2, F: F$2, O: O$2, P: P$2, U: U$2 } = PathCommandMap;
const startPoint = {};
const PathCommandDataHelper = {
    beginPath(data) {
        data.length = 0;
    },
    moveTo(data, x, y) {
        data.push(M$2, x, y);
    },
    lineTo(data, x, y) {
        data.push(L$3, x, y);
    },
    bezierCurveTo(data, x1, y1, x2, y2, x, y) {
        data.push(C$2, x1, y1, x2, y2, x, y);
    },
    quadraticCurveTo(data, x1, y1, x, y) {
        data.push(Q$2, x1, y1, x, y);
    },
    closePath(data) {
        data.push(Z$2);
    },
    rect(data, x, y, width, height) {
        data.push(N$2, x, y, width, height);
    },
    roundRect(data, x, y, width, height, cornerRadius) {
        if (typeof cornerRadius === 'number') {
            data.push(X$2, x, y, width, height, cornerRadius);
        }
        else {
            const fourCorners = MathHelper.fourNumber(cornerRadius);
            if (fourCorners) {
                data.push(D$2, x, y, width, height, ...fourCorners);
            }
            else {
                data.push(N$2, x, y, width, height);
            }
        }
    },
    ellipse(data, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        if (rotation === undefined) {
            data.push(F$2, x, y, radiusX, radiusY);
        }
        else {
            if (startAngle === undefined)
                startAngle = 0;
            if (endAngle === undefined)
                endAngle = 360;
            data.push(G$2, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise ? 1 : 0);
        }
    },
    arc(data, x, y, radius, startAngle, endAngle, anticlockwise) {
        if (startAngle === undefined) {
            data.push(P$2, x, y, radius);
        }
        else {
            if (endAngle === undefined)
                endAngle = 360;
            data.push(O$2, x, y, radius, startAngle, endAngle, anticlockwise ? 1 : 0);
        }
    },
    arcTo(data, x1, y1, x2, y2, radius) {
        data.push(U$2, x1, y1, x2, y2, radius);
    },
    drawEllipse(data, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        if (rotation === undefined)
            rotation = 0;
        if (startAngle === undefined)
            startAngle = 0;
        if (endAngle === undefined)
            endAngle = 360;
        BezierHelper.ellipse(null, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise, null, null, startPoint);
        data.push(M$2, startPoint.x, startPoint.y);
        ellipse$2(data, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
    },
    drawArc(data, x, y, radius, startAngle, endAngle, anticlockwise) {
        if (startAngle === undefined)
            startAngle = 0;
        if (endAngle === undefined)
            endAngle = 360;
        BezierHelper.arc(null, x, y, radius, startAngle, endAngle, anticlockwise, null, null, startPoint);
        data.push(M$2, startPoint.x, startPoint.y);
        arc$2(data, x, y, radius, startAngle, endAngle, anticlockwise);
    },
    drawPoints(data, points, curve, close) {
        BezierHelper.points(data, points, curve, close);
    }
};
const { ellipse: ellipse$2, arc: arc$2 } = PathCommandDataHelper;

const { moveTo, lineTo, quadraticCurveTo, bezierCurveTo, closePath, beginPath, rect, roundRect: roundRect$1, ellipse: ellipse$1, arc: arc$1, arcTo: arcTo$1, drawEllipse, drawArc, drawPoints } = PathCommandDataHelper;
class PathCreator {
    constructor(path) {
        if (path) {
            this.path = typeof path === 'string' ? PathHelper.parse(path) : path;
        }
        else {
            this.path = [];
        }
    }
    beginPath() {
        beginPath(this.path);
        return this;
    }
    moveTo(x, y) {
        moveTo(this.path, x, y);
        return this;
    }
    lineTo(x, y) {
        lineTo(this.path, x, y);
        return this;
    }
    bezierCurveTo(x1, y1, x2, y2, x, y) {
        bezierCurveTo(this.path, x1, y1, x2, y2, x, y);
        return this;
    }
    quadraticCurveTo(x1, y1, x, y) {
        quadraticCurveTo(this.path, x1, y1, x, y);
        return this;
    }
    closePath() {
        closePath(this.path);
        return this;
    }
    rect(x, y, width, height) {
        rect(this.path, x, y, width, height);
        return this;
    }
    roundRect(x, y, width, height, cornerRadius) {
        roundRect$1(this.path, x, y, width, height, cornerRadius);
        return this;
    }
    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        ellipse$1(this.path, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
        return this;
    }
    arc(x, y, radius, startAngle, endAngle, anticlockwise) {
        arc$1(this.path, x, y, radius, startAngle, endAngle, anticlockwise);
        return this;
    }
    arcTo(x1, y1, x2, y2, radius) {
        arcTo$1(this.path, x1, y1, x2, y2, radius);
        return this;
    }
    drawEllipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        drawEllipse(this.path, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
        return this;
    }
    drawArc(x, y, radius, startAngle, endAngle, anticlockwise) {
        drawArc(this.path, x, y, radius, startAngle, endAngle, anticlockwise);
        return this;
    }
    drawPoints(points, curve, close) {
        drawPoints(this.path, points, curve, close);
        return this;
    }
}

const { M: M$1, L: L$2, C: C$1, Q: Q$1, Z: Z$1, N: N$1, D: D$1, X: X$1, G: G$1, F: F$1, O: O$1, P: P$1, U: U$1 } = PathCommandMap;
const debug$4 = Debug.get('PathDrawer');
const PathDrawer = {
    drawPathByData(drawer, data) {
        if (!data)
            return;
        let command;
        let i = 0, len = data.length;
        while (i < len) {
            command = data[i];
            switch (command) {
                case M$1:
                    drawer.moveTo(data[i + 1], data[i + 2]);
                    i += 3;
                    break;
                case L$2:
                    drawer.lineTo(data[i + 1], data[i + 2]);
                    i += 3;
                    break;
                case C$1:
                    drawer.bezierCurveTo(data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5], data[i + 6]);
                    i += 7;
                    break;
                case Q$1:
                    drawer.quadraticCurveTo(data[i + 1], data[i + 2], data[i + 3], data[i + 4]);
                    i += 5;
                    break;
                case Z$1:
                    drawer.closePath();
                    i += 1;
                    break;
                case N$1:
                    drawer.rect(data[i + 1], data[i + 2], data[i + 3], data[i + 4]);
                    i += 5;
                    break;
                case D$1:
                    drawer.roundRect(data[i + 1], data[i + 2], data[i + 3], data[i + 4], [data[i + 5], data[i + 6], data[i + 7], data[i + 8]]);
                    i += 9;
                    break;
                case X$1:
                    drawer.roundRect(data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5]);
                    i += 6;
                    break;
                case G$1:
                    drawer.ellipse(data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5] * OneRadian, data[i + 6] * OneRadian, data[i + 7] * OneRadian, data[i + 8]);
                    i += 9;
                    break;
                case F$1:
                    drawer.ellipse(data[i + 1], data[i + 2], data[i + 3], data[i + 4], 0, 0, PI2, false);
                    i += 5;
                    break;
                case O$1:
                    drawer.arc(data[i + 1], data[i + 2], data[i + 3], data[i + 4] * OneRadian, data[i + 5] * OneRadian, data[i + 6]);
                    i += 7;
                    break;
                case P$1:
                    drawer.arc(data[i + 1], data[i + 2], data[i + 3], 0, PI2, false);
                    i += 4;
                    break;
                case U$1:
                    drawer.arcTo(data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5]);
                    i += 6;
                    break;
                default:
                    debug$4.error(`command: ${command} [index:${i}]`, data);
                    return;
            }
        }
    }
};

const { M, L: L$1, C, Q, Z, N, D, X, G, F, O, P, U } = PathCommandMap;
const { toTwoPointBounds, toTwoPointBoundsByQuadraticCurve, arcTo, arc, ellipse } = BezierHelper;
const { add, copy: copy$3, addPoint, setPoint, addBounds, toBounds } = TwoPointBoundsHelper;
const debug$3 = Debug.get('PathBounds');
let radius, radiusX, radiusY;
const tempPointBounds = {};
const setPointBounds = {};
const setEndPoint = {};
const PathBounds = {
    toBounds(data, setBounds) {
        PathBounds.toTwoPointBounds(data, setPointBounds);
        toBounds(setPointBounds, setBounds);
    },
    toTwoPointBounds(data, setPointBounds) {
        if (!data || !data.length)
            return setPoint(setPointBounds, 0, 0);
        let command;
        let i = 0, x = 0, y = 0, x1, y1, toX, toY;
        const len = data.length;
        while (i < len) {
            command = data[i];
            if (i === 0) {
                if (command === Z || command === C || command === Q) {
                    setPoint(setPointBounds, x, y);
                }
                else {
                    setPoint(setPointBounds, data[i + 1], data[i + 2]);
                }
            }
            switch (command) {
                case M:
                case L$1:
                    x = data[i + 1];
                    y = data[i + 2];
                    addPoint(setPointBounds, x, y);
                    i += 3;
                    break;
                case C:
                    toX = data[i + 5];
                    toY = data[i + 6];
                    toTwoPointBounds(x, y, data[i + 1], data[i + 2], data[i + 3], data[i + 4], toX, toY, tempPointBounds);
                    add(setPointBounds, tempPointBounds);
                    x = toX;
                    y = toY;
                    i += 7;
                    break;
                case Q:
                    x1 = data[i + 1];
                    y1 = data[i + 2];
                    toX = data[i + 3];
                    toY = data[i + 4];
                    toTwoPointBoundsByQuadraticCurve(x, y, x1, y1, toX, toY, tempPointBounds);
                    add(setPointBounds, tempPointBounds);
                    x = toX;
                    y = toY;
                    i += 5;
                    break;
                case Z:
                    i += 1;
                    break;
                case N:
                    x = data[i + 1];
                    y = data[i + 2];
                    addBounds(setPointBounds, x, y, data[i + 3], data[i + 4]);
                    i += 5;
                    break;
                case D:
                case X:
                    x = data[i + 1];
                    y = data[i + 2];
                    addBounds(setPointBounds, x, y, data[i + 3], data[i + 4]);
                    i += (command === D ? 9 : 6);
                    break;
                case G:
                    ellipse(null, data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5], data[i + 6], data[i + 7], data[i + 8], tempPointBounds, setEndPoint);
                    i === 0 ? copy$3(setPointBounds, tempPointBounds) : add(setPointBounds, tempPointBounds);
                    x = setEndPoint.x;
                    y = setEndPoint.y;
                    i += 9;
                    break;
                case F:
                    x = data[i + 1];
                    y = data[i + 2];
                    radiusX = data[i + 3];
                    radiusY = data[i + 4];
                    addBounds(setPointBounds, x - radiusX, y - radiusY, radiusX * 2, radiusY * 2);
                    x += radiusX;
                    i += 5;
                    break;
                case O:
                    arc(null, data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5], data[i + 6], tempPointBounds, setEndPoint);
                    i === 0 ? copy$3(setPointBounds, tempPointBounds) : add(setPointBounds, tempPointBounds);
                    x = setEndPoint.x;
                    y = setEndPoint.y;
                    i += 7;
                    break;
                case P:
                    x = data[i + 1];
                    y = data[i + 2];
                    radius = data[i + 3];
                    addBounds(setPointBounds, x - radius, y - radius, radius * 2, radius * 2);
                    x += radius;
                    i += 4;
                    break;
                case U:
                    arcTo(null, x, y, data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5], tempPointBounds, setEndPoint);
                    i === 0 ? copy$3(setPointBounds, tempPointBounds) : add(setPointBounds, tempPointBounds);
                    x = setEndPoint.x;
                    y = setEndPoint.y;
                    i += 6;
                    break;
                default:
                    debug$3.error(`command: ${command} [index:${i}]`, data);
                    return;
            }
        }
    }
};

const PathCorner = {
    smooth(data, _cornerRadius, _cornerSmoothing) {
        return data;
    }
};

PathHelper.creator = new PathCreator();
PathHelper.parse = PathConvert.parse;
PathHelper.convertToCanvasData = PathConvert.toCanvasData;

const { drawRoundRect } = RectHelper;
function roundRect(drawer) {
    if (drawer && !drawer.roundRect) {
        drawer.roundRect = function (x, y, width, height, cornerRadius) {
            drawRoundRect(this, x, y, width, height, cornerRadius);
        };
    }
}

function canvasPatch(drawer) {
    roundRect(drawer);
}

const debug$2 = Debug.get('TaskProcessor');
class TaskItem {
    constructor(task) {
        this.parallel = true;
        this.time = 1;
        this.id = IncrementId.create(IncrementId.TASK);
        this.task = task;
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.task && !this.isComplete && this.parent.running)
                    yield this.task();
            }
            catch (error) {
                debug$2.error(error);
            }
        });
    }
    complete() {
        this.isComplete = true;
        this.parent = null;
        this.task = null;
    }
    cancel() {
        this.isCancel = true;
        this.complete();
    }
}

class TaskProcessor {
    get total() {
        return this.list.length + this.delayNumber;
    }
    get finishedIndex() {
        return this.isComplete ? 0 : this.index + this.parallelSuccessNumber;
    }
    get remain() {
        return this.isComplete ? this.total : this.total - this.finishedIndex;
    }
    get percent() {
        const { total } = this;
        let totalTime = 0, runTime = 0;
        for (let i = 0; i < total; i++) {
            if (i <= this.finishedIndex) {
                runTime += this.list[i].time;
                if (i === this.finishedIndex)
                    totalTime = runTime;
            }
            else {
                totalTime += this.list[i].time;
            }
        }
        return this.isComplete ? 1 : (runTime / totalTime);
    }
    constructor(config) {
        this.config = { parallel: 6 };
        this.list = [];
        this.running = false;
        this.isComplete = true;
        this.index = 0;
        this.delayNumber = 0;
        if (config)
            DataHelper.assign(this.config, config);
        this.empty();
    }
    add(taskCallback, options) {
        let start, parallel, time, delay;
        const task = new TaskItem(taskCallback);
        task.parent = this;
        if (typeof options === 'number') {
            delay = options;
        }
        else if (options) {
            parallel = options.parallel;
            start = options.start;
            time = options.time;
            delay = options.delay;
        }
        if (time)
            task.time = time;
        if (parallel === false)
            task.parallel = false;
        if (delay === undefined) {
            this.push(task, start);
        }
        else {
            this.delayNumber++;
            setTimeout(() => {
                this.delayNumber--;
                this.push(task, start);
            }, delay);
        }
        this.isComplete = false;
        return task;
    }
    push(task, start) {
        this.list.push(task);
        if (start !== false && !this.timer) {
            this.timer = setTimeout(() => this.start());
        }
    }
    empty() {
        this.index = 0;
        this.parallelSuccessNumber = 0;
        this.list = [];
        this.parallelList = [];
    }
    start() {
        if (!this.running) {
            this.running = true;
            this.isComplete = false;
            this.run();
        }
    }
    pause() {
        clearTimeout(this.timer);
        this.timer = null;
        this.running = false;
    }
    resume() {
        this.start();
    }
    skip() {
        this.index++;
        this.resume();
    }
    stop() {
        this.isComplete = true;
        this.list.forEach(task => { if (!task.isComplete)
            task.cancel(); });
        this.pause();
        this.empty();
    }
    run() {
        if (!this.running)
            return;
        this.setParallelList();
        if (this.parallelList.length > 1) {
            this.runParallelTasks();
        }
        else {
            this.remain ? this.runTask() : this.onComplete();
        }
    }
    runTask() {
        const task = this.list[this.index];
        if (!task) {
            this.nextTask();
            return;
        }
        task.run().then(() => {
            this.onTask(task);
            this.index++;
            this.nextTask();
        }).catch(error => {
            this.onError(error);
        });
    }
    runParallelTasks() {
        this.parallelList.forEach(task => this.runParallelTask(task));
    }
    runParallelTask(task) {
        task.run().then(() => {
            this.onTask(task);
            this.fillParallelTask();
        }).catch(error => {
            this.onParallelError(error);
        });
    }
    nextTask() {
        if (this.total === this.finishedIndex) {
            this.onComplete();
        }
        else {
            this.timer = setTimeout(() => this.run());
        }
    }
    setParallelList() {
        let task;
        this.parallelList = [];
        this.parallelSuccessNumber = 0;
        let end = this.index + this.config.parallel;
        if (end > this.list.length)
            end = this.list.length;
        for (let i = this.index; i < end; i++) {
            task = this.list[i];
            if (task.parallel) {
                this.parallelList.push(task);
            }
            else {
                break;
            }
        }
    }
    fillParallelTask() {
        let task;
        const parallelList = this.parallelList;
        this.parallelSuccessNumber++;
        parallelList.pop();
        const parallelWaitNumber = parallelList.length;
        const nextIndex = this.finishedIndex + parallelWaitNumber;
        if (parallelList.length) {
            if (!this.running)
                return;
            if (nextIndex < this.total) {
                task = this.list[nextIndex];
                if (task && task.parallel) {
                    parallelList.push(task);
                    this.runParallelTask(task);
                }
            }
        }
        else {
            this.index += this.parallelSuccessNumber;
            this.parallelSuccessNumber = 0;
            this.nextTask();
        }
    }
    onComplete() {
        this.stop();
        if (this.config.onComplete)
            this.config.onComplete();
    }
    onTask(task) {
        task.complete();
        if (this.config.onTask)
            this.config.onTask();
    }
    onParallelError(error) {
        this.parallelList.forEach(task => {
            task.parallel = false;
        });
        this.parallelList.length = 0;
        this.parallelSuccessNumber = 0;
        this.onError(error);
    }
    onError(error) {
        this.pause();
        if (this.config.onError)
            this.config.onError(error);
    }
    destroy() {
        this.stop();
    }
}

const ImageManager = {
    map: {},
    recycledList: [],
    tasker: new TaskProcessor(),
    patternTasker: new TaskProcessor(),
    get isComplete() { return I$1.tasker.isComplete && I$1.patternTasker.isComplete; },
    get(config) {
        let image = I$1.map[config.url];
        if (!image) {
            image = Creator.image(config);
            I$1.map[config.url] = image;
        }
        image.use++;
        return image;
    },
    recycle(image) {
        image.use--;
        setTimeout(() => { if (!image.use)
            I$1.recycledList.push(image); });
    },
    clearRecycled() {
        const list = I$1.recycledList;
        if (list.length) {
            list.forEach(image => {
                if (!image.use && image.url) {
                    delete I$1.map[image.url];
                    image.destroy();
                }
            });
            list.length = 0;
        }
    },
    destroy() {
        I$1.map = {};
    }
};
const I$1 = ImageManager;

const { IMAGE, create: create$1 } = IncrementId;
class LeaferImage {
    get url() { return this.config.url; }
    get completed() { return this.ready || !!this.error; }
    constructor(config) {
        this.use = 0;
        this.waitComplete = [];
        this.innerId = create$1(IMAGE);
        this.config = config || { url: '' };
        const { url } = config;
        if (url.startsWith('data:')) {
            if (url.startsWith('data:image/svg'))
                this.isSVG = true;
        }
        else {
            if (url.includes('.svg'))
                this.isSVG = true;
        }
        if (this.config.format === 'svg')
            this.isSVG = true;
    }
    load(onSuccess, onError) {
        if (!this.loading) {
            this.loading = true;
            ImageManager.tasker.add(() => __awaiter(this, void 0, void 0, function* () {
                return yield Platform.origin.loadImage(this.url).then((img) => {
                    this.ready = true;
                    this.width = img.naturalWidth || img.width;
                    this.height = img.naturalHeight || img.height;
                    this.view = img;
                    this.onComplete(true);
                }).catch((e) => {
                    this.error = e;
                    this.onComplete(false);
                });
            }));
        }
        this.waitComplete.push(onSuccess, onError);
        return this.waitComplete.length - 2;
    }
    unload(index, stopEvent) {
        const l = this.waitComplete;
        if (stopEvent) {
            const error = l[index + 1];
            if (error)
                error({ type: 'stop' });
        }
        l[index] = l[index + 1] = undefined;
    }
    onComplete(isSuccess) {
        let odd;
        this.waitComplete.forEach((item, index) => {
            odd = index % 2;
            if (item) {
                if (isSuccess) {
                    if (!odd)
                        item(this);
                }
                else {
                    if (odd)
                        item(this.error);
                }
            }
        });
        this.waitComplete.length = 0;
        this.loading = false;
    }
    getCanvas(width, height, opacity, _filters) {
        width || (width = this.width);
        height || (height = this.height);
        const canvas = Platform.origin.createCanvas(width, height);
        const ctx = canvas.getContext('2d');
        if (opacity)
            ctx.globalAlpha = opacity;
        ctx.drawImage(this.view, 0, 0, width, height);
        return canvas;
    }
    destroy() {
        this.config = { url: '' };
        this.waitComplete.length = 0;
    }
}

class Event {
    constructor(type, target) {
        this.bubbles = false;
        this.type = type;
        if (target)
            this.target = target;
    }
    stopDefault() {
        this.isStopDefault = true;
    }
    stopNow() {
        this.isStopNow = true;
        this.isStop = true;
    }
    stop() {
        this.isStop = true;
    }
}

class ChildEvent extends Event {
    constructor(type, child, parent) {
        super(type, child);
        this.parent = parent;
        this.child = child;
    }
}
ChildEvent.ADD = 'child.add';
ChildEvent.REMOVE = 'child.remove';

class PropertyEvent extends Event {
    constructor(type, target, attrName, oldValue, newValue) {
        super(type, target);
        this.attrName = attrName;
        this.oldValue = oldValue;
        this.newValue = newValue;
    }
}
PropertyEvent.CHANGE = 'property.change';

class ImageEvent extends Event {
    constructor(type, data) {
        super(type);
        Object.assign(this, data);
    }
}
ImageEvent.LOAD = 'image.load';
ImageEvent.LOADED = 'image.loaded';
ImageEvent.ERROR = 'image.error';

class ResizeEvent extends Event {
    get bigger() {
        if (!this.old)
            return true;
        const { width, height } = this.old;
        return this.width >= width && this.height >= height;
    }
    get smaller() {
        return !this.bigger;
    }
    get samePixelRatio() {
        if (!this.old)
            return true;
        return this.pixelRatio === this.old.pixelRatio;
    }
    constructor(size, oldSize) {
        if (typeof size === 'object') {
            super(ResizeEvent.RESIZE);
            Object.assign(this, size);
        }
        else {
            super(size);
        }
        this.old = oldSize;
    }
}
ResizeEvent.RESIZE = 'resize';

class TransformEvent extends Event {
    constructor(type, params) {
        super(type);
        if (params)
            Object.assign(this, params);
    }
}
TransformEvent.START = 'transform.start';
TransformEvent.CHANGE = 'transform.change';
TransformEvent.END = 'transform.end';
TransformEvent.BEFORE_START = 'transform.before_start';
TransformEvent.BEFORE_CHANGE = 'transform.before_change';
TransformEvent.BEFORE_END = 'transform.before_end';

class WatchEvent extends Event {
    constructor(type, data) {
        super(type);
        this.data = data;
    }
}
WatchEvent.REQUEST = 'watch.request';
WatchEvent.DATA = 'watch.data';

class LayoutEvent extends Event {
    constructor(type, data, times) {
        super(type);
        if (data) {
            this.data = data;
            this.times = times;
        }
    }
}
LayoutEvent.CHECK_UPDATE = 'layout.check_update';
LayoutEvent.REQUEST = 'layout.request';
LayoutEvent.START = 'layout.start';
LayoutEvent.BEFORE = 'layout.before';
LayoutEvent.LAYOUT = 'layout.layout';
LayoutEvent.AFTER = 'layout.after';
LayoutEvent.AGAIN = 'layout.again';
LayoutEvent.END = 'layout.end';

class AnimateEvent extends Event {
}
AnimateEvent.FRAME = 'animate.frame';

class RenderEvent extends Event {
    constructor(type, times, bounds, options) {
        super(type);
        if (times)
            this.times = times;
        if (bounds) {
            this.renderBounds = bounds;
            this.renderOptions = options;
        }
    }
}
RenderEvent.REQUEST = 'render.request';
RenderEvent.START = 'render.start';
RenderEvent.BEFORE = 'render.before';
RenderEvent.RENDER = 'render';
RenderEvent.AFTER = 'render.after';
RenderEvent.AGAIN = 'render.again';
RenderEvent.END = 'render.end';

class LeaferEvent extends Event {
}
LeaferEvent.START = 'leafer.start';
LeaferEvent.BEFORE_READY = 'leafer.before_ready';
LeaferEvent.READY = 'leafer.ready';
LeaferEvent.AFTER_READY = 'leafer.after_ready';
LeaferEvent.VIEW_READY = 'leafer.view_ready';
LeaferEvent.VIEW_COMPLETED = 'leafer.view_completed';
LeaferEvent.STOP = 'leafer.stop';
LeaferEvent.RESTART = 'leafer.restart';
LeaferEvent.END = 'leafer.end';

const downKeyMap = {};
const Keyboard = {
    isHoldSpaceKey() {
        return Keyboard.isHold('Space');
    },
    isHold(code) {
        return downKeyMap[code];
    },
    setDownCode(code) {
        if (!downKeyMap[code])
            downKeyMap[code] = true;
    },
    setUpCode(code) {
        downKeyMap[code] = false;
    }
};

const PointerButton = {
    LEFT: 1,
    RIGHT: 2,
    MIDDLE: 4,
    defaultLeft(event) { if (!event.buttons)
        event.buttons = 1; },
    left(event) { return event.buttons === 1; },
    right(event) { return event.buttons === 2; },
    middle(event) { return event.buttons === 4; }
};

class UIEvent extends Event {
    get spaceKey() { return Keyboard.isHoldSpaceKey(); }
    get left() { return PointerButton.left(this); }
    get right() { return PointerButton.right(this); }
    get middle() { return PointerButton.middle(this); }
    constructor(params) {
        super(params.type);
        this.bubbles = true;
        Object.assign(this, params);
    }
    getInner(target) {
        if (!target)
            target = this.current;
        return target.getInnerPoint(this);
    }
    getLocal(target) {
        if (!target)
            target = this.current;
        return target.getLocalPoint(this);
    }
    static changeName(oldName, newName) {
        EventCreator.changeName(oldName, newName);
    }
}

function defineKey(target, key, descriptor) {
    Object.defineProperty(target, key, descriptor);
}
function getDescriptor(object, name) {
    return Object.getOwnPropertyDescriptor(object, name);
}
function getNames(object) {
    return Object.getOwnPropertyNames(object);
}

function aliasType(name) {
    return (target, key) => {
        defineKey(target, key, {
            get() { return this.__getAttr(name); },
            set(value) {
                this.__setAttr(name, value);
            }
        });
    };
}
function defineLeafAttr(target, key, defaultValue, mergeDescriptor) {
    const defaultDescriptor = {
        get() { return this.__getAttr(key); },
        set(value) { this.__setAttr(key, value); },
        configurable: true,
        enumerable: true
    };
    defineKey(target, key, Object.assign(defaultDescriptor, mergeDescriptor || {}));
    defineDataProcessor(target, key, defaultValue);
}
function dataType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue);
    };
}
function positionType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.positionChanged || this.__layout.positionChange();
            }
        });
    };
}
function scaleType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.scaleChanged || this.__layout.scaleChange();
            }
        });
    };
}
function rotationType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.rotationChanged || this.__layout.rotationChange();
            }
        });
    };
}
function boundsType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.boxChanged || this.__layout.boxChange();
                if (this.__.around)
                    this.__layout.positionChanged || this.__layout.positionChange();
            }
        });
    };
}
const pathType = boundsType;
function affectStrokeBoundsType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.strokeChanged || this.__layout.strokeChange();
            }
        });
    };
}
const strokeType = affectStrokeBoundsType;
function affectRenderBoundsType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.renderChanged || this.__layout.renderChange();
            }
        });
    };
}
function surfaceType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.surfaceChanged || this.__layout.surfaceChange();
            }
        });
    };
}
function opacityType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.opacityChanged || this.__layout.opacityChange();
            }
        });
    };
}
function sortType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.surfaceChanged || this.__layout.surfaceChange();
                this.waitParent(() => { this.parent.__layout.childrenSortChange(); });
            }
        });
    };
}
function maskType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.__layout.boxChanged || this.__layout.boxChange();
                this.waitParent(() => { this.parent.__updateMask(value); });
            }
        });
    };
}
function eraserType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                this.waitParent(() => { this.parent.__updateEraser(value); });
            }
        });
    };
}
function hitType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                if (Debug.showHitView) {
                    this.__layout.surfaceChanged || this.__layout.surfaceChange();
                }
                if (this.leafer)
                    this.leafer.updateCursor();
            }
        });
    };
}
function cursorType(defaultValue) {
    return (target, key) => {
        defineLeafAttr(target, key, defaultValue, {
            set(value) {
                this.__setAttr(key, value);
                if (this.leafer)
                    this.leafer.updateCursor();
            }
        });
    };
}
function dataProcessor(processor) {
    return (target, _key) => {
        defineKey(target, '__DataProcessor', {
            get() { return processor; }
        });
    };
}
function layoutProcessor(processor) {
    return (target, _key) => {
        defineKey(target, '__LayoutProcessor', {
            get() { return processor; }
        });
    };
}
function getSetMethodName(key) {
    return 'set' + key.charAt(0).toUpperCase() + key.slice(1);
}
function setDefaultValue(target, key, defaultValue) {
    defineDataProcessor(target.prototype, key, defaultValue);
}
function defineDataProcessor(target, key, defaultValue) {
    const data = target.__DataProcessor.prototype;
    const computedKey = '_' + key;
    const setMethodName = getSetMethodName(key);
    const property = {
        get() {
            const v = this[computedKey];
            return v === undefined ? defaultValue : v;
        },
        set(value) {
            this[computedKey] = value;
        },
        configurable: true,
        enumerable: true
    };
    if (defaultValue === undefined) {
        property.get = function () { return this[computedKey]; };
    }
    else if (key === 'width') {
        property.get = function () {
            const v = this[computedKey];
            return v === undefined ? (this.__naturalWidth || defaultValue) : v;
        };
    }
    else if (key === 'height') {
        property.get = function () {
            const v = this[computedKey];
            return v === undefined ? (this.__naturalHeight || defaultValue) : v;
        };
    }
    const descriptor = getDescriptor(data, key);
    if (descriptor && descriptor.set)
        property.set = descriptor.set;
    if (data[setMethodName]) {
        property.set = data[setMethodName];
        delete data[setMethodName];
    }
    Object.defineProperty(data, key, property);
}

const debug$1 = new Debug('rewrite');
const list = [];
const excludeNames = ['destroy', 'constructor'];
function rewrite(method) {
    return (target, key) => {
        list.push({ name: target.constructor.name + '.' + key, run: () => { target[key] = method; } });
    };
}
function rewriteAble() {
    return (_target) => {
        doRewrite();
    };
}
function doRewrite(error) {
    if (list.length) {
        list.forEach(item => {
            if (error)
                debug$1.error(item.name, '需在Class上装饰@rewriteAble()');
            item.run();
        });
        list.length = 0;
    }
}
setTimeout(() => doRewrite(true));
function useModule(module, exclude) {
    return (target) => {
        const names = module.prototype ? getNames(module.prototype) : Object.keys(module);
        names.forEach(name => {
            if (!excludeNames.includes(name) && (!exclude || !exclude.includes(name))) {
                if (module.prototype) {
                    const d = getDescriptor(module.prototype, name);
                    if (d.writable)
                        target.prototype[name] = module.prototype[name];
                }
                else {
                    target.prototype[name] = module[name];
                }
            }
        });
    };
}

function registerUI() {
    return (target) => {
        UICreator.register(target);
    };
}
function registerUIEvent() {
    return (target) => {
        EventCreator.register(target);
    };
}

exports.PointerEvent = class PointerEvent extends UIEvent {
};
exports.PointerEvent.POINTER = 'pointer';
exports.PointerEvent.BEFORE_DOWN = 'pointer.before_down';
exports.PointerEvent.BEFORE_MOVE = 'pointer.before_move';
exports.PointerEvent.BEFORE_UP = 'pointer.before_up';
exports.PointerEvent.DOWN = 'pointer.down';
exports.PointerEvent.MOVE = 'pointer.move';
exports.PointerEvent.UP = 'pointer.up';
exports.PointerEvent.OVER = 'pointer.over';
exports.PointerEvent.OUT = 'pointer.out';
exports.PointerEvent.ENTER = 'pointer.enter';
exports.PointerEvent.LEAVE = 'pointer.leave';
exports.PointerEvent.TAP = 'tap';
exports.PointerEvent.DOUBLE_TAP = 'double_tap';
exports.PointerEvent.CLICK = 'click';
exports.PointerEvent.DOUBLE_CLICK = 'double_click';
exports.PointerEvent.LONG_PRESS = 'long_press';
exports.PointerEvent.LONG_TAP = 'long_tap';
exports.PointerEvent = __decorate([
    registerUIEvent()
], exports.PointerEvent);

const move = {};
exports.DragEvent = class DragEvent extends exports.PointerEvent {
    getInnerMove(target, total) {
        if (!target)
            target = this.current;
        this.assignMove(total);
        return target.getInnerPoint(move, null, true);
    }
    getLocalMove(target, total) {
        if (!target)
            target = this.current;
        this.assignMove(total);
        return target.getLocalPoint(move, null, true);
    }
    getInnerTotal(target) {
        return this.getInnerMove(target, true);
    }
    getLocalTotal(target) {
        return this.getLocalMove(target, true);
    }
    assignMove(total) {
        move.x = total ? this.totalX : this.moveX;
        move.y = total ? this.totalY : this.moveY;
    }
};
exports.DragEvent.BEFORE_DRAG = 'drag.before_drag';
exports.DragEvent.START = 'drag.start';
exports.DragEvent.DRAG = 'drag';
exports.DragEvent.END = 'drag.end';
exports.DragEvent.OVER = 'drag.over';
exports.DragEvent.OUT = 'drag.out';
exports.DragEvent.ENTER = 'drag.enter';
exports.DragEvent.LEAVE = 'drag.leave';
exports.DragEvent = __decorate([
    registerUIEvent()
], exports.DragEvent);

var DropEvent_1;
exports.DropEvent = DropEvent_1 = class DropEvent extends exports.PointerEvent {
    static setList(data) {
        DropEvent_1.dragList = data instanceof LeafList ? data : new LeafList(data);
    }
    static setData(data) {
        this.dragData = data;
    }
};
exports.DropEvent.DROP = 'drop';
exports.DropEvent = DropEvent_1 = __decorate([
    registerUIEvent()
], exports.DropEvent);

exports.MoveEvent = class MoveEvent extends exports.DragEvent {
};
exports.MoveEvent.BEFORE_MOVE = 'move.before_move';
exports.MoveEvent.START = 'move.start';
exports.MoveEvent.MOVE = 'move';
exports.MoveEvent.END = 'move.end';
exports.MoveEvent = __decorate([
    registerUIEvent()
], exports.MoveEvent);

exports.RotateEvent = class RotateEvent extends UIEvent {
};
exports.RotateEvent.BEFORE_ROTATE = 'rotate.before_rotate';
exports.RotateEvent.START = 'rotate.start';
exports.RotateEvent.ROTATE = 'rotate';
exports.RotateEvent.END = 'rotate.end';
exports.RotateEvent = __decorate([
    registerUIEvent()
], exports.RotateEvent);

exports.SwipeEvent = class SwipeEvent extends exports.DragEvent {
};
exports.SwipeEvent.SWIPE = 'swipe';
exports.SwipeEvent.LEFT = 'swipe.left';
exports.SwipeEvent.RIGHT = 'swipe.right';
exports.SwipeEvent.UP = 'swipe.up';
exports.SwipeEvent.DOWN = 'swipe.down';
exports.SwipeEvent = __decorate([
    registerUIEvent()
], exports.SwipeEvent);

exports.ZoomEvent = class ZoomEvent extends UIEvent {
};
exports.ZoomEvent.BEFORE_ZOOM = 'zoom.before_zoom';
exports.ZoomEvent.START = 'zoom.start';
exports.ZoomEvent.ZOOM = 'zoom';
exports.ZoomEvent.END = 'zoom.end';
exports.ZoomEvent = __decorate([
    registerUIEvent()
], exports.ZoomEvent);

exports.KeyEvent = class KeyEvent extends UIEvent {
};
exports.KeyEvent.DOWN = 'key.down';
exports.KeyEvent.HOLD = 'key.hold';
exports.KeyEvent.UP = 'key.up';
exports.KeyEvent = __decorate([
    registerUIEvent()
], exports.KeyEvent);

class Transformer {
    constructor(interaction) {
        this.interaction = interaction;
    }
    move(data) {
        const { interaction } = this;
        if (!this.moveData) {
            const { path } = interaction.selector.getByPoint(data, interaction.hitRadius);
            data.path = path;
            this.moveData = Object.assign(Object.assign({}, data), { moveX: 0, moveY: 0 });
            interaction.emit(exports.MoveEvent.START, this.moveData);
        }
        data.path = this.moveData.path;
        interaction.emit(exports.MoveEvent.BEFORE_MOVE, data);
        interaction.emit(exports.MoveEvent.MOVE, data);
        this.transformEndWait();
    }
    zoom(data) {
        const { interaction } = this;
        if (!this.zoomData) {
            const { path } = interaction.selector.getByPoint(data, interaction.hitRadius);
            data.path = path;
            this.zoomData = Object.assign(Object.assign({}, data), { scale: 1 });
            interaction.emit(exports.ZoomEvent.START, this.zoomData);
        }
        data.path = this.zoomData.path;
        interaction.emit(exports.ZoomEvent.BEFORE_ZOOM, data);
        interaction.emit(exports.ZoomEvent.ZOOM, data);
        this.transformEndWait();
    }
    rotate(data) {
        const { interaction } = this;
        if (!this.rotateData) {
            const { path } = interaction.selector.getByPoint(data, interaction.hitRadius);
            data.path = path;
            this.rotateData = Object.assign(Object.assign({}, data), { rotation: 0 });
            interaction.emit(exports.RotateEvent.START, this.rotateData);
        }
        data.path = this.rotateData.path;
        interaction.emit(exports.RotateEvent.BEFORE_ROTATE, data);
        interaction.emit(exports.RotateEvent.ROTATE, data);
        this.transformEndWait();
    }
    transformEndWait() {
        clearTimeout(this.transformTimer);
        this.transformTimer = setTimeout(() => {
            this.transformEnd();
        }, this.interaction.config.pointer.transformTime);
    }
    transformEnd() {
        this.moveEnd();
        this.zoomEnd();
        this.rotateEnd();
        this.transformMode = null;
    }
    moveEnd() {
        if (this.moveData) {
            this.interaction.emit(exports.MoveEvent.END, this.moveData);
            this.moveData = null;
        }
    }
    zoomEnd() {
        if (this.zoomData) {
            this.interaction.emit(exports.ZoomEvent.END, this.zoomData);
            this.zoomData = null;
        }
    }
    rotateEnd() {
        if (this.rotateData) {
            this.interaction.emit(exports.RotateEvent.END, this.rotateData);
            this.rotateData = null;
        }
    }
    destroy() {
        this.zoomData = this.moveData = this.rotateData = null;
    }
}

const { copy: copy$2, translate, toInnerPoint: toInnerPoint$1, scaleOfOuter, rotateOfOuter, skewOfOuter } = MatrixHelper;
const matrix = {};
const LeafHelper = {
    updateAllWorldMatrix(leaf) {
        leaf.__updateWorldMatrix();
        if (leaf.isBranch) {
            const { children } = leaf;
            for (let i = 0, len = children.length; i < len; i++) {
                updateAllWorldMatrix(children[i]);
            }
        }
    },
    updateAllWorldOpacity(leaf) {
        leaf.__updateWorldOpacity();
        if (leaf.isBranch) {
            const { children } = leaf;
            for (let i = 0, len = children.length; i < len; i++) {
                updateAllWorldOpacity(children[i]);
            }
        }
    },
    updateAllChange(leaf) {
        updateAllWorldOpacity(leaf);
        leaf.__updateChange();
        if (leaf.isBranch) {
            const { children } = leaf;
            for (let i = 0, len = children.length; i < len; i++) {
                updateAllChange(children[i]);
            }
        }
    },
    worldHittable(t) {
        if (!t.__.hittable)
            return false;
        let { parent } = t;
        while (parent) {
            if (!parent.__.hittable || !parent.__.hitChildren)
                return false;
            parent = parent.parent;
        }
        return true;
    },
    moveWorld(t, x, y) {
        t.__layout.checkUpdate();
        const local = { x, y };
        if (t.parent)
            toInnerPoint$1(t.parent.__world, local, local, true);
        L.moveLocal(t, local.x, local.y);
    },
    moveLocal(t, x, y = 0) {
        t.x += x;
        t.y += y;
    },
    zoomOfWorld(t, origin, scaleX, scaleY, moveLayer) {
        t.__layout.checkUpdate();
        const local = t.parent ? PointHelper.tempToInnerOf(origin, t.parent.__world) : origin;
        this.zoomOfLocal(t, local, scaleX, scaleY, moveLayer);
    },
    zoomOfLocal(t, origin, scaleX, scaleY = scaleX, moveLayer) {
        copy$2(matrix, t.__local);
        if (moveLayer)
            translate(matrix, moveLayer.x, moveLayer.y);
        scaleOfOuter(matrix, origin, scaleX, scaleY);
        if (!moveLayer)
            moveLayer = t;
        moveLayer.x += matrix.e - t.__local.e;
        moveLayer.y += matrix.f - t.__local.f;
        t.scaleX *= scaleX;
        t.scaleY *= scaleY;
    },
    rotateOfWorld(t, origin, angle, moveLayer) {
        t.__layout.checkUpdate();
        const local = t.parent ? PointHelper.tempToInnerOf(origin, t.parent.__world) : origin;
        this.rotateOfLocal(t, local, angle, moveLayer);
    },
    rotateOfLocal(t, origin, angle, moveLayer) {
        copy$2(matrix, t.__local);
        if (moveLayer)
            translate(matrix, moveLayer.x, moveLayer.y);
        rotateOfOuter(matrix, origin, angle);
        if (!moveLayer)
            moveLayer = t;
        moveLayer.x += matrix.e - t.__local.e;
        moveLayer.y += matrix.f - t.__local.f;
        t.rotation = MathHelper.formatRotation(t.rotation + angle);
    },
    skewOfWorld(t, origin, skewX, skewY, moveLayer) {
        t.__layout.checkUpdate();
        const local = t.parent ? PointHelper.tempToInnerOf(origin, t.parent.__world) : origin;
        this.skewOfLocal(t, local, skewX, skewY, moveLayer);
    },
    skewOfLocal(t, origin, skewX, skewY, moveLayer) {
        copy$2(matrix, t.__local);
        if (moveLayer)
            translate(matrix, moveLayer.x, moveLayer.y);
        skewOfOuter(matrix, origin, skewX, skewY);
        if (!moveLayer)
            moveLayer = t;
        moveLayer.x = matrix.e - t.__local.e;
        moveLayer.y = matrix.f - t.__local.f;
        t.skewX = MathHelper.formatSkew(t.skewX + skewX);
        t.skewY = MathHelper.formatSkew(t.skewY + skewY);
    },
    drop(t, parent) {
        const position = { x: t.x, y: t.y };
        t.localToWorld(position);
        parent.worldToInner(position);
        t.set(position);
        parent.add(t);
    }
};
const L = LeafHelper;
const { updateAllWorldMatrix, updateAllWorldOpacity, updateAllChange } = L;

const LeafBoundsHelper = {
    worldBounds(target) {
        return target.__world;
    },
    localBoxBounds(target) {
        return target.__.isEraser ? null : target.__local;
    },
    localEventBounds(target) {
        return target.__.isEraser ? null : target.__layout.localStrokeBounds;
    },
    localRenderBounds(target) {
        return target.__.isEraser ? null : target.__layout.localRenderBounds;
    },
    maskLocalBoxBounds(target) {
        return target.__.isMask ? target.__local : null;
    },
    maskLocalEventBounds(target) {
        return target.__.isMask ? target.__layout.localStrokeBounds : null;
    },
    maskLocalRenderBounds(target) {
        return target.__.isMask ? target.__layout.localRenderBounds : null;
    }
};

const BranchHelper = {
    sort(a, b) {
        return (a.__.zIndex === b.__.zIndex) ? (a.__tempNumber - b.__tempNumber) : (a.__.zIndex - b.__.zIndex);
    },
    pushAllChildBranch(branch, pushList) {
        branch.__tempNumber = 1;
        if (branch.__.__childBranchNumber) {
            const { children } = branch;
            for (let i = 0, len = children.length; i < len; i++) {
                branch = children[i];
                if (branch.isBranch) {
                    branch.__tempNumber = 1;
                    pushList.push(branch);
                    pushAllChildBranch(branch, pushList);
                }
            }
        }
    },
    pushAllParent(leaf, pushList) {
        const { keys } = pushList;
        if (keys) {
            while (leaf.parent) {
                if (keys[leaf.parent.innerId] === undefined) {
                    pushList.push(leaf.parent);
                    leaf = leaf.parent;
                }
                else {
                    break;
                }
            }
        }
        else {
            while (leaf.parent) {
                pushList.push(leaf.parent);
                leaf = leaf.parent;
            }
        }
    },
    pushAllBranchStack(branch, pushList) {
        let start = pushList.length;
        const { children } = branch;
        for (let i = 0, len = children.length; i < len; i++) {
            if (children[i].isBranch) {
                pushList.push(children[i]);
            }
        }
        for (let i = start, len = pushList.length; i < len; i++) {
            pushAllBranchStack(pushList[i], pushList);
        }
    },
    updateWorldBoundsByBranchStack(branchStack) {
        let branch;
        for (let i = branchStack.length - 1; i > -1; i--) {
            branch = branchStack[i];
            for (let j = 0, len = branch.children.length; j < len; j++) {
                branch.children[j].__updateWorldBounds();
            }
        }
        branch.__updateWorldBounds();
    }
};
const { pushAllChildBranch, pushAllBranchStack } = BranchHelper;

const WaitHelper = {
    run(wait) {
        for (let i = 0, len = wait.length; i < len; i++) {
            wait[i]();
        }
        wait.length = 0;
    }
};

const InteractionHelper = {
    getMoveEventData(center, move, event) {
        return Object.assign(Object.assign({}, event), { x: center.x, y: center.y, moveX: move.x, moveY: move.y });
    },
    getRotateEventData(center, angle, event) {
        return Object.assign(Object.assign({}, event), { x: center.x, y: center.y, rotation: angle });
    },
    getZoomEventData(center, scale, event) {
        return Object.assign(Object.assign({}, event), { x: center.x, y: center.y, scale });
    },
    getDragEventData(startPoint, lastPoint, event) {
        return Object.assign(Object.assign({}, event), { x: event.x, y: event.y, moveX: event.x - lastPoint.x, moveY: event.y - lastPoint.y, totalX: event.x - startPoint.x, totalY: event.y - startPoint.y });
    },
    getDropEventData(event, list, data) {
        return Object.assign(Object.assign({}, event), { list,
            data });
    },
    getSwipeDirection(angle) {
        if (angle < -45 && angle > -135) {
            return exports.SwipeEvent.UP;
        }
        else if (angle > 45 && angle < 135) {
            return exports.SwipeEvent.DOWN;
        }
        else if (angle <= 45 && angle >= -45) {
            return exports.SwipeEvent.RIGHT;
        }
        else {
            return exports.SwipeEvent.LEFT;
        }
    },
    getSwipeEventData(startPoint, lastDragData, event) {
        return Object.assign(Object.assign({}, event), { moveX: lastDragData.moveX, moveY: lastDragData.moveY, totalX: event.x - startPoint.x, totalY: event.y - startPoint.y, type: I.getSwipeDirection(PointHelper.getAngle(startPoint, event)) });
    },
    getBase(e) {
        return {
            altKey: e.altKey,
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey,
            metaKey: e.metaKey,
            buttons: e.buttons === undefined ? 1 : e.buttons,
            origin: e
        };
    },
    pathHasEventType(path, type) {
        const { list } = path;
        for (let i = 0, len = list.length; i < len; i++) {
            if (list[i].hasEvent(type))
                return true;
        }
        return false;
    },
    filterPathByEventType(path, type) {
        const find = new LeafList();
        const { list } = path;
        for (let i = 0, len = list.length; i < len; i++) {
            if (list[i].hasEvent(type))
                find.push(list[i]);
        }
        return find;
    }
};
const I = InteractionHelper;

const { getDragEventData, getDropEventData, getSwipeEventData, filterPathByEventType } = InteractionHelper;
class Dragger {
    constructor(interaction) {
        this.interaction = interaction;
    }
    setDragData(data) {
        this.dragData = getDragEventData(data, data, data);
    }
    getDragList() {
        return this.dragging ? exports.DropEvent.dragList || this.dragList : null;
    }
    checkDrag(data, canDrag) {
        const { interaction } = this;
        const { downData } = interaction;
        if (this.moving && !(PointerButton.middle(data) || PointerButton.left(data))) {
            interaction.pointerCancel();
            return;
        }
        const { dragData } = this;
        if (!this.moving) {
            const moveOnDragEmpty = interaction.config.move.dragEmpty && downData.target.isLeafer;
            this.moving = (PointerButton.middle(data) || interaction.moveMode || moveOnDragEmpty) && canDrag;
            if (this.moving)
                interaction.emit(exports.MoveEvent.START, dragData);
        }
        if (!this.moving) {
            this.dragStart(data, canDrag);
        }
        const { path, throughPath } = downData;
        this.dragData = getDragEventData(downData, dragData, data);
        if (throughPath)
            this.dragData.throughPath = throughPath;
        this.dragData.path = path;
        if (this.moving) {
            interaction.emit(exports.MoveEvent.BEFORE_MOVE, this.dragData);
            interaction.emit(exports.MoveEvent.MOVE, this.dragData);
        }
        else if (this.dragging) {
            this.dragDragableList();
            interaction.emit(exports.DragEvent.BEFORE_DRAG, this.dragData);
            interaction.emit(exports.DragEvent.DRAG, this.dragData);
        }
    }
    dragStart(data, canDrag) {
        if (!this.dragging) {
            this.dragging = PointerButton.left(data) && canDrag;
            if (this.dragging) {
                this.interaction.emit(exports.DragEvent.START, this.dragData);
                this.getDragableList(this.dragData.path);
                this.dragList = filterPathByEventType(this.dragData.path, exports.DragEvent.DRAG);
                if (!this.dragList.length && this.dragableList)
                    this.dragList.pushList(this.dragableList);
            }
        }
    }
    getDragableList(path) {
        let leaf;
        for (let i = 0, len = path.length; i < len; i++) {
            leaf = path.list[i];
            if (leaf.__.draggable && leaf.__.hitSelf) {
                this.dragableList = [leaf];
                break;
            }
        }
    }
    dragDragableList() {
        const { running } = this.interaction;
        if (this.dragableList && running) {
            const { moveX, moveY } = this.dragData;
            this.dragableList.forEach(leaf => {
                LeafHelper.moveWorld(leaf, moveX, moveY);
            });
        }
    }
    dragOverOrOut(data) {
        const { interaction } = this;
        const { dragOverPath } = this;
        const { path } = data;
        if (dragOverPath) {
            if (path.indexAt(0) !== dragOverPath.indexAt(0)) {
                interaction.emit(exports.DragEvent.OUT, data, dragOverPath);
                interaction.emit(exports.DragEvent.OVER, data, path);
            }
        }
        else {
            interaction.emit(exports.DragEvent.OVER, data, path);
        }
        this.dragOverPath = path;
    }
    dragEnterOrLeave(data) {
        const { interaction } = this;
        const { dragEnterPath } = this;
        const { path } = data;
        interaction.emit(exports.DragEvent.LEAVE, data, dragEnterPath, path);
        interaction.emit(exports.DragEvent.ENTER, data, path, dragEnterPath);
        this.dragEnterPath = path;
    }
    dragEnd(data) {
        const { interaction } = this;
        const { downData } = interaction;
        if (!downData)
            return;
        const { path, throughPath } = downData;
        const endDragData = getDragEventData(downData, data, data);
        if (throughPath)
            endDragData.throughPath = throughPath;
        endDragData.path = path;
        if (this.moving)
            interaction.emit(exports.MoveEvent.END, endDragData);
        if (this.dragging) {
            interaction.emit(exports.DragEvent.END, endDragData);
            this.swipe(data, endDragData);
            this.drop(data);
        }
        this.autoMoveCancel();
        this.dragReset();
    }
    swipe(data, endDragData) {
        const { interaction } = this;
        const { downData } = interaction;
        if (PointHelper.getDistance(downData, data) > interaction.config.pointer.swipeDistance) {
            const swipeData = getSwipeEventData(downData, this.dragData, endDragData);
            this.interaction.emit(swipeData.type, swipeData);
        }
    }
    drop(data) {
        const dropData = getDropEventData(data, this.getDragList(), exports.DropEvent.dragData);
        dropData.path = this.dragEnterPath;
        this.interaction.emit(exports.DropEvent.DROP, dropData);
        this.interaction.emit(exports.DragEvent.LEAVE, data, this.dragEnterPath);
    }
    dragReset() {
        exports.DropEvent.dragList = null;
        this.dragList = null;
        this.dragableList = null;
        this.dragData = null;
        this.dragOverPath = null;
        this.dragEnterPath = null;
        this.dragging = null;
        this.moving = null;
    }
    checkDragOut(data) {
        const { interaction } = this;
        this.autoMoveCancel();
        if (this.dragging && !interaction.shrinkCanvasBounds.hitPoint(data))
            this.autoMoveOnDragOut(data);
    }
    autoMoveOnDragOut(data) {
        const { interaction } = this;
        const { downData } = interaction;
        const { autoDistance, dragOut } = interaction.config.move;
        if (!dragOut || !autoDistance)
            return;
        const bounds = interaction.shrinkCanvasBounds;
        const { x, y } = bounds;
        const right = BoundsHelper.right(bounds);
        const bottom = BoundsHelper.bottom(bounds);
        const moveX = data.x < x ? autoDistance : (right < data.x ? -autoDistance : 0);
        const moveY = data.y < y ? autoDistance : (bottom < data.y ? -autoDistance : 0);
        let totalX = 0, totalY = 0;
        this.autoMoveTimer = setInterval(() => {
            totalX += moveX;
            totalY += moveY;
            PointHelper.move(downData, moveX, moveY);
            PointHelper.move(this.dragData, moveX, moveY);
            interaction.move(Object.assign(Object.assign({}, data), { moveX, moveY, totalX, totalY }));
            interaction.pointerMoveReal(data);
        }, 10);
    }
    autoMoveCancel() {
        if (this.autoMoveTimer) {
            clearInterval(this.autoMoveTimer);
            this.autoMoveTimer = 0;
        }
    }
    destroy() {
        this.dragReset();
    }
}

function emit(type, data, path, excludePath) {
    if (!path && !data.path)
        return;
    let leaf;
    data.type = type;
    if (path) {
        data = Object.assign(Object.assign({}, data), { path });
    }
    else {
        path = data.path;
    }
    data.target = path.indexAt(0);
    for (let i = path.length - 1; i > -1; i--) {
        leaf = path.list[i];
        if (emitEvent(leaf, type, data, true, excludePath))
            return;
        if (leaf.isApp)
            emitAppChildren(leaf, type, data, true, excludePath);
    }
    for (let i = 0, len = path.length; i < len; i++) {
        leaf = path.list[i];
        if (leaf.isApp)
            emitAppChildren(leaf, type, data, false, excludePath);
        if (emitEvent(leaf, type, data, false, excludePath))
            return;
    }
}
const allowTypes = ['move', 'zoom', 'rotate', 'key'];
function emitAppChildren(leaf, type, data, capture, excludePath) {
    if (allowTypes.some(name => type.startsWith(name)) && leaf.__.hitChildren && !exclude(leaf, excludePath)) {
        let child;
        for (let i = 0, len = leaf.children.length; i < len; i++) {
            child = leaf.children[i];
            if (!data.path.has(child) && child.__.hittable)
                emitEvent(child, type, data, capture, excludePath);
        }
    }
}
function emitEvent(leaf, type, data, capture, excludePath) {
    if (leaf.destroyed)
        return true;
    if (leaf.__.hitSelf && leaf.hasEvent(type, capture) && !exclude(leaf, excludePath)) {
        data.phase = capture ? 1 : ((leaf === data.target) ? 2 : 3);
        const event = EventCreator.get(type, data);
        leaf.emitEvent(event, capture);
        if (event.isStop)
            return true;
    }
    return false;
}
function exclude(leaf, excludePath) {
    return excludePath && excludePath.has(leaf);
}

const MultiTouchHelper = {
    getData(list) {
        const a = list[0];
        const b = list[1];
        const lastCenter = PointHelper.getCenter(a.from, b.from);
        const center = PointHelper.getCenter(a.to, b.to);
        const move = { x: center.x - lastCenter.x, y: center.y - lastCenter.y };
        const lastDistance = PointHelper.getDistance(a.from, b.from);
        const distance = PointHelper.getDistance(a.to, b.to);
        const scale = distance / lastDistance;
        const angle = PointHelper.getChangeAngle(a.from, b.from, a.to, b.to);
        return { move, scale, angle, center };
    }
};

const { pathHasEventType, getMoveEventData, getZoomEventData, getRotateEventData } = InteractionHelper;
class InteractionBase {
    get dragging() { return this.dragger.dragging; }
    get moveMode() { return (Keyboard.isHoldSpaceKey() && this.config.move.holdSpaceKey) || (this.downData && PointerButton.middle(this.downData)); }
    get hitRadius() { return this.config.pointer.hitRadius; }
    constructor(target, canvas, selector, userConfig) {
        this.config = {
            wheel: {
                zoomMode: false,
                zoomSpeed: 0.5,
                moveSpeed: 0.5,
                rotateSpeed: 0.5,
                delta: Platform.os === 'Windows' ? { x: 150 / 4, y: 150 / 4 } : { x: 80 / 4, y: 8.0 },
                preventDefault: true
            },
            pointer: {
                hitRadius: 5,
                through: false,
                tapTime: 120,
                longPressTime: 800,
                transformTime: 500,
                dragHover: true,
                dragDistance: 2,
                swipeDistance: 20,
                ignoreMove: false
            },
            cursor: {}
        };
        this.tapCount = 0;
        this.downKeyMap = {};
        this.target = target;
        this.canvas = canvas;
        this.selector = selector;
        this.defaultPath = new LeafList(target);
        this.transformer = new Transformer(this);
        this.dragger = new Dragger(this);
        if (userConfig)
            this.config = DataHelper.default(userConfig, this.config);
        this.__listenEvents();
    }
    start() {
        this.running = true;
    }
    stop() {
        this.running = false;
    }
    receive(_event) { }
    pointerDown(data, useDefaultPath) {
        if (!data)
            data = this.hoverData;
        if (!data)
            return;
        PointerButton.defaultLeft(data);
        this.emit(exports.PointerEvent.BEFORE_DOWN, data, this.defaultPath);
        this.updateDownData(data);
        if (useDefaultPath)
            data.path = this.defaultPath;
        this.emit(exports.PointerEvent.DOWN, data);
        this.downTime = Date.now();
        this.dragger.setDragData(data);
        if (PointerButton.left(data)) {
            this.tapWait();
            this.longPressWait(data);
        }
        this.updateCursor(data);
    }
    pointerMove(data) {
        if (!data)
            data = this.hoverData;
        if (!data)
            return;
        if (this.downData)
            PointerButton.defaultLeft(data);
        const hit = this.canvas.bounds.hitPoint(data);
        if (hit || this.downData) {
            if (hit && !this.downData && PointerButton.left(data))
                this.pointerDown(data, true);
            this.pointerMoveReal(data);
            this.dragger.checkDragOut(data);
        }
    }
    pointerMoveReal(data) {
        this.emit(exports.PointerEvent.BEFORE_MOVE, data, this.defaultPath);
        if (this.downData) {
            const canDrag = PointHelper.getDistance(this.downData, data) > this.config.pointer.dragDistance;
            if (this.waitTap && canDrag)
                this.pointerWaitCancel();
            this.dragger.checkDrag(data, canDrag);
        }
        if (this.dragger.moving || this.config.pointer.ignoreMove)
            return;
        this.updateHoverData(data);
        this.emit(exports.PointerEvent.MOVE, data);
        this.pointerOverOrOut(data);
        this.pointerEnterOrLeave(data);
        if (this.dragger.dragging) {
            this.dragger.dragOverOrOut(data);
            this.dragger.dragEnterOrLeave(data);
        }
        this.updateCursor(data);
    }
    pointerUp(data) {
        if (!data)
            data = this.downData;
        if (!this.downData)
            return;
        PointerButton.defaultLeft(data);
        this.emit(exports.PointerEvent.BEFORE_UP, data, this.defaultPath);
        this.findPath(data);
        this.emit(exports.PointerEvent.UP, data);
        this.emit(exports.PointerEvent.UP, this.downData, undefined, data.path);
        this.touchLeave(data);
        this.tap(data);
        this.dragger.dragEnd(data);
        this.downData = null;
        this.updateCursor(data);
    }
    pointerCancel() {
        this.pointerUp(this.dragger.dragData);
    }
    multiTouch(data, list) {
        const { move, angle, scale, center } = MultiTouchHelper.getData(list);
        this.rotate(getRotateEventData(center, angle, data));
        this.zoom(getZoomEventData(center, scale, data));
        this.move(getMoveEventData(center, move, data));
    }
    move(data) {
        this.transformer.move(data);
    }
    zoom(data) {
        this.transformer.zoom(data);
    }
    rotate(data) {
        this.transformer.rotate(data);
    }
    transformEnd() {
        this.transformer.transformEnd();
    }
    keyDown(data) {
        const { code } = data;
        if (!this.downKeyMap[code]) {
            this.downKeyMap[code] = true;
            Keyboard.setDownCode(code);
            this.emit(exports.KeyEvent.HOLD, data, this.defaultPath);
            if (this.moveMode)
                this.updateCursor();
        }
        this.emit(exports.KeyEvent.DOWN, data, this.defaultPath);
    }
    keyUp(data) {
        const { code } = data;
        this.downKeyMap[code] = false;
        Keyboard.setUpCode(code);
        this.emit(exports.KeyEvent.UP, data, this.defaultPath);
        if (this.cursor === 'grab')
            this.updateCursor();
    }
    pointerOverOrOut(data) {
        if (this.dragger.moving)
            return;
        if (this.dragging && !this.config.pointer.dragHover)
            return;
        const { path } = data;
        if (this.overPath) {
            if (path.indexAt(0) !== this.overPath.indexAt(0)) {
                this.emit(exports.PointerEvent.OUT, data, this.overPath);
                this.emit(exports.PointerEvent.OVER, data, path);
            }
        }
        else {
            this.emit(exports.PointerEvent.OVER, data, path);
        }
        this.overPath = path;
    }
    pointerEnterOrLeave(data) {
        if (this.dragger.moving)
            return;
        if (this.dragging && !this.config.pointer.dragHover)
            return;
        const { path } = data;
        this.emit(exports.PointerEvent.LEAVE, data, this.enterPath, path);
        this.emit(exports.PointerEvent.ENTER, data, path, this.enterPath);
        this.enterPath = path;
    }
    touchLeave(data) {
        if (data.pointerType === 'touch') {
            if (this.enterPath) {
                this.emit(exports.PointerEvent.LEAVE, data);
                if (this.dragger.dragging)
                    this.emit(exports.DropEvent.LEAVE, data);
            }
        }
    }
    tap(data) {
        const { pointer } = this.config;
        const longTap = this.longTap(data);
        if (!pointer.tapMore && longTap)
            return;
        if (!this.waitTap)
            return;
        if (pointer.tapMore)
            this.emitTap(data);
        const useTime = Date.now() - this.downTime;
        const hasDouble = [exports.PointerEvent.DOUBLE_TAP, exports.PointerEvent.DOUBLE_CLICK].some(type => pathHasEventType(data.path, type));
        if (useTime < pointer.tapTime + 50 && hasDouble) {
            this.tapCount++;
            if (this.tapCount === 2) {
                this.tapWaitCancel();
                this.emitDoubleTap(data);
            }
            else {
                clearTimeout(this.tapTimer);
                this.tapTimer = setTimeout(() => {
                    if (!pointer.tapMore) {
                        this.tapWaitCancel();
                        this.emitTap(data);
                    }
                }, pointer.tapTime);
            }
        }
        else {
            if (!pointer.tapMore) {
                this.tapWaitCancel();
                this.emitTap(data);
            }
        }
    }
    findPath(data, options) {
        const { hitRadius, through } = this.config.pointer;
        const find = this.selector.getByPoint(data, hitRadius, options || { through });
        if (find.throughPath)
            data.throughPath = find.throughPath;
        data.path = find.path;
        return find.path;
    }
    updateDownData(data) {
        if (!data)
            data = this.downData;
        if (!data)
            return;
        this.findPath(data);
        this.downData = data;
    }
    updateHoverData(data) {
        if (!data)
            data = this.hoverData;
        if (!data)
            return;
        this.findPath(data, { exclude: this.dragger.getDragList(), name: exports.PointerEvent.MOVE });
        this.hoverData = data;
    }
    updateCursor(data) {
        if (this.config.cursor.stop)
            return;
        if (!data) {
            this.updateHoverData();
            data = this.hoverData;
        }
        if (this.dragger.moving) {
            return this.setCursor('grabbing');
        }
        else if (this.moveMode) {
            return this.setCursor(this.downData ? 'grabbing' : 'grab');
        }
        else if (!data || this.dragger.dragging)
            return;
        let leaf;
        let cursor;
        const { path } = data;
        for (let i = 0, len = path.length; i < len; i++) {
            leaf = path.list[i];
            cursor = leaf.cursor;
            if (cursor)
                break;
        }
        this.setCursor(cursor);
    }
    setCursor(cursor) {
        this.cursor = cursor;
        this.canvas.setCursor(cursor);
    }
    emitTap(data) {
        this.emit(exports.PointerEvent.TAP, data);
        this.emit(exports.PointerEvent.CLICK, data);
    }
    emitDoubleTap(data) {
        this.emit(exports.PointerEvent.DOUBLE_TAP, data);
        this.emit(exports.PointerEvent.DOUBLE_CLICK, data);
    }
    pointerWaitCancel() {
        this.tapWaitCancel();
        this.longPressWaitCancel();
    }
    tapWait() {
        clearTimeout(this.tapTimer);
        this.waitTap = true;
    }
    tapWaitCancel() {
        clearTimeout(this.tapTimer);
        this.waitTap = false;
        this.tapCount = 0;
    }
    longPressWait(data) {
        clearTimeout(this.longPressTimer);
        this.longPressTimer = setTimeout(() => {
            this.longPressed = true;
            this.emit(exports.PointerEvent.LONG_PRESS, data);
        }, this.config.pointer.longPressTime);
    }
    longTap(data) {
        let longTap;
        if (this.longPressed) {
            this.emit(exports.PointerEvent.LONG_TAP, data);
            if (pathHasEventType(data.path, exports.PointerEvent.LONG_TAP))
                longTap = true;
        }
        this.longPressWaitCancel();
        return longTap;
    }
    longPressWaitCancel() {
        clearTimeout(this.longPressTimer);
        this.longPressed = false;
    }
    __onResize() {
        this.shrinkCanvasBounds = new Bounds(this.canvas.bounds);
        this.shrinkCanvasBounds.spread(-2);
    }
    __listenEvents() {
        const { target } = this;
        this.__eventIds = [target.on_(ResizeEvent.RESIZE, this.__onResize, this)];
        target.once(LeaferEvent.READY, () => this.__onResize());
    }
    __removeListenEvents() {
        this.target.off_(this.__eventIds);
        this.__eventIds.length = 0;
    }
    emit(type, data, path, excludePath) {
        if (this.running)
            emit(type, data, path, excludePath);
    }
    destroy() {
        if (this.__eventIds.length) {
            this.stop();
            this.__removeListenEvents();
            this.dragger.destroy();
            this.transformer.destroy();
            this.downData = this.overPath = this.enterPath = null;
        }
    }
}

class Cursor {
    static set(name, value) {
        this.custom[name] = value;
    }
    static get(name) {
        return this.custom[name];
    }
}
Cursor.custom = {};

const { toOuterOf: toOuterOf$1 } = BoundsHelper;
class LeafLayout {
    constructor(leaf) {
        this.leaf = leaf;
        this.renderBounds = this.strokeBounds = this.boxBounds = { x: 0, y: 0, width: 0, height: 0 };
        this.localRenderBounds = this.localStrokeBounds = leaf.__local;
        this.boxChange();
        this.positionChange();
    }
    checkUpdate(force) {
        const { leafer } = this.leaf;
        if (leafer) {
            if (leafer.ready) {
                if ((Platform.realtimeLayout || force) && leafer.watcher.changed)
                    leafer.layouter.layout();
            }
            else {
                leafer.start();
            }
        }
        else {
            let root = this.leaf;
            while (root.parent) {
                root = root.parent;
            }
            Platform.layout(root);
        }
    }
    getTransform(locationType) {
        this.checkUpdate();
        return locationType === 'world' ? this.leaf.__world : this.leaf.__local;
    }
    getBounds(type, locationType) {
        this.checkUpdate();
        if (locationType === 'world') {
            switch (type) {
                case 'render':
                    return this.leaf.__world;
                case 'content':
                    if (this.contentBounds)
                        return this.getWorldContentBounds();
                case 'margin':
                case 'box':
                    return this.getWorldBoxBounds();
                case 'margin':
                case 'stroke':
                    return this.getWorldStrokeBounds();
            }
        }
        else if (locationType === 'inner') {
            switch (type) {
                case 'render':
                    return this.renderBounds;
                case 'content':
                    if (this.contentBounds)
                        return this.contentBounds;
                case 'margin':
                case 'box':
                    return this.boxBounds;
                case 'stroke':
                    return this.strokeBounds;
            }
        }
        else {
            switch (type) {
                case 'render':
                    return this.localRenderBounds;
                case 'margin':
                case 'content':
                case 'box':
                    return this.leaf.__local;
                case 'stroke':
                    return this.localStrokeBounds;
            }
        }
    }
    getWorldContentBounds() {
        this._worldContentBounds || (this._worldContentBounds = {});
        toOuterOf$1(this.contentBounds, this.leaf.__world, this._worldContentBounds);
        return this._worldContentBounds;
    }
    getWorldBoxBounds() {
        this._worldBoxBounds || (this._worldBoxBounds = {});
        toOuterOf$1(this.boxBounds, this.leaf.__world, this._worldBoxBounds);
        return this._worldBoxBounds;
    }
    getWorldStrokeBounds() {
        this._worldStrokeBounds || (this._worldStrokeBounds = {});
        toOuterOf$1(this.strokeBounds, this.leaf.__world, this._worldStrokeBounds);
        return this._worldStrokeBounds;
    }
    spreadStrokeCancel() {
        const same = this.renderBounds === this.strokeBounds;
        this.strokeBounds = this.boxBounds;
        this.localStrokeBounds = this.leaf.__local;
        if (same)
            this.spreadRenderCancel();
    }
    spreadRenderCancel() {
        this.renderBounds = this.strokeBounds;
        this.localRenderBounds = this.localStrokeBounds;
    }
    spreadStroke() {
        const { x, y, width, height } = this.strokeBounds;
        this.strokeBounds = { x, y, width, height };
        this.localStrokeBounds = { x, y, width, height };
        if (!this.renderSpread)
            this.spreadRenderCancel();
    }
    spreadRender() {
        const { x, y, width, height } = this.renderBounds;
        this.renderBounds = { x, y, width, height };
        this.localRenderBounds = { x, y, width, height };
    }
    boxChange() {
        this.boxChanged = true;
        this.localBoxChanged || this.localBoxChange();
        this.hitCanvasChanged = true;
    }
    localBoxChange() {
        this.localBoxChanged = true;
        this.boundsChanged = true;
    }
    strokeChange() {
        this.strokeChanged = true;
        this.strokeSpread || (this.strokeSpread = 1);
        this.boundsChanged = true;
        this.hitCanvasChanged = true;
    }
    renderChange() {
        this.renderChanged = true;
        this.renderSpread || (this.renderSpread = 1);
        this.boundsChanged = true;
    }
    positionChange() {
        this.positionChanged = true;
        this.matrixChanged = true;
        this.localBoxChanged || this.localBoxChange();
    }
    scaleChange() {
        this.scaleChanged = true;
        this._scaleOrRotationChange();
    }
    rotationChange() {
        this.rotationChanged = true;
        this.affectRotation = true;
        this._scaleOrRotationChange();
    }
    _scaleOrRotationChange() {
        this.affectScaleOrRotation = true;
        this.matrixChanged = true;
        this.localBoxChanged || this.localBoxChange();
    }
    surfaceChange() {
        this.surfaceChanged = true;
    }
    opacityChange() {
        this.opacityChanged = true;
        this.surfaceChanged || this.surfaceChange();
    }
    childrenSortChange() {
        if (!this.childrenSortChanged) {
            this.childrenSortChanged = true;
            this.leaf.forceUpdate('surface');
        }
    }
    destroy() { }
}

const empty = {};
const LeafEventer = {
    on(type, listener, options) {
        let capture, once;
        if (options) {
            if (typeof options === 'boolean') {
                capture = options;
            }
            else {
                capture = options.capture;
                once = options.once;
            }
        }
        let events;
        const map = __getListenerMap(this, capture, true);
        const typeList = typeof type === 'string' ? type.split(' ') : type;
        const item = once ? { listener, once } : { listener };
        typeList.forEach(type => {
            if (type) {
                events = map[type];
                if (events) {
                    if (events.findIndex(item => item.listener === listener) === -1)
                        events.push(item);
                }
                else {
                    map[type] = [item];
                }
            }
        });
    },
    off(type, listener, options) {
        let capture;
        if (options)
            capture = typeof options === 'boolean' ? options : options.capture;
        let events, index;
        const map = __getListenerMap(this, capture);
        const typeList = typeof type === 'string' ? type.split(' ') : type;
        typeList.forEach(type => {
            if (type) {
                events = map[type];
                if (events) {
                    index = events.findIndex(item => item.listener === listener);
                    if (index > -1)
                        events.splice(index, 1);
                    if (!events.length)
                        delete map[type];
                }
            }
        });
    },
    on_(type, listener, bind, options) {
        if (bind)
            listener = listener.bind(bind);
        this.on(type, listener, options);
        return { type, listener, options };
    },
    off_(id) {
        if (!id)
            return;
        const list = id instanceof Array ? id : [id];
        list.forEach(item => this.off(item.type, item.listener, item.options));
        list.length = 0;
    },
    once(type, listener, capture) {
        this.on(type, listener, { once: true, capture });
    },
    emit(type, event, capture) {
        if (!event && EventCreator.has(type))
            event = EventCreator.get(type, { type, target: this, current: this });
        const map = __getListenerMap(this, capture);
        const list = map[type];
        if (list) {
            let item;
            for (let i = 0, len = list.length; i < len; i++) {
                item = list[i];
                item.listener(event);
                if (item.once) {
                    this.off(type, item.listener, capture);
                    i--, len--;
                }
                if (event && event.isStopNow)
                    break;
            }
        }
    },
    emitEvent(event, capture) {
        event.current = this;
        this.emit(event.type, event, capture);
    },
    hasEvent(type, capture) {
        const { __bubbleMap: b, __captureMap: c } = this;
        if (capture === undefined) {
            return !!((c && c[type]) || (b && b[type]));
        }
        else {
            return !!(capture ? (c && c[type]) : (b && b[type]));
        }
    },
};
function __getListenerMap(eventer, capture, create) {
    if (capture) {
        const { __captureMap: c } = eventer;
        if (c) {
            return c;
        }
        else {
            return create ? eventer.__captureMap = {} : empty;
        }
    }
    else {
        const { __bubbleMap: b } = eventer;
        if (b) {
            return b;
        }
        else {
            return create ? eventer.__bubbleMap = {} : empty;
        }
    }
}

const LeafDataProxy = {
    __setAttr(name, newValue) {
        if (this.leafer && this.leafer.created) {
            if (typeof newValue === 'object' || this.__.__getInput(name) !== newValue) {
                this.__[name] = newValue;
                const { CHANGE } = PropertyEvent;
                const event = new PropertyEvent(CHANGE, this, name, this.__.__get(name), newValue);
                if (this.hasEvent(CHANGE) && !this.isLeafer)
                    this.emitEvent(event);
                this.leafer.emitEvent(event);
            }
        }
        else {
            this.__[name] = newValue;
        }
    },
    __getAttr(name) {
        return this.__.__get(name);
    }
};

const { sin, cos } = Math;
const defaultWorld = Object.assign(Object.assign({}, MatrixHelper.defaultMatrix), { scaleX: 1, scaleY: 1, rotation: 0, skewX: 0, skewY: 0 });
const defaultCenter = { x: 0.5, y: 0.5 };
const LeafMatrix = {
    __updateWorldMatrix() {
        const pw = this.parent ? this.parent.__world : defaultWorld;
        const r = this.__local;
        const w = this.__world;
        if (this.__layout.matrixChanged)
            this.__updateLocalMatrix();
        if (this.__layout.affectScaleOrRotation) {
            w.a = r.a * pw.a + r.b * pw.c;
            w.b = r.a * pw.b + r.b * pw.d;
            w.c = r.c * pw.a + r.d * pw.c;
            w.d = r.c * pw.b + r.d * pw.d;
            w.e = r.e * pw.a + r.f * pw.c + pw.e;
            w.f = r.e * pw.b + r.f * pw.d + pw.f;
            const data = this.__;
            w.scaleX = pw.scaleX * data.scaleX;
            w.scaleY = pw.scaleY * data.scaleY;
            w.rotation = pw.rotation + data.rotation;
            w.skewX = pw.skewX + data.skewX;
            w.skewY = pw.skewY + data.skewY;
        }
        else {
            w.a = pw.a;
            w.b = pw.b;
            w.c = pw.c;
            w.d = pw.d;
            w.e = r.e * pw.a + r.f * pw.c + pw.e;
            w.f = r.e * pw.b + r.f * pw.d + pw.f;
            w.scaleX = pw.scaleX;
            w.scaleY = pw.scaleY;
            w.rotation = pw.rotation;
            w.skewX = pw.skewX;
            w.skewY = pw.skewY;
        }
    },
    __updateLocalMatrix() {
        const r = this.__local;
        const layout = this.__layout;
        if (layout.affectScaleOrRotation) {
            const { scaleX, scaleY } = this.__;
            if (layout.affectRotation) {
                if (layout.scaleChanged || layout.rotationChanged) {
                    let { rotation, skewX, skewY } = this.__;
                    if (rotation || skewX || skewY) {
                        rotation *= OneRadian;
                        if (skewX)
                            skewX *= OneRadian;
                        if (skewY)
                            skewY *= OneRadian;
                        r.a = scaleX * cos(rotation + skewY);
                        r.b = scaleX * sin(rotation + skewY);
                        r.c = scaleY * -sin(rotation - skewX);
                        r.d = scaleY * cos(rotation - skewX);
                    }
                    else {
                        r.a = scaleX;
                        r.b = 0;
                        r.c = 0;
                        r.d = scaleY;
                        layout.affectRotation = false;
                    }
                    layout.scaleChanged = false;
                    layout.rotationChanged = false;
                }
            }
            else {
                if (layout.scaleChanged) {
                    r.a = scaleX;
                    r.d = scaleY;
                    layout.scaleChanged = false;
                }
            }
        }
        if (layout.positionChanged) {
            r.e = this.__.x;
            r.f = this.__.y;
            const { width, height, around } = this.__;
            if (around && width && height) {
                const origin = (around === 'center') ? defaultCenter : around;
                const offsetX = width * origin.x, offsetY = height * origin.y;
                r.e -= offsetX * r.a + offsetY * r.c;
                r.f -= offsetX * r.b + offsetY * r.d;
            }
            layout.positionChanged = false;
        }
        this.__layout.matrixChanged = false;
    }
};

const { toOuterOf, copyAndSpread } = BoundsHelper;
const LeafBounds = {
    __updateWorldBounds() {
        var _a;
        if (this.__layout.boundsChanged) {
            let resize;
            const layout = this.__layout;
            if (layout.boxChanged) {
                this.__updatePath();
                this.__updateRenderPath();
                this.__updateBoxBounds();
                layout.boxChanged = false;
                resize = true;
            }
            if (layout.localBoxChanged) {
                this.__updateLocalBoxBounds();
                layout.localBoxChanged = false;
                if (layout.strokeSpread)
                    layout.strokeChanged = true;
                if (layout.renderSpread)
                    layout.renderChanged = true;
                (_a = this.parent) === null || _a === void 0 ? void 0 : _a.__layout.boxChange();
            }
            if (layout.strokeChanged) {
                layout.strokeSpread = this.__updateStrokeSpread();
                if (layout.strokeSpread) {
                    if (layout.strokeBounds === layout.boxBounds) {
                        layout.spreadStroke();
                    }
                    this.__updateStrokeBounds();
                    this.__updateLocalStrokeBounds();
                }
                else {
                    layout.spreadStrokeCancel();
                }
                layout.strokeChanged = false;
                if (layout.renderSpread)
                    layout.renderChanged = true;
                if (this.parent)
                    this.parent.__layout.strokeChange();
                resize || (resize = true);
            }
            if (layout.renderChanged) {
                layout.renderSpread = this.__updateRenderSpread();
                if (layout.renderSpread) {
                    if (layout.renderBounds === layout.boxBounds || layout.renderBounds === layout.strokeBounds) {
                        layout.spreadRender();
                    }
                    this.__updateRenderBounds();
                    this.__updateLocalRenderBounds();
                }
                else {
                    layout.spreadRenderCancel();
                }
                layout.renderChanged = false;
                if (this.parent)
                    this.parent.__layout.renderChange();
            }
            layout.boundsChanged = false;
            toOuterOf(this.__layout.renderBounds, this.__world, this.__world);
            if (resize)
                this.__onUpdateSize();
        }
        else {
            toOuterOf(this.__layout.renderBounds, this.__world, this.__world);
        }
    },
    __updateLocalBoxBounds() {
        toOuterOf(this.__layout.boxBounds, this.__local, this.__local);
    },
    __updateLocalStrokeBounds() {
        toOuterOf(this.__layout.strokeBounds, this.__local, this.__layout.localStrokeBounds);
    },
    __updateLocalRenderBounds() {
        toOuterOf(this.__layout.renderBounds, this.__local, this.__layout.localRenderBounds);
    },
    __updateBoxBounds() {
        const b = this.__layout.boxBounds;
        const { width, height } = this.__;
        b.x = 0;
        b.y = 0;
        b.width = width;
        b.height = height;
    },
    __updateNaturalSize() {
        const { __: data, __layout: layout } = this;
        data.__naturalWidth = layout.boxBounds.width;
        data.__naturalHeight = layout.boxBounds.height;
        if (this.around) {
            layout.positionChanged = layout.matrixChanged = true;
            this.__updateWorldMatrix();
        }
    },
    __updateStrokeBounds() {
        copyAndSpread(this.__layout.strokeBounds, this.__layout.boxBounds, this.__layout.strokeSpread);
    },
    __updateRenderBounds() {
        copyAndSpread(this.__layout.renderBounds, this.__layout.strokeBounds, this.__layout.renderSpread);
    },
};

const { toInnerRadiusPointOf, copy: copy$1, setRadius } = PointHelper;
const inner = {};
const LeafHit = {
    __hitWorld(point) {
        if (this.__layout.hitCanvasChanged || !this.__hitCanvas) {
            this.__updateHitCanvas();
            this.__layout.hitCanvasChanged = false;
        }
        if (this.__.hitRadius) {
            copy$1(inner, point), point = inner;
            setRadius(point, this.__.hitRadius);
        }
        toInnerRadiusPointOf(point, this.__world, inner);
        return this.__hit(inner);
    },
    __drawHitPath(canvas) {
        this.__drawRenderPath(canvas);
    }
};

const LeafRender = {
    __render(canvas, options) {
        if (this.__worldOpacity) {
            canvas.setWorld(this.__world, options.matrix);
            canvas.opacity = this.__worldOpacity;
            if (this.__.__single) {
                const tempCanvas = canvas.getSameCanvas(true);
                this.__draw(tempCanvas, options);
                const blendMode = this.__.isEraser ? 'destination-out' : this.__.blendMode;
                if (this.__hasMirror || options.matrix) {
                    canvas.copyWorldByReset(tempCanvas, null, null, blendMode);
                }
                else {
                    canvas.copyWorldToInner(tempCanvas, this.__world, this.__layout.renderBounds, blendMode);
                }
                tempCanvas.recycle();
            }
            else {
                this.__draw(canvas, options);
            }
        }
    },
    __updateWorldOpacity() {
        this.__worldOpacity = this.__.visible ? (this.parent ? this.parent.__worldOpacity * this.__.opacity : this.__.opacity) : 0;
        if (this.__layout.opacityChanged)
            this.__layout.opacityChanged = false;
    }
};

const LeafMask = {
    __updateEraser(value) {
        this.__hasEraser = value ? true : this.children.some(item => item.__.isEraser);
    },
    __updateMask(value) {
        this.__hasMask = value ? true : this.children.some(item => item.__.isMask);
    },
    __renderMask(canvas, content, mask) {
        content.resetTransform();
        content.useMask(mask);
        canvas.resetTransform();
        canvas.opacity = this.__worldOpacity;
        canvas.copyWorld(content);
    },
    __removeMask(child) {
        if (child) {
            child.isMask = false;
            this.remove(child);
        }
        else {
            const { children } = this;
            for (let i = 0, len = children.length; i < len; i++) {
                child = children[i];
                if (child.isMask) {
                    this.__removeMask(child);
                    len--, i--;
                }
            }
        }
    }
};

const BranchRender = {
    __updateChange() {
        const { __layout: layout } = this;
        if (layout.childrenSortChanged) {
            this.__updateSortChildren();
            layout.childrenSortChanged = false;
        }
        this.__.__checkSingle();
    },
    __render(canvas, options) {
        if (this.__worldOpacity) {
            if (this.__.__single) {
                canvas.resetTransform();
                const tempCanvas = canvas.getSameCanvas();
                this.__renderBranch(tempCanvas, options);
                canvas.opacity = this.__worldOpacity;
                const blendMode = this.__.isEraser ? 'destination-out' : this.__.blendMode;
                if (this.__hasMirror || options.matrix) {
                    canvas.copyWorld(tempCanvas, null, null, blendMode);
                }
                else {
                    canvas.copyWorld(tempCanvas, this.__world, this.__world, blendMode);
                }
                tempCanvas.recycle();
            }
            else {
                this.__renderBranch(canvas, options);
            }
        }
    },
    __renderBranch(canvas, options) {
        let child;
        const { children } = this;
        if (this.__hasMask && children.length > 1) {
            let mask;
            let maskCanvas = canvas.getSameCanvas();
            let contentCanvas = canvas.getSameCanvas();
            for (let i = 0, len = children.length; i < len; i++) {
                child = children[i];
                if (child.isMask) {
                    if (mask) {
                        this.__renderMask(canvas, contentCanvas, maskCanvas);
                        maskCanvas.clear();
                        contentCanvas.clear();
                    }
                    else {
                        mask = true;
                    }
                    child.__render(maskCanvas, options);
                    continue;
                }
                child.__render(contentCanvas, options);
            }
            this.__renderMask(canvas, contentCanvas, maskCanvas);
            maskCanvas.recycle();
            contentCanvas.recycle();
        }
        else {
            const { bounds, hideBounds } = options;
            for (let i = 0, len = children.length; i < len; i++) {
                child = children[i];
                if (bounds && !bounds.hit(child.__world, options.matrix))
                    continue;
                if (hideBounds && hideBounds.includes(child.__world, options.matrix))
                    continue;
                child.__render(canvas, options);
            }
        }
    }
};

const { LEAF, create } = IncrementId;
const { toInnerPoint, toOuterPoint } = MatrixHelper;
const { tempToOuterOf, copy } = PointHelper;
const { moveLocal, zoomOfLocal, rotateOfLocal, skewOfLocal } = LeafHelper;
exports.Leaf = class Leaf {
    get tag() { return this.__tag; }
    set tag(_value) { }
    get __tag() { return 'Leaf'; }
    get innerName() { return this.__.name || this.tag + this.innerId; }
    get __DataProcessor() { return LeafData; }
    get __LayoutProcessor() { return LeafLayout; }
    get worldTransform() { return this.__layout.getTransform('world'); }
    get localTransform() { return this.__layout.getTransform('local'); }
    get boxBounds() { return this.getBounds('box', 'inner'); }
    get worldBoxBounds() { return this.getBounds('box'); }
    get worldStrokeBounds() { return this.getBounds('stroke'); }
    get worldRenderBounds() { return this.getBounds('render'); }
    get worldOpacity() { this.__layout.checkUpdate(); return this.__worldOpacity; }
    get resizeable() { return true; }
    get __hasMirror() { return this.__world.scaleX < 0 || this.__world.scaleY < 0; }
    get __onlyHitMask() { return this.__hasMask && !this.__.hitChildren; }
    get __ignoreHitWorld() { return (this.__hasMask || this.__hasEraser) && this.__.hitChildren; }
    constructor(data) {
        this.innerId = create(LEAF);
        this.__world = { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0, x: 0, y: 0, width: 0, height: 0, scaleX: 1, scaleY: 1, rotation: 0, skewX: 0, skewY: 0 };
        this.__local = { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0, x: 0, y: 0, width: 0, height: 0 };
        this.__worldOpacity = 1;
        this.__ = new this.__DataProcessor(this);
        this.__layout = new this.__LayoutProcessor(this);
        if (data) {
            if (data.children) {
                this.set(data);
            }
            else {
                Object.assign(this, data);
            }
        }
    }
    waitParent(item) {
        this.parent ? item() : (this.__parentWait ? this.__parentWait.push(item) : this.__parentWait = [item]);
    }
    waitLeafer(item) {
        this.leafer ? item() : (this.__leaferWait ? this.__leaferWait.push(item) : this.__leaferWait = [item]);
    }
    nextRender(item) {
        this.leafer ? this.leafer.nextRender(item) : this.waitLeafer(() => this.leafer.nextRender(item));
    }
    __bindLeafer(leafer) {
        if (this.isLeafer) {
            if (leafer !== null)
                leafer = this;
        }
        this.leafer = leafer;
        if (leafer) {
            this.__level = this.parent ? this.parent.__level + 1 : 1;
            if (this.__leaferWait)
                WaitHelper.run(this.__leaferWait);
        }
        if (this.isBranch) {
            const { children } = this;
            for (let i = 0, len = children.length; i < len; i++) {
                children[i].__bindLeafer(leafer);
            }
        }
    }
    set(_data) { }
    toJSON() {
        return this.__.__getInputData();
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    __setAttr(_attrName, _newValue) { }
    __getAttr(_attrName) { return undefined; }
    forceUpdate(attrName) {
        if (attrName === undefined)
            attrName = 'scaleX';
        else if (attrName === 'surface')
            attrName = 'blendMode';
        const value = this.__.__getInput(attrName);
        this.__[attrName] = value === undefined ? null : undefined;
        this[attrName] = value;
    }
    __updateWorldMatrix() { }
    __updateLocalMatrix() { }
    __updateWorldBounds() { }
    __updateLocalBoxBounds() { }
    __updateLocalStrokeBounds() { }
    __updateLocalRenderBounds() { }
    __updateBoxBounds() { }
    __updateStrokeBounds() { }
    __updateRenderBounds() { }
    __updateNaturalSize() { }
    __updateStrokeSpread() { return 0; }
    __updateRenderSpread() { return 0; }
    __onUpdateSize() { }
    __updateEraser(_value) { }
    __updateMask(_value) { }
    __renderMask(_canvas, _content, _mask) { }
    __removeMask(_child) { }
    getWorld(attrName) {
        this.__layout.checkUpdate();
        if (attrName === 'x')
            return this.__world.e;
        if (attrName === 'y')
            return this.__world.f;
        return this.__world[attrName];
    }
    getBounds(type, locationType = 'world') {
        return this.__layout.getBounds(type, locationType);
    }
    worldToLocal(world, to, distance, relative) {
        if (this.parent) {
            this.parent.worldToInner(world, to, distance, relative);
        }
        else {
            if (to)
                copy(to, world);
        }
    }
    localToWorld(local, to, distance, relative) {
        if (this.parent) {
            this.parent.innerToWorld(local, to, distance, relative);
        }
        else {
            if (to)
                copy(to, local);
        }
    }
    worldToInner(world, to, distance, relative) {
        if (relative) {
            relative.innerToWorld(world, to, distance);
            world = to ? to : world;
        }
        toInnerPoint(this.worldTransform, world, to, distance);
    }
    innerToWorld(inner, to, distance, relative) {
        toOuterPoint(this.worldTransform, inner, to, distance);
        if (relative)
            relative.worldToInner(to ? to : inner, null, distance);
    }
    getInnerPoint(world, relative, distance, change) {
        const point = change ? world : {};
        this.worldToInner(world, point, distance, relative);
        return point;
    }
    getInnerPointByLocal(local, _relative, distance, change) {
        return this.getInnerPoint(local, this.parent, distance, change);
    }
    getLocalPoint(world, relative, distance, change) {
        const point = change ? world : {};
        this.worldToLocal(world, point, distance, relative);
        return point;
    }
    getLocalPointByInner(inner, _relative, distance, change) {
        return this.getWorldPoint(inner, this.parent, distance, change);
    }
    getWorldPoint(inner, relative, distance, change) {
        const point = change ? inner : {};
        this.innerToWorld(inner, point, distance, relative);
        return point;
    }
    getWorldPointByLocal(local, relative, distance, change) {
        const point = change ? local : {};
        this.localToWorld(local, point, distance, relative);
        return point;
    }
    move(x, y) {
        moveLocal(this, x, y);
    }
    scaleOf(origin, x, y) {
        zoomOfLocal(this, tempToOuterOf(origin, this.localTransform), x, y);
    }
    rotateOf(origin, angle) {
        rotateOfLocal(this, tempToOuterOf(origin, this.localTransform), angle);
    }
    skewOf(origin, x, y) {
        skewOfLocal(this, tempToOuterOf(origin, this.localTransform), x, y);
    }
    __hitWorld(_point) { return true; }
    __hit(_local) { return true; }
    __drawHitPath(_canvas) { }
    __updateHitCanvas() { }
    __render(_canvas, _options) { }
    __drawFast(_canvas, _options) { }
    __draw(_canvas, _options) { }
    __renderShape(_canvas, _options) { }
    __updateWorldOpacity() { }
    __updateChange() { }
    __drawPath(_canvas) { }
    __drawRenderPath(_canvas) { }
    __updatePath() { }
    __updateRenderPath() { }
    __updateSortChildren() { }
    add(_child, _index) { }
    remove(_child, destroy) {
        if (this.parent)
            this.parent.remove(this, destroy);
    }
    on(_type, _listener, _options) { }
    off(_type, _listener, _options) { }
    on_(_type, _listener, _bind, _options) { return undefined; }
    off_(_id) { }
    once(_type, _listener, _capture) { }
    emit(_type, _event, _capture) { }
    emitEvent(_event, _capture) { }
    hasEvent(_type, _capture) { return false; }
    destroy() {
        if (!this.destroyed) {
            if (this.parent)
                this.remove();
            if (this.children)
                this.removeAll(true);
            this.__.destroy();
            this.__layout.destroy();
            this.__captureMap = this.__bubbleMap = this.__parentWait = this.__leaferWait = null;
            this.destroyed = true;
        }
    }
};
exports.Leaf = __decorate([
    useModule(LeafDataProxy),
    useModule(LeafMatrix),
    useModule(LeafBounds),
    useModule(LeafHit),
    useModule(LeafEventer),
    useModule(LeafRender)
], exports.Leaf);

const { setByListWithHandle } = BoundsHelper;
const { sort } = BranchHelper;
const { localBoxBounds, localEventBounds, localRenderBounds, maskLocalBoxBounds, maskLocalEventBounds, maskLocalRenderBounds } = LeafBoundsHelper;
exports.Branch = class Branch extends exports.Leaf {
    constructor() {
        super();
        this.isBranch = true;
        this.children = [];
    }
    __updateStrokeSpread() {
        const { children } = this;
        for (let i = 0, len = children.length; i < len; i++) {
            if (children[i].__layout.strokeSpread)
                return 1;
        }
        return 0;
    }
    __updateRenderSpread() {
        const { children } = this;
        for (let i = 0, len = children.length; i < len; i++) {
            if (children[i].__layout.renderSpread)
                return 1;
        }
        return 0;
    }
    __updateBoxBounds() {
        setByListWithHandle(this.__layout.boxBounds, this.children, this.__hasMask ? maskLocalBoxBounds : localBoxBounds);
    }
    __updateStrokeBounds() {
        setByListWithHandle(this.__layout.strokeBounds, this.children, this.__hasMask ? maskLocalEventBounds : localEventBounds);
    }
    __updateRenderBounds() {
        setByListWithHandle(this.__layout.renderBounds, this.children, this.__hasMask ? maskLocalRenderBounds : localRenderBounds);
    }
    __updateSortChildren() {
        let affectSort;
        const { children } = this;
        if (children.length > 1) {
            for (let i = 0, len = children.length; i < len; i++) {
                children[i].__tempNumber = i;
                if (children[i].__.zIndex)
                    affectSort = true;
            }
            children.sort(sort);
            this.__layout.affectChildrenSort = affectSort;
        }
    }
    add(child, index) {
        if (child.parent)
            child.parent.remove(child);
        child.parent = this;
        index === undefined ? this.children.push(child) : this.children.splice(index, 0, child);
        if (child.isBranch)
            this.__.__childBranchNumber = (this.__.__childBranchNumber || 0) + 1;
        child.__layout.boundsChanged || child.__layout.positionChange();
        if (child.__parentWait)
            WaitHelper.run(child.__parentWait);
        if (this.leafer) {
            child.__bindLeafer(this.leafer);
            if (this.leafer.created)
                this.__emitChildEvent(ChildEvent.ADD, child);
        }
        this.__layout.affectChildrenSort && this.__layout.childrenSortChange();
    }
    addMany(...children) {
        children.forEach(child => this.add(child));
    }
    remove(child, destroy) {
        if (child) {
            const index = this.children.indexOf(child);
            if (index > -1) {
                this.children.splice(index, 1);
                if (child.isBranch)
                    this.__.__childBranchNumber = (this.__.__childBranchNumber || 1) - 1;
                this.__preRemove();
                this.__realRemoveChild(child);
                if (destroy)
                    child.destroy();
            }
        }
        else if (child === undefined) {
            super.remove(null, destroy);
        }
    }
    removeAll(destroy) {
        const { children } = this;
        if (children.length) {
            this.children = [];
            this.__preRemove();
            this.__.__childBranchNumber = 0;
            children.forEach(child => {
                this.__realRemoveChild(child);
                if (destroy)
                    child.destroy();
            });
        }
    }
    __preRemove() {
        if (this.__hasMask)
            this.__updateMask();
        if (this.__hasEraser)
            this.__updateEraser();
        this.__layout.boxChange();
        this.__layout.affectChildrenSort && this.__layout.childrenSortChange();
    }
    __realRemoveChild(child) {
        child.parent = null;
        if (this.leafer) {
            child.__bindLeafer(null);
            if (this.leafer.created) {
                this.__emitChildEvent(ChildEvent.REMOVE, child);
                if (this.leafer.hitCanvasManager)
                    this.leafer.hitCanvasManager.clear();
            }
        }
    }
    __emitChildEvent(type, child) {
        const event = new ChildEvent(type, child, this);
        if (child.hasEvent(type))
            child.emitEvent(event);
        if (this.hasEvent(type) && !this.isLeafer)
            this.emitEvent(event);
        this.leafer.emitEvent(event);
    }
};
exports.Branch = __decorate([
    useModule(BranchRender),
    useModule(LeafMask)
], exports.Branch);

const debug = Debug.get('plugin');
const PluginManager = {
    power: {},
    list: [],
    onLeafer(leafer) {
        PluginManager.list.forEach(plugin => {
            if (plugin.onLeafer)
                plugin.onLeafer(leafer);
        });
    }
};
function usePlugin(plugin, config) {
    const realParams = {};
    const { power, list } = PluginManager;
    if (!power)
        debug.error('need add PluginManager.power = LeaferUI');
    if (list.includes(plugin)) {
        debug.warn('repeat run', plugin.name);
        return;
    }
    list.push(plugin);
    if (plugin.import) {
        plugin.import.forEach(item => {
            if (power[item]) {
                realParams[item] = power[item];
            }
            else {
                debug.error(item + ' non-existent');
            }
        });
    }
    else {
        debug.warn('no import');
    }
    try {
        plugin.run(realParams, config);
    }
    catch (e) {
        debug.error(e);
    }
}

exports.AnimateEvent = AnimateEvent;
exports.AutoBounds = AutoBounds;
exports.BezierHelper = BezierHelper;
exports.Bounds = Bounds;
exports.BoundsHelper = BoundsHelper;
exports.BranchHelper = BranchHelper;
exports.BranchRender = BranchRender;
exports.CanvasManager = CanvasManager;
exports.ChildEvent = ChildEvent;
exports.Creator = Creator;
exports.Cursor = Cursor;
exports.DataHelper = DataHelper;
exports.Debug = Debug;
exports.EllipseHelper = EllipseHelper;
exports.Event = Event;
exports.EventCreator = EventCreator;
exports.FileHelper = FileHelper;
exports.HitCanvasManager = HitCanvasManager;
exports.ImageEvent = ImageEvent;
exports.ImageManager = ImageManager;
exports.IncrementId = IncrementId;
exports.InteractionBase = InteractionBase;
exports.InteractionHelper = InteractionHelper;
exports.Keyboard = Keyboard;
exports.LayoutEvent = LayoutEvent;
exports.LeafBounds = LeafBounds;
exports.LeafBoundsHelper = LeafBoundsHelper;
exports.LeafData = LeafData;
exports.LeafDataProxy = LeafDataProxy;
exports.LeafEventer = LeafEventer;
exports.LeafHelper = LeafHelper;
exports.LeafHit = LeafHit;
exports.LeafLayout = LeafLayout;
exports.LeafLevelList = LeafLevelList;
exports.LeafList = LeafList;
exports.LeafMask = LeafMask;
exports.LeafMatrix = LeafMatrix;
exports.LeafRender = LeafRender;
exports.LeaferCanvasBase = LeaferCanvasBase;
exports.LeaferEvent = LeaferEvent;
exports.LeaferImage = LeaferImage;
exports.MathHelper = MathHelper;
exports.Matrix = Matrix;
exports.MatrixHelper = MatrixHelper;
exports.MultiTouchHelper = MultiTouchHelper;
exports.NeedConvertToCanvasCommandMap = NeedConvertToCanvasCommandMap;
exports.OneRadian = OneRadian;
exports.PI2 = PI2;
exports.PI_2 = PI_2;
exports.PathBounds = PathBounds;
exports.PathCommandDataHelper = PathCommandDataHelper;
exports.PathCommandMap = PathCommandMap;
exports.PathConvert = PathConvert;
exports.PathCorner = PathCorner;
exports.PathCreator = PathCreator;
exports.PathDrawer = PathDrawer;
exports.PathHelper = PathHelper;
exports.PathNumberCommandLengthMap = PathNumberCommandLengthMap;
exports.PathNumberCommandMap = PathNumberCommandMap;
exports.Platform = Platform;
exports.PluginManager = PluginManager;
exports.Point = Point;
exports.PointHelper = PointHelper;
exports.PointerButton = PointerButton;
exports.PropertyEvent = PropertyEvent;
exports.RectHelper = RectHelper;
exports.RenderEvent = RenderEvent;
exports.ResizeEvent = ResizeEvent;
exports.Run = Run;
exports.StringNumberMap = StringNumberMap;
exports.TaskItem = TaskItem;
exports.TaskProcessor = TaskProcessor;
exports.TransformEvent = TransformEvent;
exports.TwoPointBounds = TwoPointBounds;
exports.TwoPointBoundsHelper = TwoPointBoundsHelper;
exports.UICreator = UICreator;
exports.UIEvent = UIEvent;
exports.WaitHelper = WaitHelper;
exports.WatchEvent = WatchEvent;
exports.affectRenderBoundsType = affectRenderBoundsType;
exports.affectStrokeBoundsType = affectStrokeBoundsType;
exports.aliasType = aliasType;
exports.boundsType = boundsType;
exports.canvasPatch = canvasPatch;
exports.canvasSizeAttrs = canvasSizeAttrs;
exports.cursorType = cursorType;
exports.dataProcessor = dataProcessor;
exports.dataType = dataType;
exports.defineDataProcessor = defineDataProcessor;
exports.defineKey = defineKey;
exports.defineLeafAttr = defineLeafAttr;
exports.eraserType = eraserType;
exports.getDescriptor = getDescriptor;
exports.hitType = hitType;
exports.layoutProcessor = layoutProcessor;
exports.maskType = maskType;
exports.opacityType = opacityType;
exports.pathType = pathType;
exports.positionType = positionType;
exports.registerUI = registerUI;
exports.registerUIEvent = registerUIEvent;
exports.rewrite = rewrite;
exports.rewriteAble = rewriteAble;
exports.rotationType = rotationType;
exports.scaleType = scaleType;
exports.setDefaultValue = setDefaultValue;
exports.sortType = sortType;
exports.strokeType = strokeType;
exports.surfaceType = surfaceType;
exports.useModule = useModule;
exports.usePlugin = usePlugin;
