import { IPathCreator, IPathCommandData, IPathDrawer, IPathString, IBoundsData, ITwoPointBoundsData, IPointData, INumberMap, IStringMap } from '@leafer/interface';

declare const PathHelper: {
    creator: IPathCreator;
    parse(_pathString: string, _curveMode?: boolean): IPathCommandData;
    convertToCanvasData(_old: IPathCommandData, _curveMode?: boolean): IPathCommandData;
};

interface ICurrentCommand {
    name?: number;
    length?: number;
    index?: number;
    dot?: number;
}
declare const PathConvert: {
    current: ICurrentCommand;
    stringify(data: IPathCommandData): string;
    parse(pathString: string, curveMode?: boolean): IPathCommandData;
    toCanvasData(old: IPathCommandData, curveMode?: boolean): IPathCommandData;
    copyData(data: IPathCommandData, old: IPathCommandData, index: number, count: number): void;
    pushData(data: IPathCommandData, strNum: string | number): void;
};

declare class PathCreator implements IPathDrawer {
    path: IPathCommandData;
    constructor(path?: IPathCommandData | IPathString);
    beginPath(): PathCreator;
    moveTo(x: number, y: number): PathCreator;
    lineTo(x: number, y: number): PathCreator;
    bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x: number, y: number): PathCreator;
    quadraticCurveTo(x1: number, y1: number, x: number, y: number): PathCreator;
    closePath(): PathCreator;
    rect(x: number, y: number, width: number, height: number): PathCreator;
    roundRect(x: number, y: number, width: number, height: number, cornerRadius: number | number[]): PathCreator;
    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation?: number, startAngle?: number, endAngle?: number, anticlockwise?: boolean): PathCreator;
    arc(x: number, y: number, radius: number, startAngle?: number, endAngle?: number, anticlockwise?: boolean): PathCreator;
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): PathCreator;
    drawEllipse(x: number, y: number, radiusX: number, radiusY: number, rotation?: number, startAngle?: number, endAngle?: number, anticlockwise?: boolean): PathCreator;
    drawArc(x: number, y: number, radius: number, startAngle?: number, endAngle?: number, anticlockwise?: boolean): PathCreator;
    drawPoints(points: number[], curve?: boolean | number, close?: boolean): PathCreator;
}

declare const PathCommandDataHelper: {
    beginPath(data: IPathCommandData): void;
    moveTo(data: IPathCommandData, x: number, y: number): void;
    lineTo(data: IPathCommandData, x: number, y: number): void;
    bezierCurveTo(data: IPathCommandData, x1: number, y1: number, x2: number, y2: number, x: number, y: number): void;
    quadraticCurveTo(data: IPathCommandData, x1: number, y1: number, x: number, y: number): void;
    closePath(data: IPathCommandData): void;
    rect(data: IPathCommandData, x: number, y: number, width: number, height: number): void;
    roundRect(data: IPathCommandData, x: number, y: number, width: number, height: number, cornerRadius: number | number[]): void;
    ellipse(data: IPathCommandData, x: number, y: number, radiusX: number, radiusY: number, rotation?: number, startAngle?: number, endAngle?: number, anticlockwise?: boolean): void;
    arc(data: IPathCommandData, x: number, y: number, radius: number, startAngle?: number, endAngle?: number, anticlockwise?: boolean): void;
    arcTo(data: IPathCommandData, x1: number, y1: number, x2: number, y2: number, radius: number): void;
    drawEllipse(data: IPathCommandData, x: number, y: number, radiusX: number, radiusY: number, rotation?: number, startAngle?: number, endAngle?: number, anticlockwise?: boolean): void;
    drawArc(data: IPathCommandData, x: number, y: number, radius: number, startAngle?: number, endAngle?: number, anticlockwise?: boolean): void;
    drawPoints(data: IPathCommandData, points: number[], curve?: boolean | number, close?: boolean): void;
};

declare const PathDrawer: {
    drawPathByData(drawer: IPathDrawer, data: IPathCommandData): void;
};

declare const PathBounds: {
    toBounds(data: IPathCommandData, setBounds: IBoundsData): void;
    toTwoPointBounds(data: IPathCommandData, setPointBounds: ITwoPointBoundsData): void;
};

declare const PathCorner: {
    smooth(data: IPathCommandData, _cornerRadius: number, _cornerSmoothing?: number): IPathCommandData;
};

declare const BezierHelper: {
    points(data: IPathCommandData, points: number[], curve?: boolean | number, close?: boolean): void;
    rect(data: IPathCommandData, x: number, y: number, width: number, height: number): void;
    roundRect(data: IPathCommandData, x: number, y: number, width: number, height: number, radius: number | number[]): void;
    arcTo(data: IPathCommandData | null | void, fromX: number, fromY: number, x1: number, y1: number, toX: number, toY: number, radius: number, setPointBounds?: ITwoPointBoundsData, setEndPoint?: IPointData, setStartPoint?: IPointData): void;
    arc(data: IPathCommandData | null | void, x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean, setPointBounds?: ITwoPointBoundsData, setEndPoint?: IPointData, setStartPoint?: IPointData): void;
    ellipse(data: IPathCommandData | null | void, cx: number, cy: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise?: boolean, setPointBounds?: ITwoPointBoundsData, setEndPoint?: IPointData, setStartPoint?: IPointData): void;
    quadraticCurveTo(data: IPathCommandData, fromX: number, fromY: number, x1: number, y1: number, toX: number, toY: number): void;
    toTwoPointBoundsByQuadraticCurve(fromX: number, fromY: number, x1: number, y1: number, toX: number, toY: number, pointBounds: ITwoPointBoundsData, addMode?: boolean): void;
    toTwoPointBounds(fromX: number, fromY: number, x1: number, y1: number, x2: number, y2: number, toX: number, toY: number, pointBounds: ITwoPointBoundsData, addMode?: boolean): void;
    getPointAndSet(t: number, fromX: number, fromY: number, x1: number, y1: number, x2: number, y2: number, toX: number, toY: number, setPoint: IPointData): void;
    getPoint(t: number, fromX: number, fromY: number, x1: number, y1: number, x2: number, y2: number, toX: number, toY: number): IPointData;
};

declare const EllipseHelper: {
    ellipticalArc(data: IPathCommandData, fromX: number, fromY: number, radiusX: number, radiusY: number, rotation: number, largeFlag: number, sweepFlag: number, toX: number, toY: number, curveMode?: boolean): void;
};

declare const RectHelper: {
    drawRoundRect(drawer: IPathDrawer, x: number, y: number, width: number, height: number, cornerRadius: number | number[]): void;
};

declare const PathCommandMap: INumberMap;
declare const NeedConvertToCanvasCommandMap: INumberMap;
declare const PathNumberCommandMap: IStringMap;
declare const PathNumberCommandLengthMap: INumberMap;

export { BezierHelper, EllipseHelper, NeedConvertToCanvasCommandMap, PathBounds, PathCommandDataHelper, PathCommandMap, PathConvert, PathCorner, PathCreator, PathDrawer, PathHelper, PathNumberCommandLengthMap, PathNumberCommandMap, RectHelper };
