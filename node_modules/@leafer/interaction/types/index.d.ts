import { IMoveEvent, IZoomEvent, IRotateEvent, TransformMode, ITimer, IDragEvent, ILeafList, ILeaf, IPointerEvent, IInteraction, IInteractionCanvas, ISelector, IInteractionConfig, ICursorType, IBounds, IEventListenerId, IBooleanMap, IUIEvent, IKeepTouchData, IKeyEvent, ISelectPathOptions, IPointData, IEvent, IObject, IDropEvent, ISwipeEvent, IMultiTouchData, ICursorTypeMap } from '@leafer/interface';
import { LeafList } from '@leafer/list';

declare class Transformer {
    protected interaction: InteractionBase;
    protected moveData: IMoveEvent;
    protected zoomData: IZoomEvent;
    protected rotateData: IRotateEvent;
    protected transformMode: TransformMode;
    protected transformTimer: ITimer;
    constructor(interaction: InteractionBase);
    move(data: IMoveEvent): void;
    zoom(data: IZoomEvent): void;
    rotate(data: IRotateEvent): void;
    protected transformEndWait(): void;
    transformEnd(): void;
    protected moveEnd(): void;
    protected zoomEnd(): void;
    protected rotateEnd(): void;
    destroy(): void;
}

declare class Dragger {
    protected interaction: InteractionBase;
    moving: boolean;
    dragging: boolean;
    dragData: IDragEvent;
    protected dragList: ILeafList;
    protected dragableList: ILeaf[];
    protected dragOverPath: ILeafList;
    protected dragEnterPath: ILeafList;
    protected autoMoveTimer: ITimer;
    constructor(interaction: InteractionBase);
    setDragData(data: IPointerEvent): void;
    getDragList(): ILeafList;
    checkDrag(data: IPointerEvent, canDrag: boolean): void;
    dragStart(data: IPointerEvent, canDrag: boolean): void;
    protected getDragableList(path: ILeafList): void;
    protected dragDragableList(): void;
    dragOverOrOut(data: IPointerEvent): void;
    dragEnterOrLeave(data: IPointerEvent): void;
    dragEnd(data: IPointerEvent): void;
    protected swipe(data: IPointerEvent, endDragData: IDragEvent): void;
    protected drop(data: IPointerEvent): void;
    protected dragReset(): void;
    checkDragOut(data: IPointerEvent): void;
    protected autoMoveOnDragOut(data: IPointerEvent): void;
    protected autoMoveCancel(): void;
    destroy(): void;
}

declare class InteractionBase implements IInteraction {
    target: ILeaf;
    canvas: IInteractionCanvas;
    selector: ISelector;
    running: boolean;
    get dragging(): boolean;
    get moveMode(): boolean;
    config: IInteractionConfig;
    cursor: ICursorType | ICursorType[];
    get hitRadius(): number;
    shrinkCanvasBounds: IBounds;
    downData: IPointerEvent;
    hoverData: IPointerEvent;
    downTime: number;
    protected overPath: LeafList;
    protected enterPath: LeafList;
    protected waitTap: boolean;
    protected longPressTimer: ITimer;
    protected longPressed: boolean;
    protected tapCount: number;
    protected tapTimer: ITimer;
    protected dragger: Dragger;
    protected transformer: Transformer;
    protected __eventIds: IEventListenerId[];
    protected defaultPath: ILeafList;
    protected downKeyMap: IBooleanMap;
    constructor(target: ILeaf, canvas: IInteractionCanvas, selector: ISelector, userConfig?: IInteractionConfig);
    start(): void;
    stop(): void;
    receive(_event: any): void;
    pointerDown(data?: IPointerEvent, useDefaultPath?: boolean): void;
    pointerMove(data?: IPointerEvent): void;
    pointerMoveReal(data: IPointerEvent): void;
    pointerUp(data?: IPointerEvent): void;
    pointerCancel(): void;
    multiTouch(data: IUIEvent, list: IKeepTouchData[]): void;
    move(data: IMoveEvent): void;
    zoom(data: IZoomEvent): void;
    rotate(data: IRotateEvent): void;
    transformEnd(): void;
    keyDown(data: IKeyEvent): void;
    keyUp(data: IKeyEvent): void;
    protected pointerOverOrOut(data: IPointerEvent): void;
    protected pointerEnterOrLeave(data: IPointerEvent): void;
    protected touchLeave(data: IPointerEvent): void;
    protected tap(data: IPointerEvent): void;
    findPath(data: IPointerEvent, options?: ISelectPathOptions): ILeafList;
    updateDownData(data?: IPointerEvent): void;
    updateHoverData(data?: IPointerEvent): void;
    updateCursor(data?: IPointerEvent): void;
    protected setCursor(cursor: ICursorType | ICursorType[]): void;
    protected emitTap(data: IPointerEvent): void;
    protected emitDoubleTap(data: IPointerEvent): void;
    pointerWaitCancel(): void;
    protected tapWait(): void;
    protected tapWaitCancel(): void;
    protected longPressWait(data: IPointerEvent): void;
    protected longTap(data: IPointerEvent): boolean;
    protected longPressWaitCancel(): void;
    protected __onResize(): void;
    protected __listenEvents(): void;
    protected __removeListenEvents(): void;
    emit(type: string, data: IUIEvent, path?: ILeafList, excludePath?: ILeafList): void;
    destroy(): void;
}

declare const InteractionHelper: {
    getMoveEventData(center: IPointData, move: IPointData, event: IEvent): IMoveEvent;
    getRotateEventData(center: IPointData, angle: number, event: IEvent): IRotateEvent;
    getZoomEventData(center: IPointData, scale: number, event: IEvent): IZoomEvent;
    getDragEventData(startPoint: IPointData, lastPoint: IPointData, event: IPointerEvent): IDragEvent;
    getDropEventData(event: IPointerEvent, list: ILeafList, data: IObject): IDropEvent;
    getSwipeDirection(angle: number): string;
    getSwipeEventData(startPoint: IPointData, lastDragData: IDragEvent, event: IPointerEvent): ISwipeEvent;
    getBase(e: IObject): IUIEvent;
    pathHasEventType(path: ILeafList, type: string): boolean;
    filterPathByEventType(path: ILeafList, type: string): ILeafList;
};

declare const MultiTouchHelper: {
    getData(list: IKeepTouchData[]): IMultiTouchData;
};

declare class Cursor {
    static custom: ICursorTypeMap;
    static set(name: string, value: ICursorType | ICursorType[]): void;
    static get(name: string): ICursorType | ICursorType[];
}

export { Cursor, InteractionBase, InteractionHelper, MultiTouchHelper };
