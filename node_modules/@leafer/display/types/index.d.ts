import { ILeaf, InnerId, ILeafer, ILeafData, ILeafLayout, IMatrixWithLayoutData, IMatrixWithBoundsData, IBoundsData, IHitCanvas, IEventListenerMap, IFunction, ILeafInputData, IObject, __Value, ILeaferCanvas, IMatrixDecompositionAttr, ILayoutBoundsType, ILayoutLocationType, IPointData, IRadiusPointData, IRenderOptions, IEventListener, IEventListenerOptions, IEventListenerId, IEvent } from '@leafer/interface';
import { LeafData } from '@leafer/data';
import { LeafLayout } from '@leafer/layout';

declare class Leaf implements ILeaf {
    get tag(): string;
    set tag(_value: string);
    get __tag(): string;
    readonly innerId: InnerId;
    get innerName(): string;
    get __DataProcessor(): typeof LeafData;
    get __LayoutProcessor(): typeof LeafLayout;
    leafer?: ILeafer;
    parent?: ILeaf;
    isLeafer: boolean;
    isBranch: boolean;
    isBranchLeaf: boolean;
    __: ILeafData;
    __layout: ILeafLayout;
    __world: IMatrixWithLayoutData;
    __local: IMatrixWithBoundsData;
    __worldOpacity: number;
    get worldTransform(): IMatrixWithLayoutData;
    get localTransform(): IMatrixWithBoundsData;
    get boxBounds(): IBoundsData;
    get worldBoxBounds(): IBoundsData;
    get worldStrokeBounds(): IBoundsData;
    get worldRenderBounds(): IBoundsData;
    get worldOpacity(): number;
    __level: number;
    __tempNumber: number;
    get resizeable(): boolean;
    get __hasMirror(): boolean;
    __hasMask?: boolean;
    __hasEraser?: boolean;
    __hitCanvas?: IHitCanvas;
    get __onlyHitMask(): boolean;
    get __ignoreHitWorld(): boolean;
    __captureMap?: IEventListenerMap;
    __bubbleMap?: IEventListenerMap;
    __parentWait?: IFunction[];
    __leaferWait?: IFunction[];
    children?: ILeaf[];
    destroyed: boolean;
    constructor(data?: ILeafInputData);
    waitParent(item: IFunction): void;
    waitLeafer(item: IFunction): void;
    nextRender(item: IFunction): void;
    __bindLeafer(leafer: ILeafer | null): void;
    set(_data: IObject): void;
    toJSON(): IObject;
    toString(): string;
    __setAttr(_attrName: string, _newValue: __Value): void;
    __getAttr(_attrName: string): __Value;
    forceUpdate(attrName?: string): void;
    __updateWorldMatrix(): void;
    __updateLocalMatrix(): void;
    __updateWorldBounds(): void;
    __updateLocalBoxBounds(): void;
    __updateLocalStrokeBounds(): void;
    __updateLocalRenderBounds(): void;
    __updateBoxBounds(): void;
    __updateStrokeBounds(): void;
    __updateRenderBounds(): void;
    __updateNaturalSize(): void;
    __updateStrokeSpread(): number;
    __updateRenderSpread(): number;
    __onUpdateSize(): void;
    __updateEraser(_value?: boolean): void;
    __updateMask(_value?: boolean): void;
    __renderMask(_canvas: ILeaferCanvas, _content: ILeaferCanvas, _mask: ILeaferCanvas): void;
    __removeMask(_child?: ILeaf): void;
    getWorld(attrName: IMatrixDecompositionAttr): number;
    getBounds(type: ILayoutBoundsType, locationType?: ILayoutLocationType): IBoundsData;
    worldToLocal(world: IPointData, to?: IPointData, distance?: boolean, relative?: ILeaf): void;
    localToWorld(local: IPointData, to?: IPointData, distance?: boolean, relative?: ILeaf): void;
    worldToInner(world: IPointData, to?: IPointData, distance?: boolean, relative?: ILeaf): void;
    innerToWorld(inner: IPointData, to?: IPointData, distance?: boolean, relative?: ILeaf): void;
    getInnerPoint(world: IPointData, relative?: ILeaf, distance?: boolean, change?: boolean): IPointData;
    getInnerPointByLocal(local: IPointData, _relative?: ILeaf, distance?: boolean, change?: boolean): IPointData;
    getLocalPoint(world: IPointData, relative?: ILeaf, distance?: boolean, change?: boolean): IPointData;
    getLocalPointByInner(inner: IPointData, _relative?: ILeaf, distance?: boolean, change?: boolean): IPointData;
    getWorldPoint(inner: IPointData, relative?: ILeaf, distance?: boolean, change?: boolean): IPointData;
    getWorldPointByLocal(local: IPointData, relative?: ILeaf, distance?: boolean, change?: boolean): IPointData;
    move(x: number, y?: number): void;
    scaleOf(origin: IPointData, x: number, y?: number): void;
    rotateOf(origin: IPointData, angle: number): void;
    skewOf(origin: IPointData, x: number, y: number): void;
    __hitWorld(_point: IRadiusPointData): boolean;
    __hit(_local: IRadiusPointData): boolean;
    __drawHitPath(_canvas: ILeaferCanvas): void;
    __updateHitCanvas(): void;
    __render(_canvas: ILeaferCanvas, _options: IRenderOptions): void;
    __drawFast(_canvas: ILeaferCanvas, _options: IRenderOptions): void;
    __draw(_canvas: ILeaferCanvas, _options: IRenderOptions): void;
    __renderShape(_canvas: ILeaferCanvas, _options: IRenderOptions): void;
    __updateWorldOpacity(): void;
    __updateChange(): void;
    __drawPath(_canvas: ILeaferCanvas): void;
    __drawRenderPath(_canvas: ILeaferCanvas): void;
    __updatePath(): void;
    __updateRenderPath(): void;
    __updateSortChildren(): void;
    add(_child: ILeaf, _index?: number): void;
    remove(_child?: ILeaf, destroy?: boolean): void;
    on(_type: string | string[], _listener: IEventListener, _options?: IEventListenerOptions | boolean): void;
    off(_type: string | string[], _listener: IEventListener, _options?: IEventListenerOptions | boolean): void;
    on_(_type: string | string[], _listener: IEventListener, _bind?: IObject, _options?: IEventListenerOptions | boolean): IEventListenerId;
    off_(_id: IEventListenerId | IEventListenerId[]): void;
    once(_type: string | string[], _listener: IEventListener, _capture?: boolean): void;
    emit(_type: string, _event?: IEvent | IObject, _capture?: boolean): void;
    emitEvent(_event?: IEvent, _capture?: boolean): void;
    hasEvent(_type: string, _capture?: boolean): boolean;
    destroy(): void;
}

declare class Branch extends Leaf {
    constructor();
    __updateStrokeSpread(): number;
    __updateRenderSpread(): number;
    __updateBoxBounds(): void;
    __updateStrokeBounds(): void;
    __updateRenderBounds(): void;
    __updateSortChildren(): void;
    add(child: ILeaf, index?: number): void;
    addMany(...children: ILeaf[]): void;
    remove(child?: Leaf, destroy?: boolean): void;
    removeAll(destroy?: boolean): void;
    protected __preRemove(): void;
    protected __realRemoveChild(child: ILeaf): void;
    protected __emitChildEvent(type: string, child: ILeaf): void;
}

export { Branch, Leaf };
