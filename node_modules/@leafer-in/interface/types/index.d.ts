import { IGroup, IUI, IPolygon, IPointData, IResizeType, IAround, IRectInputData, ICursorType, IEvent, IDragEvent, IBoundsData } from '@leafer-ui/interface';
export * from '@leafer-ui/interface';

interface IEditor extends IGroup {
    config: IEditorConfig;
    resizePoints: IUI[];
    rotatePoints: IUI[];
    resizeLines: IUI[];
    circle: IUI;
    targetRect: IUI;
    rect: IPolygon;
    target: IUI;
    tool: IEditorTool;
    enterPoint: IUI;
    getTool(value: IUI): IEditorTool;
    update(): void;
}
interface IEditorTool {
    name: string;
    getMirrorData(editor: IEditor): IPointData;
    resize(e: IEditorResizeEvent): void;
    rotate(e: IEditorRotateEvent): void;
    update(editor: IEditor): void;
}
interface IEditorConfig {
    type?: 'pc' | 'mobile';
    resizeType?: 'auto' | IResizeType;
    around?: IAround;
    lockRatio?: boolean;
    rotateGap?: number;
    stroke?: string;
    pointFill?: string;
    pointSize?: number;
    pointRadius?: number;
    point?: IRectInputData | IRectInputData[];
    rotatePoint?: IRectInputData;
    rect?: IRectInputData;
    hideOnMove?: boolean;
    moveCursor?: ICursorType;
    resizeCursor?: ICursorType[];
    rotateCursor?: ICursorType[];
    rotateable?: boolean;
    resizeable?: boolean;
}
declare enum IDirection8 {
    topLeft = 0,
    top = 1,
    topRight = 2,
    right = 3,
    bottomRight = 4,
    bottom = 5,
    bottomLeft = 6,
    left = 7
}
interface IEditorResizeEvent extends IEvent {
    readonly target?: IUI;
    readonly editor?: IEditor;
    readonly resizeType?: IResizeType;
    readonly lockRatio?: boolean;
    readonly around?: IAround;
    readonly dragEvent?: IDragEvent;
    readonly direction?: IDirection8;
    readonly bounds?: IBoundsData;
    readonly old?: IBoundsData;
    readonly origin?: IPointData;
    readonly scaleX?: number;
    readonly scaleY?: number;
}
interface IEditorRotateEvent extends IEvent {
    readonly target?: IUI;
    readonly editor?: IEditor;
    readonly origin?: IPointData;
    readonly rotation?: number;
}

export { IDirection8, type IEditor, type IEditorConfig, type IEditorResizeEvent, type IEditorRotateEvent, type IEditorTool };
