import { __String, __Number, __Boolean, IAround, IHitType, ICursorType, IPointData, IPathCommandData, IPathString, ILeaferCanvas, IPathDrawer, IExportFileType, IRenderOptions, ILeaferImage, ICanvasContext2D, IWindingRule } from '@leafer/interface';
import { Leaf } from '@leafer/core';
import { IUI, IUIData, IGroup, IBlendMode, IPaint, IPaintString, IStrokeAlign, IStrokeWidthString, IStrokeCap, IStrokeJoin, IDashPatternString, ICornerRadiusString, IShadowEffect, IShadowString, IBlurEffect, IGrayscaleEffect, IUIBaseInputData, IUIInputData, IExportOptions, IExportResult, IGroupData, IGroupInputData, IBox, IBoxData, IOverflow, IBoxInputData, IFrame, IFrameData, IFrameInputData, IRect, IRectData, IRectInputData, IEllipse, IEllipseData, IEllipseInputData, IPolygon, IPolygonData, IPolygonInputData, IStar, IStarData, IStarInputData, ILine, ILineData, ILineInputData, IImage, IImageData, IImageInputData, ICanvas, ICanvasData, ICanvasInputData, IText, ITextData, IFontWeight, ITextCase, ITextDecoration, IUnitData, ITextAlign, IVerticalAlign, ITextDrawData, ITextInputData, IPath, IPathData, IPathString as IPathString$1, IPathInputData, IPen, IPenData, IPathCommandData as IPathCommandData$1, IPenInputData } from '@leafer-ui/interface';

declare class UI extends Leaf implements IUI {
    __: IUIData;
    parent?: IGroup;
    id: __String;
    name: __String;
    className: __String;
    blendMode: IBlendMode;
    opacity: __Number;
    visible: __Boolean;
    isMask: __Boolean;
    isEraser?: __Boolean;
    zIndex: __Number;
    locked: __Boolean;
    x: __Number;
    y: __Number;
    width: __Number;
    height: __Number;
    scaleX: __Number;
    scaleY: __Number;
    rotation: __Number;
    skewX: __Number;
    skewY: __Number;
    around: IAround;
    draggable: __Boolean;
    hittable: __Boolean;
    hitFill: IHitType;
    hitStroke: IHitType;
    hitChildren: __Boolean;
    hitSelf: __Boolean;
    hitRadius: __Number;
    cursor: ICursorType | ICursorType[];
    fill: IPaint | IPaint[] | IPaintString;
    stroke: IPaint | IPaint[] | IPaintString;
    strokeAlign: IStrokeAlign;
    strokeWidth: number | number[] | IStrokeWidthString;
    strokeCap: IStrokeCap;
    strokeJoin: IStrokeJoin;
    dashPattern: __Number[] | IDashPatternString;
    dashOffset: __Number;
    miterLimit: __Number;
    cornerRadius: number | number[] | ICornerRadiusString;
    cornerSmoothing: __Number;
    shadow: IShadowEffect | IShadowEffect[] | IShadowString;
    innerShadow: IShadowEffect | IShadowEffect[] | IShadowString;
    blur: __Number | IBlurEffect;
    backgroundBlur: __Number | IBlurEffect;
    grayscale: __Number | IGrayscaleEffect;
    set scale(value: __Number | IPointData);
    get scale(): __Number | IPointData;
    constructor(data?: IUIBaseInputData);
    set(data: IUIInputData): void;
    get(): IUIInputData;
    getPath(curve?: boolean): IPathCommandData;
    getPathString(curve?: boolean): IPathString;
    __onUpdateSize(): void;
    __updateRenderPath(): void;
    __drawRenderPath(canvas: ILeaferCanvas): void;
    __drawPath(canvas: ILeaferCanvas): void;
    __drawPathByData(_drawer: IPathDrawer, _data: IPathCommandData): void;
    export(filename: IExportFileType | string, options?: IExportOptions | number | boolean): Promise<IExportResult>;
    clone(): IUI;
    static one(data: IUIInputData, x?: number, y?: number, width?: number, height?: number): IUI;
    destroy(): void;
}

declare class Group extends UI implements IGroup {
    get __tag(): string;
    __: IGroupData;
    children: IUI[];
    get resizeable(): boolean;
    set mask(child: IUI);
    get mask(): IUI;
    constructor(data?: IGroupInputData);
    __setBranch(): void;
    set(data: IUIInputData): void;
    toJSON(): IUIInputData;
    addAt(child: IUI, index: number): void;
    addAfter(child: IUI, after: IUI): void;
    addBefore(child: UI, before: IUI): void;
    add(_child: IUI, _index?: number): void;
    addMany(..._children: IUI[]): void;
    remove(_child?: IUI, _destroy?: boolean): void;
    removeAll(_destroy?: boolean): void;
}

declare class Box extends Group implements IBox {
    get __tag(): string;
    __: IBoxData;
    overflow: IOverflow;
    get resizeable(): boolean;
    constructor(data?: IBoxInputData);
    __updateStrokeSpread(): number;
    __updateRectRenderSpread(): number;
    __updateRenderSpread(): number;
    __updateBoxBounds(): void;
    __updateStrokeBounds(): void;
    __updateRenderBounds(): void;
    __updateRectRenderBounds(): void;
    __updateRectChange(): void;
    __updateChange(): void;
    __drawPathByData(_drawer: IPathDrawer, _data: IPathCommandData): void;
    __renderRect(_canvas: ILeaferCanvas, _options: IRenderOptions): void;
    __renderGroup(_canvas: ILeaferCanvas, _options: IRenderOptions): void;
    __render(canvas: ILeaferCanvas, options: IRenderOptions): void;
    __drawAfterFill(canvas: ILeaferCanvas, options: IRenderOptions): void;
}

declare class Frame extends Box implements IFrame {
    get __tag(): string;
    __: IFrameData;
    overflow: IOverflow;
    constructor(data?: IFrameInputData);
}

declare class Rect extends UI implements IRect {
    get __tag(): string;
    __: IRectData;
    constructor(data?: IRectInputData);
    __drawPathByData(drawer: IPathDrawer, _data: IPathCommandData): void;
}

declare class Ellipse extends UI implements IEllipse {
    get __tag(): string;
    __: IEllipseData;
    innerRadius: __Number;
    startAngle: __Number;
    endAngle: __Number;
    constructor(data?: IEllipseInputData);
    __updatePath(): void;
}

declare class Polygon extends UI implements IPolygon {
    get __tag(): string;
    __: IPolygonData;
    sides: number;
    points: number[];
    curve: boolean | number;
    get resizeable(): boolean;
    constructor(data?: IPolygonInputData);
    __updatePath(): void;
    __updateRenderPath(): void;
    __updateBoxBounds(): void;
}

declare class Star extends UI implements IStar {
    get __tag(): string;
    __: IStarData;
    corners: __Number;
    innerRadius: __Number;
    constructor(data?: IStarInputData);
    __updatePath(): void;
}

declare class Line extends UI implements ILine {
    get __tag(): string;
    __: ILineData;
    strokeAlign: IStrokeAlign;
    height: __Number;
    points: number[];
    curve: boolean | number;
    get resizeable(): boolean;
    get toPoint(): IPointData;
    set toPoint(value: IPointData);
    constructor(data?: ILineInputData);
    __updatePath(): void;
    __updateRenderPath(): void;
    __updateBoxBounds(): void;
}

declare class Image extends Rect implements IImage {
    get __tag(): string;
    __: IImageData;
    url: __String;
    get ready(): boolean;
    image: ILeaferImage;
    constructor(data?: IImageInputData);
    __updateBoxBounds(): void;
    destroy(): void;
}

declare class Canvas extends Rect implements ICanvas {
    get __tag(): string;
    __: ICanvasData;
    width: __Number;
    height: __Number;
    pixelRatio: __Number;
    smooth: boolean;
    hitFill: IHitType;
    canvas: ILeaferCanvas;
    context: ICanvasContext2D;
    constructor(data?: ICanvasInputData);
    draw(ui: IUI, offset?: IPointData, scale?: number | IPointData, rotation?: number): void;
    paint(): void;
    __drawAfterFill(canvas: ILeaferCanvas, _options: IRenderOptions): void;
    __updateSize(): void;
    destroy(): void;
}

declare class Text extends UI implements IText {
    get __tag(): string;
    __: ITextData;
    width: __Number;
    height: __Number;
    padding: number | number[];
    strokeAlign: IStrokeAlign;
    text: __String;
    fontFamily: __String;
    fontSize: __Number;
    fontWeight: IFontWeight;
    italic: __Boolean;
    textCase: ITextCase;
    textDecoration: ITextDecoration;
    letterSpacing: __Number | IUnitData;
    lineHeight: __Number | IUnitData;
    paraIndent: __Number;
    paraSpacing: __Number;
    textAlign: ITextAlign;
    verticalAlign: IVerticalAlign;
    textOverflow: IOverflow | string;
    get textDrawData(): ITextDrawData;
    constructor(data?: ITextInputData);
    __drawHitPath(canvas: ILeaferCanvas): void;
    __drawPathByData(drawer: IPathDrawer, _data?: IPathCommandData): void;
    __drawRenderPath(canvas: ILeaferCanvas): void;
    __updateTextDrawData(): void;
    __updateBoxBounds(): void;
    __updateRenderSpread(): number;
    __updateRenderBounds(): void;
}

declare class Path extends UI implements IPath {
    get __tag(): string;
    __: IPathData;
    path: IPathCommandData | IPathString$1;
    windingRule: IWindingRule;
    strokeAlign: IStrokeAlign;
    get resizeable(): boolean;
    constructor(data?: IPathInputData);
    __updateBoxBounds(): void;
}

declare class Pen extends Group implements IPen {
    get __tag(): string;
    __: IPenData;
    pathElement: IPath;
    pathStyle: IPathInputData;
    path: IPathCommandData$1;
    constructor(data?: IPenInputData);
    setStyle(data: IPathInputData): Pen;
    beginPath(): Pen;
    moveTo(_x: number, _y: number): Pen;
    lineTo(_x: number, _y: number): Pen;
    bezierCurveTo(_x1: number, _y1: number, _x2: number, _y2: number, _x: number, _y: number): Pen;
    quadraticCurveTo(_x1: number, _y1: number, _x: number, _y: number): Pen;
    closePath(): Pen;
    rect(_x: number, _y: number, _width: number, _height: number): Pen;
    roundRect(_x: number, _y: number, _width: number, _height: number, _cornerRadius: number | number[]): Pen;
    ellipse(_x: number, _y: number, _radiusX: number, _radiusY: number, _rotation?: number, _startAngle?: number, _endAngle?: number, _anticlockwise?: boolean): Pen;
    arc(_x: number, _y: number, _radius: number, _startAngle?: number, _endAngle?: number, _anticlockwise?: boolean): Pen;
    arcTo(_x1: number, _y1: number, _x2: number, _y2: number, _radius: number): Pen;
    drawEllipse(_x: number, _y: number, _radiusX: number, _radiusY: number, _rotation?: number, _startAngle?: number, _endAngle?: number, _anticlockwise?: boolean): Pen;
    drawArc(_x: number, _y: number, _radius: number, _startAngle?: number, _endAngle?: number, _anticlockwise?: boolean): Pen;
    drawPoints(_points: number[], _curve?: boolean | number, _close?: boolean): Pen;
    paint(): void;
    clear(): void;
}

export { Box, Canvas, Ellipse, Frame, Group, Image, Line, Path, Pen, Polygon, Rect, Star, Text, UI };
