import { IApp, ILeaferConfig, ILeaferCanvas, IRenderOptions, IResizeEvent, ILeafer, IRenderer, IWatcher, ILayouter, ISelector, IInteraction, ICanvasManager, IHitCanvasManager, ILeaf, ITransformEventData, IAutoBounds, IEventListenerId, ITimer, IControl, IScreenSizeData, __Value } from '@leafer/interface';
import { RenderEvent } from '@leafer/core';
import { ILeaferData, IFunction, ILeaferInputData, IUIInputData } from '@leafer-ui/interface';
import { Group } from '@leafer-ui/display';

declare class App extends Leafer implements IApp {
    get __tag(): string;
    get isApp(): boolean;
    children: Leafer[];
    realCanvas: boolean;
    protected __setApp(): void;
    start(): void;
    stop(): void;
    addLeafer(merge?: ILeaferConfig): Leafer;
    add(leafer: Leafer): void;
    protected __onPropertyChange(): void;
    protected __onCreated(): void;
    protected __onReady(): void;
    protected __onViewReady(): void;
    protected __checkViewCompleted(): boolean;
    protected __onChildRenderEnd(e: RenderEvent): void;
    __render(canvas: ILeaferCanvas, _options: IRenderOptions): void;
    __onResize(event: IResizeEvent): void;
    protected __checkUpdateLayout(): void;
    protected __getChildConfig(userConfig?: ILeaferConfig): ILeaferConfig;
    protected __listenChildEvents(leafer: ILeafer): void;
}

declare class Leafer extends Group implements ILeafer {
    get __tag(): string;
    __: ILeaferData;
    pixelRatio: number;
    get isApp(): boolean;
    get app(): ILeafer;
    parent?: App;
    running: boolean;
    created: boolean;
    ready: boolean;
    viewReady: boolean;
    viewCompleted: boolean;
    view: unknown;
    canvas: ILeaferCanvas;
    renderer: IRenderer;
    watcher: IWatcher;
    layouter: ILayouter;
    selector?: ISelector;
    interaction?: IInteraction;
    canvasManager: ICanvasManager;
    hitCanvasManager?: IHitCanvasManager;
    zoomLayer: ILeaf;
    moveLayer: ILeaf;
    transformData?: ITransformEventData;
    userConfig: ILeaferConfig;
    config: ILeaferConfig;
    autoLayout?: IAutoBounds;
    __eventIds: IEventListenerId[];
    protected __startTimer: ITimer;
    protected __controllers: IControl[];
    protected __readyWait: IFunction[];
    protected __viewReadyWait: IFunction[];
    protected __viewCompletedWait: IFunction[];
    __nextRenderWait: IFunction[];
    constructor(userConfig?: ILeaferConfig, data?: ILeaferInputData);
    init(userConfig?: ILeaferConfig, parentApp?: IApp): void;
    set(data: IUIInputData): void;
    start(): void;
    stop(): void;
    resize(size: IScreenSizeData): void;
    forceLayout(): void;
    forceFullRender(): void;
    updateCursor(): void;
    protected __doResize(size: IScreenSizeData): void;
    protected __onResize(event: IResizeEvent): void;
    protected __setApp(): void;
    protected __bindApp(app: IApp): void;
    __setLeafer(leafer: ILeafer): void;
    setZoomLayer(zoomLayer: ILeaf, moveLayer?: ILeaf): void;
    protected __checkAutoLayout(config: ILeaferConfig): void;
    __setAttr(attrName: string, newValue: __Value): void;
    __getAttr(attrName: string): __Value;
    protected __changeCanvasSize(attrName: string, newValue: number): void;
    protected __changeFill(newValue: string): void;
    protected __onCreated(): void;
    protected __onReady(): void;
    protected __onViewReady(): void;
    protected __onRenderEnd(_e: RenderEvent): void;
    protected __checkViewCompleted(): boolean;
    protected __onViewCompleted(): void;
    protected __onWatchData(): void;
    waitReady(item: IFunction): void;
    waitViewReady(item: IFunction): void;
    waitViewCompleted(item: IFunction): void;
    nextRender(item: IFunction): void;
    protected __checkUpdateLayout(): void;
    protected emitLeafer(type: string): void;
    protected __listenEvents(): void;
    protected __removeListenEvents(): void;
    destroy(): void;
}

export { App, Leafer };
